// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: emissions/state/v1/tx.proto

package statev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_SetInferences_FullMethodName                = "/emissions.state.v1.Msg/SetInferences"
	Msg_ProcessInferences_FullMethodName            = "/emissions.state.v1.Msg/ProcessInferences"
	Msg_SetLatestInferencesTimestamp_FullMethodName = "/emissions.state.v1.Msg/SetLatestInferencesTimestamp"
	Msg_SetWeights_FullMethodName                   = "/emissions.state.v1.Msg/SetWeights"
	Msg_CreateNewTopic_FullMethodName               = "/emissions.state.v1.Msg/CreateNewTopic"
	Msg_RegisterReputer_FullMethodName              = "/emissions.state.v1.Msg/RegisterReputer"
	Msg_RegisterWorker_FullMethodName               = "/emissions.state.v1.Msg/RegisterWorker"
	Msg_AddStake_FullMethodName                     = "/emissions.state.v1.Msg/AddStake"
	Msg_RemoveStake_FullMethodName                  = "/emissions.state.v1.Msg/RemoveStake"
	Msg_RemoveAllStake_FullMethodName               = "/emissions.state.v1.Msg/RemoveAllStake"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	SetInferences(ctx context.Context, in *MsgSetInferences, opts ...grpc.CallOption) (*MsgSetInferencesResponse, error)
	ProcessInferences(ctx context.Context, in *MsgProcessInferences, opts ...grpc.CallOption) (*MsgProcessInferencesResponse, error)
	SetLatestInferencesTimestamp(ctx context.Context, in *MsgSetLatestInferencesTimestamp, opts ...grpc.CallOption) (*MsgSetLatestInferencesTimestampResponse, error)
	SetWeights(ctx context.Context, in *MsgSetWeights, opts ...grpc.CallOption) (*MsgSetWeightsResponse, error)
	CreateNewTopic(ctx context.Context, in *MsgCreateNewTopic, opts ...grpc.CallOption) (*MsgCreateNewTopicResponse, error)
	RegisterReputer(ctx context.Context, in *MsgRegisterReputer, opts ...grpc.CallOption) (*MsgRegisterReputerResponse, error)
	RegisterWorker(ctx context.Context, in *MsgRegisterWorker, opts ...grpc.CallOption) (*MsgRegisterWorkerResponse, error)
	AddStake(ctx context.Context, in *MsgAddStake, opts ...grpc.CallOption) (*MsgAddStakeResponse, error)
	RemoveStake(ctx context.Context, in *MsgRemoveStake, opts ...grpc.CallOption) (*MsgRemoveStakeResponse, error)
	RemoveAllStake(ctx context.Context, in *MsgRemoveAllStake, opts ...grpc.CallOption) (*MsgRemoveAllStakeResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetInferences(ctx context.Context, in *MsgSetInferences, opts ...grpc.CallOption) (*MsgSetInferencesResponse, error) {
	out := new(MsgSetInferencesResponse)
	err := c.cc.Invoke(ctx, Msg_SetInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessInferences(ctx context.Context, in *MsgProcessInferences, opts ...grpc.CallOption) (*MsgProcessInferencesResponse, error) {
	out := new(MsgProcessInferencesResponse)
	err := c.cc.Invoke(ctx, Msg_ProcessInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetLatestInferencesTimestamp(ctx context.Context, in *MsgSetLatestInferencesTimestamp, opts ...grpc.CallOption) (*MsgSetLatestInferencesTimestampResponse, error) {
	out := new(MsgSetLatestInferencesTimestampResponse)
	err := c.cc.Invoke(ctx, Msg_SetLatestInferencesTimestamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetWeights(ctx context.Context, in *MsgSetWeights, opts ...grpc.CallOption) (*MsgSetWeightsResponse, error) {
	out := new(MsgSetWeightsResponse)
	err := c.cc.Invoke(ctx, Msg_SetWeights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNewTopic(ctx context.Context, in *MsgCreateNewTopic, opts ...grpc.CallOption) (*MsgCreateNewTopicResponse, error) {
	out := new(MsgCreateNewTopicResponse)
	err := c.cc.Invoke(ctx, Msg_CreateNewTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterReputer(ctx context.Context, in *MsgRegisterReputer, opts ...grpc.CallOption) (*MsgRegisterReputerResponse, error) {
	out := new(MsgRegisterReputerResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterWorker(ctx context.Context, in *MsgRegisterWorker, opts ...grpc.CallOption) (*MsgRegisterWorkerResponse, error) {
	out := new(MsgRegisterWorkerResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddStake(ctx context.Context, in *MsgAddStake, opts ...grpc.CallOption) (*MsgAddStakeResponse, error) {
	out := new(MsgAddStakeResponse)
	err := c.cc.Invoke(ctx, Msg_AddStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveStake(ctx context.Context, in *MsgRemoveStake, opts ...grpc.CallOption) (*MsgRemoveStakeResponse, error) {
	out := new(MsgRemoveStakeResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAllStake(ctx context.Context, in *MsgRemoveAllStake, opts ...grpc.CallOption) (*MsgRemoveAllStakeResponse, error) {
	out := new(MsgRemoveAllStakeResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveAllStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	SetInferences(context.Context, *MsgSetInferences) (*MsgSetInferencesResponse, error)
	ProcessInferences(context.Context, *MsgProcessInferences) (*MsgProcessInferencesResponse, error)
	SetLatestInferencesTimestamp(context.Context, *MsgSetLatestInferencesTimestamp) (*MsgSetLatestInferencesTimestampResponse, error)
	SetWeights(context.Context, *MsgSetWeights) (*MsgSetWeightsResponse, error)
	CreateNewTopic(context.Context, *MsgCreateNewTopic) (*MsgCreateNewTopicResponse, error)
	RegisterReputer(context.Context, *MsgRegisterReputer) (*MsgRegisterReputerResponse, error)
	RegisterWorker(context.Context, *MsgRegisterWorker) (*MsgRegisterWorkerResponse, error)
	AddStake(context.Context, *MsgAddStake) (*MsgAddStakeResponse, error)
	RemoveStake(context.Context, *MsgRemoveStake) (*MsgRemoveStakeResponse, error)
	RemoveAllStake(context.Context, *MsgRemoveAllStake) (*MsgRemoveAllStakeResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) SetInferences(context.Context, *MsgSetInferences) (*MsgSetInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInferences not implemented")
}
func (UnimplementedMsgServer) ProcessInferences(context.Context, *MsgProcessInferences) (*MsgProcessInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInferences not implemented")
}
func (UnimplementedMsgServer) SetLatestInferencesTimestamp(context.Context, *MsgSetLatestInferencesTimestamp) (*MsgSetLatestInferencesTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLatestInferencesTimestamp not implemented")
}
func (UnimplementedMsgServer) SetWeights(context.Context, *MsgSetWeights) (*MsgSetWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWeights not implemented")
}
func (UnimplementedMsgServer) CreateNewTopic(context.Context, *MsgCreateNewTopic) (*MsgCreateNewTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewTopic not implemented")
}
func (UnimplementedMsgServer) RegisterReputer(context.Context, *MsgRegisterReputer) (*MsgRegisterReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReputer not implemented")
}
func (UnimplementedMsgServer) RegisterWorker(context.Context, *MsgRegisterWorker) (*MsgRegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedMsgServer) AddStake(context.Context, *MsgAddStake) (*MsgAddStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStake not implemented")
}
func (UnimplementedMsgServer) RemoveStake(context.Context, *MsgRemoveStake) (*MsgRemoveStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStake not implemented")
}
func (UnimplementedMsgServer) RemoveAllStake(context.Context, *MsgRemoveAllStake) (*MsgRemoveAllStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllStake not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SetInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetInferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetInferences(ctx, req.(*MsgSetInferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessInferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProcessInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessInferences(ctx, req.(*MsgProcessInferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetLatestInferencesTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetLatestInferencesTimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetLatestInferencesTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetLatestInferencesTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetLatestInferencesTimestamp(ctx, req.(*MsgSetLatestInferencesTimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetWeights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetWeights(ctx, req.(*MsgSetWeights))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNewTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNewTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNewTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateNewTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNewTopic(ctx, req.(*MsgCreateNewTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterReputer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterReputer(ctx, req.(*MsgRegisterReputer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterWorker(ctx, req.(*MsgRegisterWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddStake(ctx, req.(*MsgAddStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveStake(ctx, req.(*MsgRemoveStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAllStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAllStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAllStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAllStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAllStake(ctx, req.(*MsgRemoveAllStake))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.state.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInferences",
			Handler:    _Msg_SetInferences_Handler,
		},
		{
			MethodName: "ProcessInferences",
			Handler:    _Msg_ProcessInferences_Handler,
		},
		{
			MethodName: "SetLatestInferencesTimestamp",
			Handler:    _Msg_SetLatestInferencesTimestamp_Handler,
		},
		{
			MethodName: "SetWeights",
			Handler:    _Msg_SetWeights_Handler,
		},
		{
			MethodName: "CreateNewTopic",
			Handler:    _Msg_CreateNewTopic_Handler,
		},
		{
			MethodName: "RegisterReputer",
			Handler:    _Msg_RegisterReputer_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Msg_RegisterWorker_Handler,
		},
		{
			MethodName: "AddStake",
			Handler:    _Msg_AddStake_Handler,
		},
		{
			MethodName: "RemoveStake",
			Handler:    _Msg_RemoveStake_Handler,
		},
		{
			MethodName: "RemoveAllStake",
			Handler:    _Msg_RemoveAllStake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/state/v1/tx.proto",
}
