package inference_synthesis_test

import (
	"encoding/csv"
	"fmt"
	"strings"

	alloraMath "github.com/allora-network/allora-chain/math"
)

const simulatorHeaders = "returns,inference_0,inference_1,inference_2,inference_3,inference_4,forecasted_loss_0_for_0,forecasted_loss_0_for_1,forecasted_loss_0_for_2,forecasted_loss_0_for_3,forecasted_loss_0_for_4,forecasted_loss_1_for_0,forecasted_loss_1_for_1,forecasted_loss_1_for_2,forecasted_loss_1_for_3,forecasted_loss_1_for_4,forecasted_loss_2_for_0,forecasted_loss_2_for_1,forecasted_loss_2_for_2,forecasted_loss_2_for_3,forecasted_loss_2_for_4,forecast_implied_inference_0,forecast_implied_inference_1,forecast_implied_inference_2,forecast_implied_inference_0_oneout_0,forecast_implied_inference_0_oneout_1,forecast_implied_inference_0_oneout_2,forecast_implied_inference_0_oneout_3,forecast_implied_inference_0_oneout_4,forecast_implied_inference_1_oneout_0,forecast_implied_inference_1_oneout_1,forecast_implied_inference_1_oneout_2,forecast_implied_inference_1_oneout_3,forecast_implied_inference_1_oneout_4,forecast_implied_inference_2_oneout_0,forecast_implied_inference_2_oneout_1,forecast_implied_inference_2_oneout_2,forecast_implied_inference_2_oneout_3,forecast_implied_inference_2_oneout_4,network_inference,network_naive_inference,network_inference_oneout_0,network_inference_oneout_1,network_inference_oneout_2,network_inference_oneout_3,network_inference_oneout_4,network_inference_oneout_5,network_inference_oneout_6,network_inference_oneout_7,network_naive_inference_onein_0,network_naive_inference_onein_1,network_naive_inference_onein_2,network_loss,reputer_stake_0,reputer_stake_1,reputer_stake_2,reputer_stake_3,reputer_stake_4,reputer_0_loss_inference_0,reputer_0_loss_inference_1,reputer_0_loss_inference_2,reputer_0_loss_inference_3,reputer_0_loss_inference_4,reputer_1_loss_inference_0,reputer_1_loss_inference_1,reputer_1_loss_inference_2,reputer_1_loss_inference_3,reputer_1_loss_inference_4,reputer_2_loss_inference_0,reputer_2_loss_inference_1,reputer_2_loss_inference_2,reputer_2_loss_inference_3,reputer_2_loss_inference_4,reputer_3_loss_inference_0,reputer_3_loss_inference_1,reputer_3_loss_inference_2,reputer_3_loss_inference_3,reputer_3_loss_inference_4,reputer_4_loss_inference_0,reputer_4_loss_inference_1,reputer_4_loss_inference_2,reputer_4_loss_inference_3,reputer_4_loss_inference_4,reputer_0_loss_forecast_implied_inference_0,reputer_0_loss_forecast_implied_inference_1,reputer_0_loss_forecast_implied_inference_2,reputer_1_loss_forecast_implied_inference_0,reputer_1_loss_forecast_implied_inference_1,reputer_1_loss_forecast_implied_inference_2,reputer_2_loss_forecast_implied_inference_0,reputer_2_loss_forecast_implied_inference_1,reputer_2_loss_forecast_implied_inference_2,reputer_3_loss_forecast_implied_inference_0,reputer_3_loss_forecast_implied_inference_1,reputer_3_loss_forecast_implied_inference_2,reputer_4_loss_forecast_implied_inference_0,reputer_4_loss_forecast_implied_inference_1,reputer_4_loss_forecast_implied_inference_2,inference_loss_0,inference_loss_1,inference_loss_2,inference_loss_3,inference_loss_4,forecast_implied_inference_loss_0,forecast_implied_inference_loss_1,forecast_implied_inference_loss_2,inference_regret_worker_0,inference_regret_worker_1,inference_regret_worker_2,inference_regret_worker_3,inference_regret_worker_4,inference_regret_worker_5,inference_regret_worker_6,inference_regret_worker_7,inference_regret_worker_0_onein_0,inference_regret_worker_1_onein_0,inference_regret_worker_2_onein_0,inference_regret_worker_3_onein_0,inference_regret_worker_4_onein_0,inference_regret_worker_5_onein_0,inference_regret_worker_0_onein_1,inference_regret_worker_1_onein_1,inference_regret_worker_2_onein_1,inference_regret_worker_3_onein_1,inference_regret_worker_4_onein_1,inference_regret_worker_5_onein_1,inference_regret_worker_0_onein_2,inference_regret_worker_1_onein_2,inference_regret_worker_2_onein_2,inference_regret_worker_3_onein_2,inference_regret_worker_4_onein_2,inference_regret_worker_5_onein_2,reputer_0_loss_network_inference,reputer_1_loss_network_inference,reputer_2_loss_network_inference,reputer_3_loss_network_inference,reputer_4_loss_network_inference,network_loss_reputers"

func GetSimulatedValuesGetterForEpoch(
	epoch string,
) func(header string) alloraMath.Dec {
	r := csv.NewReader(strings.NewReader(simulatorHeaders + "\n" + epoch + "\n"))
	headersRead, err := r.Read()
	if err != nil {
		panic(err)
	}
	valuesRead, err := r.Read()
	if err != nil {
		panic(err)
	}
	simulatedValuesDec := make(map[string]alloraMath.Dec)
	if len(headersRead) != len(valuesRead) {
		panic("Header and values length mismatch")
	}
	for i := 0; i < len(headersRead); i++ {
		simulatedValuesDec[headersRead[i]] = alloraMath.MustNewDecFromString(valuesRead[i])
	}

	return func(header string) alloraMath.Dec {
		value, exists := simulatedValuesDec[header]
		if !exists {
			panic(fmt.Sprintf("Header '%s' not found in simulated values map", header))
		}
		return value
	}
}

func GetSimulatedValuesGetterForEpochs() map[int]func(header string) alloraMath.Dec {
	simulatorEpochs := map[int]string{
		2: "0.03178207880760021,-0.230622933739544,-0.19693894066605602,0.048704500498029504,0.054145121711977245,0.22919548623217473,-1.18172420646634,0.26621077264804827,-3.3897339254838474,-2.571846047295651,-2.0259184257783027,-0.5499700025611789,-1.7328740794514994,-4.338275221094591,-2.724483852551699,-2.1336429998512143,-0.5019942929743771,-0.6804897420817917,-3.792402810523422,-2.811890974392894,-1.4041161461317468,0.05403102080389692,0.04922834703615315,0.04954788276682784,0.05685567279701529,0.05000352194763739,0.08022256316427133,0.05481428931368454,0.047321301762175076,0.04889426405222525,0.050203045157962686,0.06563711044975742,0.04928523873520655,0.047878442353090994,0.04951209695386524,0.04968602947180613,0.055508789681751255,0.04913573002937966,0.04878697422828431,0.007161310580432416,-0.019103353192683702,0.04148117165417589,0.035902110182863385,0.00816388526204742,0.0005104814861249907,-0.025817933407434695,0.00046563769136606246,0.001151733943900887,0.0011060859823759312,-0.006914290859920277,-0.007714736487877573,-0.007661480532765125,-4.893498750410228,210535.17868298586,216697.59934561152,161740.20377046912,394847.51316806424,206170.06024545094,-2.2343006528249094,-2.792550873320775,-1.5440642777461833,-3.2179096445281856,-2.266891105877178,-2.121183041048061,-3.0327585803388817,-1.5537651318034542,-3.4287428212464928,-1.9692816101769068,-2.1920231037407203,-2.785811084367808,-1.753455977343409,-3.1195990096203157,-2.2110795616014465,-2.1571031771226314,-2.761718838699133,-1.5380057584990876,-3.19672982116354,-2.1369799918404144,-2.2771837795724736,-2.8628982847566364,-1.5463939783257883,-3.195013388928508,-2.1833305864744603,-4.867574982517031,-5.059471261766153,-4.834883795282288,-5.074813464108836,-5.028848891826424,-4.915862550163092,-4.6834319708821806,-4.979989953804598,-5.004204282733437,-4.921832064816302,-4.846165908785239,-4.9183980418244335,-5.032287470995465,-4.998807039058706,-5.063485917337664,-2.1897706281400366,-2.8373343518455867,-1.572684110944005,-3.231945838412287,-2.147527980840491,-4.926824873711378,-4.9618054852530085,-4.939960375271497,0.29240709744359666,0.41822210449254626,0.17663500756729117,0.4961746382998652,0.27996059439471166,0.8160663799969627,0.8234558968607071,0.8196673491058456,0.29086859544474397,0.4166836024936934,0.17509650556843842,0.49463613630101233,0.27842209239585874,0.8145278779981101,0.2780533480954255,0.4038683551443749,0.16228125821911993,0.48182088895169384,0.26560684504654025,0.8091021475125357,0.27692565343841374,0.40274066048736323,0.1611535635621082,0.48069319429468216,0.2644791503895285,0.8041859051006626,-4.931794543987086,-5.01650814668254,-4.590153669869233,-4.906627167248604,-4.937932553142897,-4.893498750410228",
		3: "-0.07990917965471390,-0.035995138925040600,-0.07333303938740420,-0.1495482917094790,-0.12952123274063800,-0.0703055329498285,-2.480767250656480,-3.5546685650440400,-4.6188184193555700,-3.084052840898730,-4.73003856038905,-2.6366811669641100,-4.668814135864770,-1.901004446344670,-1.7447621462061600,-3.6984295084170300,-2.2700889501915100,-3.5886903414115300,-2.119137360333620,-2.1176515266976500,-3.447694011689490,-0.1025675327315210,-0.07302318589259440,-0.07233832253513270,-0.10102068312719200,-0.10364793148967000,-0.0705067589574468,-0.10275234779836800,-0.14807539029122000,-0.07319270251459320,-0.0698427104144564,-0.0729888677103869,-0.07305532421316020,-0.07321629821257050,-0.07243222844764320,-0.07036013256420400,-0.07226434253912820,-0.07228409928815510,-0.0733821377291926,-0.08595551799339320,-0.0903194538050178,-0.09193875537568730,-0.08725723597921200,-0.07611975173450570,-0.07876098982982720,-0.09549195980225840,-0.0831086124651002,-0.0880928742443665,-0.08821296390705380,-0.09101522746174310,-0.08506554261579950,-0.08491153277529740,-4.83458359235066,210936.14772503000,217043.74857975600,162033.2054079190,395516.59487132900,206620.42964977800,-2.217852686051450,-2.7711015061857100,-1.5734375187707200,-3.2199574954128100,-2.254909150156220,-2.108880385172200,-3.007950683438180,-1.585144682537210,-3.4266914775613900,-1.960502548939210,-2.077444340504020,-2.6673314342959800,-1.900240284607540,-3.154663369533270,-2.142815319485580,-2.112662627942500,-2.6900735880222800,-1.633512574150120,-3.1988046047983300,-2.1048421628128900,-2.243965671368460,-2.811499693808030,-1.6115919229428000,-3.2021438541666500,-2.16498558347734,-4.847406907619320,-5.039758132164750,-4.817671740563480,-5.048913731669620,-5.006006193860710,-4.893551054567160,-4.575929170587920,-4.867617557617700,-4.874937265335570,-4.839456170853650,-4.786611853071780,-4.851181928372790,-4.974365559800200,-4.9547049150212600,-5.013835876725160,-2.1485564569077400,-2.780237637841960,-1.6465306848072400,-3.23861581701918,-2.1207011663432300,-4.866561367242140,-4.911489536204000,-4.884385989893730,-0.0054363258450547100,0.1709652985924220,-0.15983378394378000,0.28696039693673100,-0.019423707645502900,0.7376575194864140,0.7488009015599700,0.7426808539495680,-0.0053184502499764600,0.17108317418750000,-0.15971590834870200,0.28707827253180900,-0.019305832050424900,0.7377753950814930,-0.023527930610206600,0.15287369382726900,-0.17792538870893200,0.26886879217157900,-0.03751531241065500,0.7307092967948180,-0.0249860078679687,0.15141561656950700,-0.1793834659666940,0.26741071491381700,-0.0389733896684171,0.7231311719266530,-4.908209314287180,-4.990058152230000,-4.484965901600790,-4.827068818323690,-4.884659886876160,-4.83458359235066",
	}

	gettersMap := map[int](func(header string) alloraMath.Dec){}
	for epochNumber, epoch := range simulatorEpochs {
		gettersMap[epochNumber] = GetSimulatedValuesGetterForEpoch(epoch)
	}
	return gettersMap
}
