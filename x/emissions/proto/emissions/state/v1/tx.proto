syntax = "proto3";
package emissions.state.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "emissions/state/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc SetInferences(MsgSetInferences) returns (MsgSetInferencesResponse);

  rpc ProcessInferences(MsgProcessInferences) returns (MsgProcessInferencesResponse);

  rpc SetLatestInferencesTimestamp(MsgSetLatestInferencesTimestamp) returns (MsgSetLatestInferencesTimestampResponse);

  rpc SetWeights(MsgSetWeights) returns (MsgSetWeightsResponse);

  rpc CreateNewTopic(MsgCreateNewTopic) returns (MsgCreateNewTopicResponse);

  rpc RegisterReputer(MsgRegisterReputer) returns (MsgRegisterReputerResponse);

  rpc RegisterWorker(MsgRegisterWorker) returns (MsgRegisterWorkerResponse);

  rpc AddStake(MsgAddStake) returns (MsgAddStakeResponse);

  rpc ModifyStake(MsgModifyStake) returns (MsgModifyStakeResponse);

  rpc StartRemoveStake(MsgStartRemoveStake) returns (MsgStartRemoveStakeResponse);

  rpc ConfirmRemoveStake(MsgConfirmRemoveStake) returns (MsgConfirmRemoveStakeResponse);

  rpc StartRemoveAllStake(MsgStartRemoveAllStake) returns (MsgStartRemoveAllStakeResponse);
}

message MsgCreateNewTopic {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message sender.
  string creator = 1;

  string metadata = 2;
  string weight_logic = 3;
  string weight_method = 4;
  uint64 weight_cadence = 5;
  string inference_logic = 6;
  string inference_method = 7;
  uint64 inference_cadence = 8;
  bool active = 9;
}

message MsgCreateNewTopicResponse {
  uint64 topic_id = 1;
}

// MsgSetWeights sets the weights for a given validator.
message MsgSetWeights {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Weight weights = 2;
}

message MsgSetWeightsResponse {}

// MsgSetInferences sets the inferences for a given validator.
message MsgSetInferences {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Inference inferences = 2;
}

message MsgSetInferencesResponse {}

message MsgSetLatestInferencesTimestamp {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
  uint64 inference_timestamp = 3;
}

message MsgSetLatestInferencesTimestampResponse {}


message MsgProcessInferences {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Inference inferences = 2;
}

message MsgProcessInferencesResponse {}

///
///  Inference Node Registration
///

// Message for registering an Inference compute node
message MsgRegisterReputer {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;                      // Message sender.
  string lib_p2p_key = 2;                  // LibP2P key of the node.
  string multi_address = 3;              // Network address for connectivity.
  uint64 topic_id = 4;                     // Topic ID the node is signing up to participate in.
  string initial_stake = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // Initial stake for the node.

}

// Response for registering an Inference compute node
message MsgRegisterReputerResponse {
  bool success = 1;                     // Indicates if registration was successful.
  string message = 2;                   // Additional message or details.
}


// Message for registering an Inference compute node
message MsgRegisterWorker {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;                      // Message sender.
  string lib_p2p_key = 2;                  // LibP2P key of the node.
  string multi_address = 3;                // Network address for connectivity.
  uint64 topic_id = 4;                     // Topic ID the node is signing up to participate in.
  string initial_stake = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // Initial stake for the node.
  string owner = 6;
}

// Response for registering an Inference compute node
message MsgRegisterWorkerResponse {
  bool success = 1;                     // Indicates if registration was successful.
  string message = 2;                   // Additional message or details.
}


message MsgAddStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string amount = 2 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string stake_target = 3;
}

message MsgAddStakeResponse {}

message MsgStartRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
}

message MsgStartRemoveStakeResponse {}

message MsgConfirmRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveStakeResponse {}

message MsgStartRemoveAllStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgStartRemoveAllStakeResponse {}

message MsgModifyStake{
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
  repeated StakePlacement placements_add = 3;
}

message MsgModifyStakeResponse{}


message InferenceRequest {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 nonce = 2;
  uint64 topic_id = 3;
  uint64 cadence = 4; // time in seconds between inferences, zero means oneshot inference
  string max_price_per_inference = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // number of inferences possible = bidAmount / (max_per_inference_price * cadence)
  string bid_amount = 6 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // how many funds to send from alice with this Inference Request
  uint64 timestamp_valid_until = 7;
  bytes extra_data = 8;
}


