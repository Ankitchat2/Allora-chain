syntax = "proto3";
package emissions.state.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "emissions/state/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc SetInferences(MsgSetInferences) returns (MsgSetInferencesResponse);

  rpc ProcessInferences(MsgProcessInferences) returns (MsgProcessInferencesResponse);

  rpc SetWeights(MsgSetWeights) returns (MsgSetWeightsResponse);

  rpc CreateNewTopic(MsgCreateNewTopic) returns (MsgCreateNewTopicResponse);

  rpc Register(MsgRegister) returns (MsgRegisterResponse);

  rpc AddNewRegistration(MsgAddNewRegistration) returns (MsgAddNewRegistrationResponse);

  rpc RemoveRegistration(MsgRemoveRegistration) returns (MsgRemoveRegistrationResponse);

  rpc AddStake(MsgAddStake) returns (MsgAddStakeResponse);

  rpc ModifyStake(MsgModifyStake) returns (MsgModifyStakeResponse);

  rpc StartRemoveStake(MsgStartRemoveStake) returns (MsgStartRemoveStakeResponse);

  rpc ConfirmRemoveStake(MsgConfirmRemoveStake) returns (MsgConfirmRemoveStakeResponse);

  rpc StartRemoveAllStake(MsgStartRemoveAllStake) returns (MsgStartRemoveAllStakeResponse);

  rpc RequestInference(MsgRequestInference) returns (MsgRequestInferenceResponse);
}

message MsgCreateNewTopic {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message sender.
  string creator = 1;

  string metadata = 2;
  string weight_logic = 3;
  string weight_method = 4;
  uint64 weight_cadence = 5;
  string inference_logic = 6;
  string inference_method = 7;
  uint64 inference_cadence = 8;
  bool active = 9;
  string default_arg = 10;
}

message MsgCreateNewTopicResponse {
  uint64 topic_id = 1;
}

// MsgSetWeights sets the weights for a given validator.
message MsgSetWeights {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Weight weights = 2;
}

message MsgSetWeightsResponse {}

// MsgSetInferences sets the inferences for a given validator.
message MsgSetInferences {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Inference inferences = 2;
}

message MsgSetInferencesResponse {}

message MsgProcessInferences {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  repeated Inference inferences = 2;
}

message MsgProcessInferencesResponse {}

///
///  Inference Node Registration
///
message MsgRegister {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string lib_p2p_key = 2;
  string multi_address = 3;
  repeated uint64 topics_ids = 4;
  string initial_stake = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string owner = 6;
  bool is_reputer = 7;
}

message MsgRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MsgAddNewRegistration {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string lib_p2p_key = 2;
  string multi_address = 3;
  uint64 topicId = 4;
  string owner = 5;
  bool isReputer = 6;
}

message MsgAddNewRegistrationResponse {
  bool success = 1;
  string message = 2;
}

message MsgRemoveRegistration {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  uint64 topicId = 2;
  bool isReputer = 3;
}

message MsgRemoveRegistrationResponse {
  bool success = 1;
  string message = 2;
}

///
///  Staking
///
message MsgAddStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string amount = 2 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  string stake_target = 3;
}

message MsgAddStakeResponse {}

message MsgStartRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
}

message MsgStartRemoveStakeResponse {}

message MsgConfirmRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveStakeResponse {}

message MsgStartRemoveAllStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgStartRemoveAllStakeResponse {}

message MsgModifyStake{
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
  repeated StakePlacement placements_add = 3;
}

message MsgModifyStakeResponse{}

message MsgRequestInference {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  repeated RequestInferenceListItem requests = 2;
  }

message RequestInferenceListItem{
  uint64 nonce = 1;
  uint64 topic_id = 2;
  uint64 cadence = 3; // time in seconds between inferences, zero means oneshot inference
  string max_price_per_inference = 4 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // the maximum price per inference that alice is willing to pay
  string bid_amount = 5 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ]; // how many funds to send from alice with this Inference Request
  uint64 timestamp_valid_until = 6;
  bytes extra_data = 7;
}

message MsgRequestInferenceResponse {}