syntax = "proto3";
package emissions.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Params defines the parameters of the module.
message Params {
  string version = 1;        // version of the protocol should be in lockstep with github release tag version
  int64 reward_cadence = 2;  // length of an "epoch" for rewards payouts in blocks
  string min_topic_weight = 3 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // total unmet demand for a topic < this => don't run inference solicatation or weight-adjustment
  uint64 max_topics_per_block = 4;  // max number of topics to run cadence for per block
  string max_missing_inference_percent = 5 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // if a worker has this percentage of inferences missing, penalize them
  string required_minimum_stake = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                    // minimum amount of tokens to send to stake as a reputer or worker
  int64 remove_stake_delay_window = 7;  // how long to wait before allowed to remove stake
  int64 min_epoch_length = 8;           // fastest allowable topic epoch and cadence of a repeating inference request
  string sharpness = 9 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // controls going from stake-weighted consensus at low values to majority vote of above-average stake holders at
      // high values
  string beta_entropy = 10 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // controls resilience of reward payouts against copycat workers
  string learning_rate = 11 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // speed of gradient descent
  string max_gradient_threshold = 12 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // gradient descent stops when gradient falls below this
  string min_stake_fraction = 13 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // minimum fraction of stake to listen to when setting consensus listening coefficients
  string epsilon = 14 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // small number to prevent division by zero
  string p_inference_synthesis = 15 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // fiducial value of exponent for Inference Synthesis gradient function
  string p_reward_spread = 16 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // fiducial value = 1; Exponent for W_i total reward allocated to reputers per timestep
  string alpha_regret = 17 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // how much to weight the most recent log-loss differences in regret EMA update
  uint64 max_unfulfilled_worker_requests = 18;   // max num worker request nonces to keep track of per topic
  uint64 max_unfulfilled_reputer_requests = 19;  // max num reputer request nonces to keep track of per topic
  string topic_reward_stake_importance = 20 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // The exponent μ represents the importance of stake in the reward of a topic and has a fiducial value of 0.5
  string topic_reward_fee_revenue_importance = 21 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // The exponent ν represents the importance of fee revenue in the reward of a topic and has a fiducial value of
      // 0.5
  string topic_reward_alpha = 22 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // global exponential moving average parameter. Fiducial value of 0.9375 on a monthly timescale, 0.5 for weekly
      // updates
  string task_reward_alpha = 23 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // global exponential moving average parameter. Fiducial value of 0.1 used to calculate ~U_ij, ~V_ik, ~W_im
  string validators_vs_allora_percent_reward = 24 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // percent of total supply rewarded to cosmos network validators, rest goes to allora reputers workers etc
  uint64 max_samples_to_scale_scores = 25;  // number of scores to use for standard deviation calculation
  // max this many inferences from unique workers and forecasts thereof are accepted per payload
  uint64 max_top_workers_to_reward = 26;   // max number of top workers by score to reward
  uint64 max_top_reputers_to_reward = 27;  // max number of top reputers by score to reward
  string create_topic_fee = 28 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // topic registration fee
  string sigmoid_a = 29 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // parameter a for sigmoid function, fiducial value = 8
  string sigmoid_b = 30 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];                                                // parameter b for sigmoid function, fiducial value = 0.5
  uint64 gradient_descent_max_iters = 31;           // max number of gradient descent iterations
  int64 max_retries_to_fulfil_nonces_worker = 32;   // max number of retries to unfulfilled nonces (worker)
  int64 max_retries_to_fulfil_nonces_reputer = 33;  // max number of retries to unfulfilled nonces (reputer)
  uint64 topic_page_limit = 34;
  uint64 max_topic_pages = 35;
  string registration_fee = 36 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                          // registration fee for workers and reputers
  uint64 default_limit = 37;  // default limit for pagination
  uint64 max_limit = 38;      // max limit for pagination
  int64 min_epoch_length_record_limit =
      39;  // min number of epochs to keep network losses, reputer losses, inferences, forecasts
  int64 max_serialized_msg_length =
      40;  // max length of input data for msg and query server calls
}
