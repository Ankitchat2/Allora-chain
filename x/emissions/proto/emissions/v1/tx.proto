syntax = "proto3";
package emissions.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "emissions/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc InsertInferences(MsgInsertInferences) returns (MsgInsertInferencesResponse);

  rpc InsertForecasts(MsgInsertForecasts) returns (MsgInsertForecastsResponse);

  rpc CreateNewTopic(MsgCreateNewTopic) returns (MsgCreateNewTopicResponse);

  rpc ReactivateTopic(MsgReactivateTopic) returns (MsgReactivateTopicResponse);

  rpc Register(MsgRegister) returns (MsgRegisterResponse);

  rpc AddNewRegistration(MsgAddNewRegistration) returns (MsgAddNewRegistrationResponse);

  rpc RemoveRegistration(MsgRemoveRegistration) returns (MsgRemoveRegistrationResponse);

  rpc InsertLosses(MsgInsertLosses) returns (MsgInsertLossesResponse);

  rpc AddStake(MsgAddStake) returns (MsgAddStakeResponse);

  rpc StartRemoveStake(MsgStartRemoveStake) returns (MsgStartRemoveStakeResponse);

  rpc ConfirmRemoveStake(MsgConfirmRemoveStake) returns (MsgConfirmRemoveStakeResponse);

  rpc StartRemoveAllStake(MsgStartRemoveAllStake) returns (MsgStartRemoveAllStakeResponse);

  rpc DelegateStake(MsgDelegateStake) returns (MsgDelegateStakeResponse);

  rpc StartRemoveDelegatedStake(MsgStartRemoveDelegatedStake) returns (MsgStartRemoveDelegatedStakeResponse);

  rpc RequestInference(MsgRequestInference) returns (MsgRequestInferenceResponse);

  rpc AddToWhitelistAdmin(MsgAddToWhitelistAdmin) returns (MsgAddToWhitelistAdminResponse);

  rpc RemoveFromWhitelistAdmin(MsgRemoveFromWhitelistAdmin) returns (MsgRemoveFromWhitelistAdminResponse);

  rpc AddToTopicCreationWhitelist(MsgAddToTopicCreationWhitelist) returns (MsgAddToTopicCreationWhitelistResponse);

  rpc RemoveFromTopicCreationWhitelist(MsgRemoveFromTopicCreationWhitelist)
      returns (MsgRemoveFromTopicCreationWhitelistResponse);

  rpc AddToReputerWhitelist(MsgAddToReputerWhitelist) returns (MsgAddToReputerWhitelistResponse);

  rpc RemoveFromReputerWhitelist(MsgRemoveFromReputerWhitelist) returns (MsgRemoveFromReputerWhitelistResponse);
}

// Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
// and including google themselves
// https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
// we instead use a repeated field with a single element to represent an
// optional field and if the repeated field is empty, it is considered to be the
// same as if the field was not set
message OptionalParams {
  repeated string version = 1;        // version of the protocol should be in lockstep with github release tag version
  repeated int64 reward_cadence = 2;  // length of an "epoch" for rewards payouts in blocks
  repeated string min_topic_unmet_demand = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // total unmet demand for a topic < this => don't run inference solicatation or weight-adjustment
  repeated uint64 max_topics_per_block = 4;  // max number of topics to run cadence for per block
  repeated string min_request_unmet_demand = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // delete requests if they have below this demand remaining
  repeated string max_missing_inference_percent =
      6;  // if worker has this percentage of inferences missing penalize them
  repeated string required_minimum_stake = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                             // minimum amount of tokens to send to stake as a reputer or worker
  repeated int64 remove_stake_delay_window = 8;  // how long to wait before allowed to remove stake
  repeated int64 min_epoch_length =
      9;  // fastest allowable topic epoch => also fastest allowed cadence of a repeating inference request
  repeated int64 max_inference_request_validity = 10;  // longest time a subscription is allowed to be valid
  repeated int64 max_request_cadence = 11;  // slowest/largest amount of time subscription can take between inferences
  repeated string percent_rewards_reputers_workers =
      12;  // rewards (tx fees + inflation) paid to workers/reputers. Validators get the rest
  repeated uint64 max_workers_per_topic_request =
      13;  // max number of workers whose inference will be used and compensated per request
  repeated uint64 max_reputers_per_topic_request =
      14;                        // max number of reputers to solicit losses from per loss request
  repeated string epsilon = 15;  // small number to prevent division by zero
  repeated string p_inference_synthesis =
      16;  // fiducial value of exponent used in gradient function applied in Inference Synthesis
  repeated string topic_reward_stake_importance = 23;  // The exponent μ represents the importance of stake in the
                                                       // reward of a topic and has a fiduciary value of 0.5
  repeated string topic_reward_fee_revenue_importance =
      24;  // The exponent ν represents the importance of fee revenue in the
           // reward of a topic and has a fiduciary value of 0.5
}

/// PARAMS

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  OptionalParams params = 2;
}

message MsgUpdateParamsResponse {}

/// TOPICS

message MsgCreateNewTopic {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message sender.
  string creator = 1;

  string metadata = 2;
  string loss_logic = 3;
  string loss_method = 4;
  string inference_logic = 5;
  string inference_method = 6;
  int64 epoch_length = 7;
  int64 ground_truth_lag = 8;
  string default_arg = 9;
  uint64 pnorm = 10;
  string alpha_regret = 11;
  string preward_reputer = 12;
  string preward_inference = 13;
  string preward_forecast = 14;
  string f_tolerance = 15;
}

message MsgCreateNewTopicResponse {
  uint64 topic_id = 1;
}

/// Worker and Reputer Interface

// MsgInsertLosses sets the losses from a given reputer
message MsgInsertLosses {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  int64 block_height = 2;
  repeated ReputerValueBundle reputer_value_bundles = 3;
}

message MsgInsertLossesResponse {}

message MsgInsertInferences {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  int64 block_height = 2;
  repeated Inference inferences = 3;
}

message MsgInsertInferencesResponse {}

message MsgInsertForecasts {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;

  int64 block_height = 2;
  repeated Forecast forecasts = 3;
}

message MsgInsertForecastsResponse {}

///  Inference Node Registration

message MsgRegister {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string lib_p2p_key = 2;
  string multi_address = 3;
  repeated uint64 topic_ids = 4;
  string initial_stake = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string owner = 6;
  bool is_reputer = 7;
}

message MsgRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MsgAddNewRegistration {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  string lib_p2p_key = 2;
  string multi_address = 3;
  uint64 topic_id = 4;
  string owner = 5;
  bool is_reputer = 6;
}

message MsgAddNewRegistrationResponse {
  bool success = 1;
  string message = 2;
}

message MsgRemoveRegistration {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1;
  uint64 topic_id = 2;
  bool is_reputer = 3;
}

message MsgRemoveRegistrationResponse {
  bool success = 1;
  string message = 2;
}

///  Staking

message MsgAddStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string stake_target = 3;
}

message MsgAddStakeResponse {}

message MsgStartRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
}

message MsgStartRemoveStakeResponse {}

message MsgConfirmRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveStakeResponse {}

message MsgStartRemoveAllStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgStartRemoveAllStakeResponse {}

message MsgDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string reputer = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgDelegateStakeResponse {}

message MsgStartRemoveDelegatedStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  repeated DelegatedStakePlacement placements_to_remove = 2;
}

message MsgStartRemoveDelegatedStakeResponse {}

message MsgConfirmDelegatedRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveDelegatedStakeResponse {}

message MsgRequestInference {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  repeated RequestInferenceListItem requests = 2;
}

message RequestInferenceListItem {
  uint64 nonce = 1;
  uint64 topic_id = 2;
  int64 cadence = 3;  // blocks between inferences, zero means oneshot inference
  string max_price_per_inference = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // the maximum price per inference that alice is willing to pay
  string bid_amount = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // how many funds to send from alice with this Inference Request
  int64 block_valid_until = 6;
  bytes extra_data = 7;
}

message MsgRequestInferenceResponse {}

///  Whitelist

message MsgAddToWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToWhitelistAdminResponse {}

message MsgRemoveFromWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromWhitelistAdminResponse {}

message MsgAddToTopicCreationWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToTopicCreationWhitelistResponse {}

message MsgRemoveFromTopicCreationWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromTopicCreationWhitelistResponse {}

message MsgAddToReputerWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToReputerWhitelistResponse {}

message MsgRemoveFromReputerWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromReputerWhitelistResponse {}

/// Topic Management

message MsgReactivateTopic {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
}

message MsgReactivateTopicResponse {
  bool success = 1;
}
