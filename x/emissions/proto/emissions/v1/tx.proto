syntax = "proto3";
package emissions.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "emissions/v1/types.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc InsertBulkWorkerPayload(MsgInsertBulkWorkerPayload) returns (MsgInsertBulkWorkerPayloadResponse);

  rpc CreateNewTopic(MsgCreateNewTopic) returns (MsgCreateNewTopicResponse);

  rpc ReactivateTopic(MsgReactivateTopic) returns (MsgReactivateTopicResponse);

  rpc Register(MsgRegister) returns (MsgRegisterResponse);

  rpc RemoveRegistration(MsgRemoveRegistration) returns (MsgRemoveRegistrationResponse);

  rpc InsertBulkReputerPayload(MsgInsertBulkReputerPayload) returns (MsgInsertBulkReputerPayloadResponse);

  rpc AddStake(MsgAddStake) returns (MsgAddStakeResponse);

  rpc StartRemoveStake(MsgStartRemoveStake) returns (MsgStartRemoveStakeResponse);

  rpc ConfirmRemoveStake(MsgConfirmRemoveStake) returns (MsgConfirmRemoveStakeResponse);

  rpc DelegateStake(MsgDelegateStake) returns (MsgDelegateStakeResponse);

  rpc StartRemoveDelegatedStake(MsgStartRemoveDelegatedStake) returns (MsgStartRemoveDelegatedStakeResponse);

  rpc RequestInference(MsgRequestInference) returns (MsgRequestInferenceResponse);

  rpc AddToWhitelistAdmin(MsgAddToWhitelistAdmin) returns (MsgAddToWhitelistAdminResponse);

  rpc RemoveFromWhitelistAdmin(MsgRemoveFromWhitelistAdmin) returns (MsgRemoveFromWhitelistAdminResponse);

  rpc AddToTopicCreationWhitelist(MsgAddToTopicCreationWhitelist) returns (MsgAddToTopicCreationWhitelistResponse);

  rpc RemoveFromTopicCreationWhitelist(MsgRemoveFromTopicCreationWhitelist)
      returns (MsgRemoveFromTopicCreationWhitelistResponse);

  rpc AddToReputerWhitelist(MsgAddToReputerWhitelist) returns (MsgAddToReputerWhitelistResponse);

  rpc RemoveFromReputerWhitelist(MsgRemoveFromReputerWhitelist) returns (MsgRemoveFromReputerWhitelistResponse);
}

/// PARAMS

// Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
// and including google themselves
// https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
// we instead use a repeated field with a single element to represent an
// optional field and if the repeated field is empty, it is considered to be the
// same as if the field was not set
message OptionalParams {
  repeated string version = 1;
  repeated int64 reward_cadence = 2;
  repeated string min_topic_unmet_demand = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated uint64 max_topics_per_block = 4;
  repeated string min_request_unmet_demand = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated string max_missing_inference_percent = 6
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string required_minimum_stake = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated int64 remove_stake_delay_window = 8;
  repeated int64 min_epoch_length = 9;
  repeated int64 max_inference_request_validity = 10;
  repeated int64 max_request_cadence = 11;
  repeated string sharpness = 12
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string beta_entropy = 13
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string learning_rate = 14
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string max_gradient_threshold = 15
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string min_stake_fraction = 16
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_workers_per_topic_request = 17;
  repeated uint64 max_reputers_per_topic_request = 18;
  repeated string epsilon = 19
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string p_inference_synthesis = 20
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string p_reward_spread = 21
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string alpha_regret = 22
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_unfulfilled_worker_requests = 23;
  repeated uint64 max_unfulfilled_reputer_requests = 24;
  repeated uint64 number_expected_inference_sybils = 25;
  repeated uint64 sybil_tax_exponent = 26;
  repeated string topic_reward_stake_importance = 27
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string topic_reward_fee_revenue_importance = 28
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string topic_reward_alpha = 29
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string task_reward_alpha = 30
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string validators_vs_allora_percent_reward = 31
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_samples_to_scale_scores = 32;
  repeated uint64 max_top_workers_to_reward = 33;
  repeated uint64 max_top_reputers_to_reward = 34;
  repeated string create_topic_fee = 35 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated string sigmoid_a = 36
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string sigmoid_b = 37
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 gradient_descent_max_iters = 38;
  repeated int64 max_retries_to_fulfil_nonces_worker = 39;
  repeated int64 max_retries_to_fulfil_nonces_reputer = 40;
  repeated string registration_fee = 41 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  OptionalParams params = 2;
}

message MsgUpdateParamsResponse {}

/// TOPICS

message MsgCreateNewTopic {
  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message sender.
  string creator = 1;

  string metadata = 2;
  string loss_logic = 3;
  string loss_method = 4;
  string inference_logic = 5;
  string inference_method = 6;
  int64 epoch_length = 7;
  int64 ground_truth_lag = 8;
  string default_arg = 9;
  uint64 pnorm = 10;
  string alpha_regret = 11
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_reputer = 12
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_inference = 13
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_forecast = 14
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string f_tolerance = 15
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message MsgCreateNewTopicResponse {
  uint64 topic_id = 1;
}

/// Worker and Reputer Interface

message MsgInsertBulkReputerPayload {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  ReputerRequestNonce reputer_request_nonce = 2;
  uint64 topic_id = 3;
  repeated ReputerValueBundle reputer_value_bundles = 4;
}

message MsgInsertBulkReputerPayloadResponse {}

message MsgInsertBulkWorkerPayload {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  Nonce nonce = 2;
  uint64 topic_id = 3;
  repeated WorkerDataBundle worker_data_bundles = 4;
}

message MsgInsertBulkWorkerPayloadResponse {}

///  Inference Node Registration

message MsgRegister {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string lib_p2p_key = 2;
  string multi_address = 3;
  uint64 topic_id = 4;
  string initial_stake = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string owner = 6;
  bool is_reputer = 7;
}

message MsgRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MsgRemoveRegistration {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
  bool is_reputer = 3;
}

message MsgRemoveRegistrationResponse {
  bool success = 1;
  string message = 2;
}

///  Staking

message MsgAddStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint64 topic_id = 3;
}

message MsgAddStakeResponse {}

message MsgStartRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  repeated StakePlacement placements_remove = 2;
}

message MsgStartRemoveStakeResponse {}

message MsgConfirmRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveStakeResponse {}

message MsgDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string reputer = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgDelegateStakeResponse {}

message MsgStartRemoveDelegatedStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  repeated DelegatedStakePlacement placements_to_remove = 2;
}

message MsgStartRemoveDelegatedStakeResponse {}

message MsgConfirmDelegatedRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
}

message MsgConfirmRemoveDelegatedStakeResponse {}

message MsgRequestInference {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  repeated RequestInferenceListItem requests = 2;
}

message RequestInferenceListItem {
  uint64 nonce = 1;
  uint64 topic_id = 2;
  int64 cadence = 3;  // blocks between inferences, zero means oneshot inference
  string max_price_per_inference = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // the maximum price per inference that alice is willing to pay
  string bid_amount = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // how many funds to send from alice with this Inference Request
  int64 block_valid_until = 6;
  bytes extra_data = 7;
}

message MsgRequestInferenceResponse {}

///  Whitelist

message MsgAddToWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToWhitelistAdminResponse {}

message MsgRemoveFromWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromWhitelistAdminResponse {}

message MsgAddToTopicCreationWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToTopicCreationWhitelistResponse {}

message MsgRemoveFromTopicCreationWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromTopicCreationWhitelistResponse {}

message MsgAddToReputerWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToReputerWhitelistResponse {}

message MsgRemoveFromReputerWhitelist {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromReputerWhitelistResponse {}

/// Topic Management

message MsgReactivateTopic {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
}

message MsgReactivateTopicResponse {
  bool success = 1;
}