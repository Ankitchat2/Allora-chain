syntax = "proto3";
package emissions.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Params defines the parameters of the module.
message Params {
  string version = 1;        // version of the protocol should be in lockstep with github release tag version
  int64 reward_cadence = 2;  // length of an "epoch" for rewards payouts in blocks
  string min_topic_unmet_demand = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // total unmet demand for a topic < this => don't run inference solicatation or weight-adjustment
  uint64 max_topics_per_block = 4;  // max number of topics to run cadence for per block
  string min_request_unmet_demand = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // delete requests if they have below this demand remaining
  string max_missing_inference_percent = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // if a worker has this percentage of inferences missing, penalize them
  string required_minimum_stake = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                     // minimum amount of tokens to send to stake as a reputer or worker
  uint64 remove_stake_delay_window = 8;  // how long to wait before allowed to remove stake
  uint64 min_epoch_length =
      9;  // fastest allowable topic epoch => also fastest allowed cadence of a repeating inference request
  uint64 max_inference_request_validity = 10;  // longest time a subscription of inferences is allowed to be valid
  uint64 max_request_cadence = 11;  // slowest (largest) amount of time a subscription can take between inferences
  string percent_rewards_reputers_workers = 12 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                  // rewards (tx fees + inflation) paid to workers/reputers. Validators get the rest
  double sharpness = 13;              // controls going from stake-weighted consensus at low values to majority vote of
                                      // above-average stake holders at high values
  float beta_entropy = 14;            // controls resilience of reward payouts against copycat workers
  float dcoef_abs = 15;               // delta for numerical differentiation
  double learning_rate = 16;          // speed of gradient descent
  float max_gradient_threshold = 17;  // gradient descent stops when gradient falls below this
  float min_stake_fraction =
      18;  // minimum fraction of stake that should be listened to when setting consensus listening coefficients
  uint64 max_workers_per_topic_request =
      19;  // max number of workers whose inference will be used and compensated per request
  uint64 max_reputers_per_topic_request = 20;  // max number of reputers to solicit losses from per loss request
}

///
/// TOPICS
///

message Topic {
  uint64 id = 1;
  string creator = 2;
  string metadata = 3;
  string loss_logic = 4;
  string loss_method = 5;
  string inference_logic = 6;
  string inference_method = 7;
  uint64 epoch_last_ended = 8;
  uint64 epoch_length = 9;
  uint64 ground_truth_lag = 10;
  bool active = 11;
  string default_arg = 12;
  uint64 pnorm = 13;
  float alpha_regret = 14;
  float preward_reputer = 15;
  float preward_inference = 16;
  float preward_forecast = 17;
  float f_tolerance = 18;
  uint64 subsidy = 19;
  float subsidized_reward_epochs = 20;
  float f_treasury = 21;
}

message TopicList {
  repeated Topic topics = 1;
}

///
/// REPUTERS
///

message WorkerAttributedLoss {
  option (gogoproto.equal) = true;

  string worker = 1;
  string value = 2 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  bytes extra_data = 3;
}

// eq13 in the litepaper
message LossBundle {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string reputer = 2;
  bytes extra_data = 3;
  // L_im
  string combined_loss = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // L_ijm
  repeated WorkerAttributedLoss inferer_losses = 5;
  // L_ikm
  repeated WorkerAttributedLoss forecaster_losses = 6;
  // L^-_im
  string naive_loss = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // L^-_lim
  repeated WorkerAttributedLoss one_out_losses = 8;
  // L^+_kim
  repeated WorkerAttributedLoss one_in_naive_losses = 9;
}

message LossBundles {
  repeated LossBundle loss_bundles = 1;
}

///
/// WORKERS
///

message Inference {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string worker = 2;
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  bytes extra_data = 4;
  string proof = 5;
}

message Inferences {
  repeated Inference inferences = 1;
}

message ForecastElement {
  option (gogoproto.equal) = true;

  string inferer = 2;
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  bytes extra_data = 4;
  string proof = 5;
}

message Forecast {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string forecaster = 2;
  repeated ForecastElement forecast_elements = 3;
}

message Forecasts {
  repeated Forecast forecasts = 1;
}

message OffchainNode {
  string lib_p2p_key = 1;    // LibP2P key of the node
  string multi_address = 2;  // Network address for accessing the node
  string owner = 3;
  string node_address = 4;
  string node_id = 5;
}

message OffchainNodes {
  repeated Inference offchain_node = 1;
}

message InferenceSetForScoring {
  uint64 topic_id = 1;
  uint64 timestamp = 2;
  Inferences inferences = 3;
}

message ForecastSetForScoring {
  uint64 topic_id = 1;
  uint64 timestamp = 2;
  Forecasts forecasts = 3;
}

///
/// STAKE
///

message StakePlacement {
  uint64 topic_id = 1;
  string reputer = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message StakeRemoval {
  uint64 timestamp_removal_started = 1;
  repeated StakePlacement placements = 2;
}

message DelegatedStakePlacement {
  uint64 topic_id = 1;
  string reputer = 2;
  string delegator = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message DelegatedStakeRemoval {
  uint64 timestamp_removal_started = 1;
  repeated DelegatedStakePlacement placements = 2;
}

///
/// INFERENCE REQUEST
///

// num_inference_possible = bid_amount / max_price_per_inference,
// length of time this inference repeats for =  num_inference_possible * cadence
message InferenceRequest {
  string sender = 1;
  uint64 nonce = 2;
  uint64 topic_id = 3;
  uint64 cadence = 4;  // time in seconds between inferences, zero means oneshot inference
  string max_price_per_inference = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // the maximum price per inference that alice is willing to pay
  string bid_amount = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                        // how many funds to send from alice with this Inference Request
  uint64 last_checked = 7;  // the last time the inference was checked and was possibly drawn from
  uint64 timestamp_valid_until = 8;
  bytes extra_data = 9;
}
