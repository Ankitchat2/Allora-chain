syntax = "proto3";
package emissions.v1;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";

// Params defines the parameters of the module.
message Params {
  string version = 1;        // version of the protocol should be in lockstep with github release tag version
  int64 reward_cadence = 2;  // length of an "epoch" for rewards payouts in blocks
  string min_topic_unmet_demand = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // total unmet demand for a topic < this => don't run inference solicatation or weight-adjustment
  uint64 max_topics_per_block = 4;  // max number of topics to run cadence for per block
  string min_request_unmet_demand = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // delete requests if they have below this demand remaining
  string max_missing_inference_percent = 6 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // if a worker has this percentage of inferences missing, penalize them
  string required_minimum_stake = 7 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                                    // minimum amount of tokens to send to stake as a reputer or worker
  int64 remove_stake_delay_window = 8;  // how long to wait before allowed to remove stake
  int64 min_epoch_length = 9;           // fastest allowable topic epoch and cadence of a repeating inference request
  int64 max_inference_request_validity = 10;  // longest time a subscription of inferences is allowed to be valid
  int64 max_request_cadence = 11;  // slowest (largest) amount of time a subscription can take between inferences
  string sharpness = 12 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // controls going from stake-weighted consensus at low values to majority vote of above-average stake holders at
      // high values
  string beta_entropy = 13 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // controls resilience of reward payouts against copycat workers
  string learning_rate = 14 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // speed of gradient descent
  string max_gradient_threshold = 15 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // gradient descent stops when gradient falls below this
  string min_stake_fraction = 16 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // minimum fraction of stake to listen to when setting consensus listening coefficients
  uint64 max_workers_per_topic_request = 17;   // max num workers whose inference are used and compensated per request
  uint64 max_reputers_per_topic_request = 18;  // max num reputers to solicit losses from per loss request
  string epsilon = 19 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // small number to prevent division by zero
  string p_inference_synthesis = 20 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // fiducial value of exponent for Inference Synthesis gradient function
  string p_reward_spread = 21 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // fiducial value = 1; Exponent for W_i total reward allocated to reputers per timestep
  string alpha_regret = 22 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // how much to weight the most recent log-loss differences in regret EMA update
  uint64 max_unfulfilled_worker_requests = 23;   // max num worker request nonces to keep track of per topic
  uint64 max_unfulfilled_reputer_requests = 24;  // max num reputer request nonces to keep track of per topic
  uint64 number_expected_inference_sybils = 25;  // global number for calculation tax of worker reward
  uint64 sybil_tax_exponent = 26;                // global parameter for calculation tax of worker reward
  string topic_reward_stake_importance = 27 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // The exponent μ represents the importance of stake in the reward of a topic and has a fiducial value of 0.5
  string topic_reward_fee_revenue_importance = 28 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // The exponent ν represents the importance of fee revenue in the reward of a topic and has a fiducial value of
      // 0.5
  string topic_reward_alpha = 29 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // global exponential moving average parameter. Fiducial value of 0.9375 on a monthly timescale, 0.5 for weekly
      // updates
  string task_reward_alpha = 30 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // global exponential moving average parameter. Fiducial value of 0.1 used to calculate ~U_ij, ~V_ik, ~W_im
  string validators_vs_allora_percent_reward = 31 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // percent of total supply rewarded to cosmos network validators, rest goes to allora reputers workers etc
  uint64 max_samples_to_scale_scores = 32;  // number of scores to use for standard deviation calculation
  // max this many inferences from unique workers and forecasts thereof are accepted per payload
  uint64 max_top_workers_to_reward = 33;   // max number of top workers by score to reward
  uint64 max_top_reputers_to_reward = 34;  // max number of top reputers by score to reward
  string create_topic_fee = 35 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // topic registration fee
  string sigmoid_a = 36 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];  // parameter a for sigmoid function, fiducial value = 8
  string sigmoid_b = 37 [
    (gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec",
    (gogoproto.nullable) = false
  ];                                                // parameter b for sigmoid function, fiducial value = 0.5
  uint64 gradient_descent_max_iters = 38;           // max number of gradient descent iterations
  int64 max_retries_to_fulfil_nonces_worker = 39;   // max number of retries to unfulfilled nonces (worker)
  int64 max_retries_to_fulfil_nonces_reputer = 40;  // max number of retries to unfulfilled nonces (reputer)
  uint64 topic_page_limit = 41;
  uint64 max_topic_pages = 42;
  uint64 request_page_limit = 43;
  uint64 max_request_pages = 44;
  string registration_fee = 45 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // registration fee for workers and reputers
}

/// TOPICS

message Topic {
  uint64 id = 1;
  string creator = 2;
  string metadata = 3;
  string loss_logic = 4;
  string loss_method = 5;
  string inference_logic = 6;
  string inference_method = 7;
  int64 epoch_last_ended = 8;
  int64 epoch_length = 9;
  int64 ground_truth_lag = 10;
  string default_arg = 11;
  uint64 pnorm = 12;
  string alpha_regret = 13
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_reputer = 14
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_inference = 15
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string preward_forecast = 16
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string f_tolerance = 17
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message TopicList {
  repeated Topic topics = 1;
}

/// REPUTERS

message WorkerAttributedValue {
  option (gogoproto.equal) = true;

  string worker = 1;  // worker who created the value
  string value = 2
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message WithheldWorkerAttributedValue {
  option (gogoproto.equal) = true;

  string worker = 1;
  string value = 2
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

// These losses and inferences are calculated per reputer or by the network
// The `m`s in the comments below exist for when they're made by reputers,
// but they may be absent implying that they were made by the network
message ValueBundle {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  ReputerRequestNonce reputer_request_nonce = 2;
  string reputer = 3;
  bytes extra_data = 4;
  // R_im || log10 L_im || I_i
  string combined_value = 5
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  // R_ijm || log10 L_ijm || I_ij
  repeated WorkerAttributedValue inferer_values = 6;
  // R_ikm || log10 L_ikm || I_ik
  repeated WorkerAttributedValue forecaster_values = 7;
  // R^-_im  || log10 L^-_im || I^-_i
  string naive_value = 8
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  // R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
  // Note: forecast-implied inferences are recomputed for each left-out inference
  repeated WithheldWorkerAttributedValue one_out_inferer_values = 9;
  // R^-_ilm || log10 L^-_ilm || I^-_il where l = any k
  repeated WithheldWorkerAttributedValue one_out_forecaster_values = 10;
  // R^+_ikm || log10 L^+_ikm || I^+_ik
  // aka one_in_forecaster_values because equivalent to using only one forecast-implied inference
  repeated WorkerAttributedValue one_in_forecaster_values = 11;
}

// For when the bundle is computed on a per-reputer basis (ie.. if there is an index `m` in the above)
message ReputerValueBundle {
  option (gogoproto.equal) = true;

  ValueBundle value_bundle = 1;
  bytes signature = 2;
  string pubkey = 3;
}

message ReputerValueBundles {
  repeated ReputerValueBundle reputer_value_bundles = 1;
}

/// WORKERS

message TimestampedValue {
  option (gogoproto.equal) = true;

  int64 block_height = 1;  // height at which value calculated or received
  string value = 2
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message Inference {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  int64 block_height = 2;
  string inferer = 3;
  string value = 4
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bytes extra_data = 5;
  string proof = 6;
}

message Inferences {
  repeated Inference inferences = 1;
}

message ForecastElement {
  option (gogoproto.equal) = true;

  string inferer = 2;
  string value = 3
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message Forecast {
  option (gogoproto.equal) = true;
  uint64 topic_id = 1;
  int64 block_height = 2;
  string forecaster = 3;
  repeated ForecastElement forecast_elements = 4;
  bytes extra_data = 5;
}

message Forecasts {
  repeated Forecast forecasts = 1;
}

message InferenceForecastBundle {
  option (gogoproto.equal) = true;
  Inference inference = 1;
  Forecast forecast = 2;
}

message WorkerDataBundle {
  option (gogoproto.equal) = true;
  string worker = 1;
  InferenceForecastBundle inferenceForecastsBundle = 2;
  bytes inferencesForecastsBundleSignature = 3;
  string pubkey = 4;
}

message WorkerDataBundles {  // This will be in the incoming message, sent by leader
  repeated WorkerDataBundle worker_data_bundles = 1;
}

message OffchainNode {
  string lib_p2p_key = 1;    // LibP2P key of the node
  string multi_address = 2;  // Network address for accessing the node
  string owner = 3;
  string node_address = 4;
  string node_id = 5;
}

/// STAKE

message StakePlacement {
  uint64 topic_id = 1;
  string reputer = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message StakeRemoval {
  int64 block_removal_started = 1;
  repeated StakePlacement placements = 2;
}

message DelegatedStakePlacement {
  uint64 topic_id = 1;
  string reputer = 2;
  string delegator = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message DelegatedStakeRemoval {
  int64 block_removal_started = 1;
  repeated DelegatedStakePlacement placements = 2;
}

/// SCORES

message Score {
  uint64 topic_id = 1;
  int64 block_number = 2;
  string address = 3;
  string score = 4
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message Scores {
  repeated Score scores = 1;
}

/// AVERAGE REWARD

message AverageWorkerReward {
  uint32 count = 1;
  string value = 2
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

/// LISTENING COEFFICIENTS
message ListeningCoefficient {
  string coefficient = 3
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

/// INFERENCE REQUEST

// num_inference_possible = bid_amount / max_price_per_inference,
// length of time this inference repeats for =  num_inference_possible * cadence
message InferenceRequest {
  string sender = 1;
  uint64 nonce = 2;
  uint64 topic_id = 3;
  int64 cadence = 4;  // blocks between inferences, zero means oneshot inference
  string max_price_per_inference = 5 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // the maximum price per inference that alice is willing to pay
  string bid_amount = 6 [
    (cosmos_proto.scalar) = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];                             // how many funds to send from alice with this Inference Request
  int64 block_last_checked = 7;  // last block the inference was checked and was possibly drawn from
  int64 block_valid_until = 8;
  bytes extra_data = 9;
}

/// NONCES for Worker and Reputer Requests

message Nonce {
  option (gogoproto.equal) = true;
  int64 block_height = 1;  // block height of the request
}

message Nonces {
  repeated Nonce nonces = 1;
}

message ReputerRequestNonce {
  option (gogoproto.equal) = true;
  // associated with the reputer request
  Nonce reputer_nonce = 1;
  // the reputers should respond to the reputer request with losses for work found at this worker nonce
  Nonce worker_nonce = 2;
}

message ReputerRequestNonces {
  repeated ReputerRequestNonce nonces = 1;
}

// stores the amount of fees collected by a topic in the last reward epoch
message TopicFeeRevenue {
  uint64 epoch = 1;
  string revenue = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message PreviousTopicWeight {
  uint64 epoch = 1;
  string weight = 2
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}
