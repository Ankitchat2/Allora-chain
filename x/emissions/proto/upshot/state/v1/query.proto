syntax = "proto3";
package upshot.state.v1;

option go_package = "github.com/upshot-tech/protocol-state-machine-module";

import "cosmos/base/query/v1beta1/pagination.proto";
import "upshot/state/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Query {
  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/upshot/state/v1/params";
  }

  rpc GetLastRewardsUpdate(QueryLastRewardsUpdateRequest) returns (QueryLastRewardsUpdateResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/last_rewards_update";
  }

  rpc GetAccumulatedEpochRewards(QueryAccumulatedEpochRewardsRequest) returns (QueryAccumulatedEpochRewardsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/accumulated_epoch_rewards";
  }

  rpc GetNextTopicId(QueryNextTopicIdRequest) returns (QueryNextTopicIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/next_topic_id";
  }

  rpc GetTopic(QueryTopicRequest) returns (QueryTopicResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/topic/{topicId}";
  }

  rpc GetWeight(QueryWeightRequest) returns (QueryWeightResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/weights/{topicId}/{reputer}/{worker}";
  }

  rpc GetInference(QueryInferenceRequest) returns (QueryInferenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/inferences/{topicId}/{worker}";
  }

  rpc GetInferencesToScore(QueryInferencesToScoreRequest) returns (QueryInferencesToScoreResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/inferences/{topicId}";
  }

  rpc GetTotalStake(QueryTotalStakeRequest) returns (QueryTotalStakeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
      "/upshot/state/v1/total_stake";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// returns the last time the rewards inflation calculation ran
message QueryLastRewardsUpdateRequest {}

// returns the last time the rewards inflation calculation ran
// last_rewards_update is an int64 because it is a block number
message QueryLastRewardsUpdateResponse {
  int64 last_rewards_update = 1;
}

// Total Stake returns the total amount of stake in the system
message QueryTotalStakeRequest {
}

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
message QueryTotalStakeResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

// Query the amount of rewards accumulated during this epoch
message QueryAccumulatedEpochRewardsRequest {}

message QueryAccumulatedEpochRewardsResponse {
  uint64 amount = 1;
}

message QueryNextTopicIdRequest {
}

message QueryNextTopicIdResponse {
  uint64 nextTopicId = 1;
}

message QueryTopicRequest {
  uint64 topicId = 1;
}

message QueryTopicResponse {
  Topic topic = 1;
}

// Returns the weight assigned by a reputer onto a worker for a given topic
message QueryWeightRequest {
  uint64 topicId = 1;
  string reputer = 2;
  string worker = 3;
}

// Returns the weight assigned by a reputer onto a worker for a given topic
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
message QueryWeightResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

// Returns the latest inference on a topic from a worker
message QueryInferenceRequest {
  uint64 topicId = 1;
  string worker = 2;
}

// Returns the latest inference on a topic from a worker
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
message QueryInferenceResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryInferencesToScoreRequest {
  uint64 topicId = 1;
}

message QueryInferencesToScoreResponse {
  repeated InferenceSetForScoring inferences = 1;
}