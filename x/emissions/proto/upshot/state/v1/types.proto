syntax = "proto3";
package upshot.state.v1;

option go_package = "github.com/upshot-tech/protocol-state-machine-module";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
// import "google/protobuf/timestamp.proto";

// Params defines the parameters of the module.
message Params {
  string version = 1;
}

// GenesisState is the state that must be provided at genesis.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message Topic {
  uint64 id = 1;
  string metadata = 2;
  string weight_logic = 3;
  string weight_method = 4;
  uint64 weight_cadence = 5;
  uint64 weight_last_ran = 6;
  string inference_logic = 7;
  string inference_method = 8;
  uint64 inference_cadence = 9;
  uint64 inference_last_ran = 10;
  bool active = 11;
}


message Weight {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string reputer = 2;
  string worker = 3;  
  string weight = 4 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

message Weights {
  repeated Weight weights = 1;
}

message Inference {
  option (gogoproto.equal) = true;

  uint64 topic_id = 1;
  string worker = 2;
  string value = 3 [
    (cosmos_proto.scalar)  = "cosmos.Uint",
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  bytes extra_data = 4;
}

message Inferences {
  repeated Inference inferences = 1;
}

message InferenceNode {
  uint64 topic_id = 1;          // What topic the node belongs to
  string lib_p2p_key = 2;       // LibP2P key of the node
  string network_address = 3;   // Network address for accessing the node
}

message InferenceNodes {
  repeated Inference inference_nodes = 1;
}

message InferenceSetForScoring {
  uint64 topic_id = 1;
  uint64 timestamp = 2;
  Inferences inferences = 3;
}