// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/state/v1/query.proto

package emissions

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// returns the last time the rewards inflation calculation ran
type QueryLastRewardsUpdateRequest struct {
}

func (m *QueryLastRewardsUpdateRequest) Reset()         { *m = QueryLastRewardsUpdateRequest{} }
func (m *QueryLastRewardsUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastRewardsUpdateRequest) ProtoMessage()    {}
func (*QueryLastRewardsUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{2}
}
func (m *QueryLastRewardsUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastRewardsUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastRewardsUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastRewardsUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastRewardsUpdateRequest.Merge(m, src)
}
func (m *QueryLastRewardsUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastRewardsUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastRewardsUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastRewardsUpdateRequest proto.InternalMessageInfo

// returns the last time the rewards inflation calculation ran
// last_rewards_update is an int64 because it is a block number
type QueryLastRewardsUpdateResponse struct {
	LastRewardsUpdate int64 `protobuf:"varint,1,opt,name=last_rewards_update,json=lastRewardsUpdate,proto3" json:"last_rewards_update,omitempty"`
}

func (m *QueryLastRewardsUpdateResponse) Reset()         { *m = QueryLastRewardsUpdateResponse{} }
func (m *QueryLastRewardsUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastRewardsUpdateResponse) ProtoMessage()    {}
func (*QueryLastRewardsUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{3}
}
func (m *QueryLastRewardsUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastRewardsUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastRewardsUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastRewardsUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastRewardsUpdateResponse.Merge(m, src)
}
func (m *QueryLastRewardsUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastRewardsUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastRewardsUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastRewardsUpdateResponse proto.InternalMessageInfo

func (m *QueryLastRewardsUpdateResponse) GetLastRewardsUpdate() int64 {
	if m != nil {
		return m.LastRewardsUpdate
	}
	return 0
}

// Total Stake returns the total amount of stake in the system
type QueryTotalStakeRequest struct {
}

func (m *QueryTotalStakeRequest) Reset()         { *m = QueryTotalStakeRequest{} }
func (m *QueryTotalStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeRequest) ProtoMessage()    {}
func (*QueryTotalStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{4}
}
func (m *QueryTotalStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeRequest.Merge(m, src)
}
func (m *QueryTotalStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeRequest proto.InternalMessageInfo

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryTotalStakeResponse struct {
	Amount cosmossdk_io_math.Uint `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *QueryTotalStakeResponse) Reset()         { *m = QueryTotalStakeResponse{} }
func (m *QueryTotalStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeResponse) ProtoMessage()    {}
func (*QueryTotalStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{5}
}
func (m *QueryTotalStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeResponse.Merge(m, src)
}
func (m *QueryTotalStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeResponse proto.InternalMessageInfo

type QueryAccountStakeListRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountStakeListRequest) Reset()         { *m = QueryAccountStakeListRequest{} }
func (m *QueryAccountStakeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountStakeListRequest) ProtoMessage()    {}
func (*QueryAccountStakeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{6}
}
func (m *QueryAccountStakeListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountStakeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountStakeListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountStakeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountStakeListRequest.Merge(m, src)
}
func (m *QueryAccountStakeListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountStakeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountStakeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountStakeListRequest proto.InternalMessageInfo

func (m *QueryAccountStakeListRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAccountStakeListResponse struct {
	Stakes []*StakeInfo `protobuf:"bytes,1,rep,name=stakes,proto3" json:"stakes,omitempty"`
}

func (m *QueryAccountStakeListResponse) Reset()         { *m = QueryAccountStakeListResponse{} }
func (m *QueryAccountStakeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountStakeListResponse) ProtoMessage()    {}
func (*QueryAccountStakeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{7}
}
func (m *QueryAccountStakeListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountStakeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountStakeListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountStakeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountStakeListResponse.Merge(m, src)
}
func (m *QueryAccountStakeListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountStakeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountStakeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountStakeListResponse proto.InternalMessageInfo

func (m *QueryAccountStakeListResponse) GetStakes() []*StakeInfo {
	if m != nil {
		return m.Stakes
	}
	return nil
}

// Query the amount of rewards accumulated during this epoch
type QueryAccumulatedEpochRewardsRequest struct {
}

func (m *QueryAccumulatedEpochRewardsRequest) Reset()         { *m = QueryAccumulatedEpochRewardsRequest{} }
func (m *QueryAccumulatedEpochRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccumulatedEpochRewardsRequest) ProtoMessage()    {}
func (*QueryAccumulatedEpochRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{8}
}
func (m *QueryAccumulatedEpochRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccumulatedEpochRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccumulatedEpochRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccumulatedEpochRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccumulatedEpochRewardsRequest.Merge(m, src)
}
func (m *QueryAccumulatedEpochRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccumulatedEpochRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccumulatedEpochRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccumulatedEpochRewardsRequest proto.InternalMessageInfo

type QueryAccumulatedEpochRewardsResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryAccumulatedEpochRewardsResponse) Reset()         { *m = QueryAccumulatedEpochRewardsResponse{} }
func (m *QueryAccumulatedEpochRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccumulatedEpochRewardsResponse) ProtoMessage()    {}
func (*QueryAccumulatedEpochRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{9}
}
func (m *QueryAccumulatedEpochRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccumulatedEpochRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccumulatedEpochRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccumulatedEpochRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccumulatedEpochRewardsResponse.Merge(m, src)
}
func (m *QueryAccumulatedEpochRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccumulatedEpochRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccumulatedEpochRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccumulatedEpochRewardsResponse proto.InternalMessageInfo

type QueryNextTopicIdRequest struct {
}

func (m *QueryNextTopicIdRequest) Reset()         { *m = QueryNextTopicIdRequest{} }
func (m *QueryNextTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdRequest) ProtoMessage()    {}
func (*QueryNextTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{10}
}
func (m *QueryNextTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdRequest.Merge(m, src)
}
func (m *QueryNextTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdRequest proto.InternalMessageInfo

type QueryNextTopicIdResponse struct {
	NextTopicId uint64 `protobuf:"varint,1,opt,name=next_topic_id,json=nextTopicId,proto3" json:"next_topic_id,omitempty"`
}

func (m *QueryNextTopicIdResponse) Reset()         { *m = QueryNextTopicIdResponse{} }
func (m *QueryNextTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdResponse) ProtoMessage()    {}
func (*QueryNextTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{11}
}
func (m *QueryNextTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdResponse.Merge(m, src)
}
func (m *QueryNextTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdResponse proto.InternalMessageInfo

func (m *QueryNextTopicIdResponse) GetNextTopicId() uint64 {
	if m != nil {
		return m.NextTopicId
	}
	return 0
}

type QueryTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicRequest) Reset()         { *m = QueryTopicRequest{} }
func (m *QueryTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicRequest) ProtoMessage()    {}
func (*QueryTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{12}
}
func (m *QueryTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicRequest.Merge(m, src)
}
func (m *QueryTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicRequest proto.InternalMessageInfo

func (m *QueryTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicResponse struct {
	Topic *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *QueryTopicResponse) Reset()         { *m = QueryTopicResponse{} }
func (m *QueryTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicResponse) ProtoMessage()    {}
func (*QueryTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{13}
}
func (m *QueryTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicResponse.Merge(m, src)
}
func (m *QueryTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicResponse proto.InternalMessageInfo

func (m *QueryTopicResponse) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

type QueryActiveTopicsRequest struct {
}

func (m *QueryActiveTopicsRequest) Reset()         { *m = QueryActiveTopicsRequest{} }
func (m *QueryActiveTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsRequest) ProtoMessage()    {}
func (*QueryActiveTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{14}
}
func (m *QueryActiveTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsRequest.Merge(m, src)
}
func (m *QueryActiveTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsRequest proto.InternalMessageInfo

type QueryActiveTopicsResponse struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *QueryActiveTopicsResponse) Reset()         { *m = QueryActiveTopicsResponse{} }
func (m *QueryActiveTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsResponse) ProtoMessage()    {}
func (*QueryActiveTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{15}
}
func (m *QueryActiveTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsResponse.Merge(m, src)
}
func (m *QueryActiveTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsResponse proto.InternalMessageInfo

func (m *QueryActiveTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type QueryGetTopicsByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetTopicsByCreatorRequest) Reset()         { *m = QueryGetTopicsByCreatorRequest{} }
func (m *QueryGetTopicsByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopicsByCreatorRequest) ProtoMessage()    {}
func (*QueryGetTopicsByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{16}
}
func (m *QueryGetTopicsByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopicsByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopicsByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopicsByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopicsByCreatorRequest.Merge(m, src)
}
func (m *QueryGetTopicsByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopicsByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopicsByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopicsByCreatorRequest proto.InternalMessageInfo

func (m *QueryGetTopicsByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetTopicsByCreatorResponse struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *QueryGetTopicsByCreatorResponse) Reset()         { *m = QueryGetTopicsByCreatorResponse{} }
func (m *QueryGetTopicsByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTopicsByCreatorResponse) ProtoMessage()    {}
func (*QueryGetTopicsByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{17}
}
func (m *QueryGetTopicsByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTopicsByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTopicsByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTopicsByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTopicsByCreatorResponse.Merge(m, src)
}
func (m *QueryGetTopicsByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTopicsByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTopicsByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTopicsByCreatorResponse proto.InternalMessageInfo

func (m *QueryGetTopicsByCreatorResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type QueryRegisteredTopicsIdsRequest struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IsReputer bool   `protobuf:"varint,2,opt,name=is_reputer,json=isReputer,proto3" json:"is_reputer,omitempty"`
}

func (m *QueryRegisteredTopicsIdsRequest) Reset()         { *m = QueryRegisteredTopicsIdsRequest{} }
func (m *QueryRegisteredTopicsIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTopicsIdsRequest) ProtoMessage()    {}
func (*QueryRegisteredTopicsIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{18}
}
func (m *QueryRegisteredTopicsIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTopicsIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTopicsIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTopicsIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTopicsIdsRequest.Merge(m, src)
}
func (m *QueryRegisteredTopicsIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTopicsIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTopicsIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTopicsIdsRequest proto.InternalMessageInfo

func (m *QueryRegisteredTopicsIdsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRegisteredTopicsIdsRequest) GetIsReputer() bool {
	if m != nil {
		return m.IsReputer
	}
	return false
}

type QueryRegisteredTopicsIdsResponse struct {
	TopicsIds []uint64 `protobuf:"varint,1,rep,packed,name=topics_ids,json=topicsIds,proto3" json:"topics_ids,omitempty"`
}

func (m *QueryRegisteredTopicsIdsResponse) Reset()         { *m = QueryRegisteredTopicsIdsResponse{} }
func (m *QueryRegisteredTopicsIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredTopicsIdsResponse) ProtoMessage()    {}
func (*QueryRegisteredTopicsIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{19}
}
func (m *QueryRegisteredTopicsIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredTopicsIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredTopicsIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredTopicsIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredTopicsIdsResponse.Merge(m, src)
}
func (m *QueryRegisteredTopicsIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredTopicsIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredTopicsIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredTopicsIdsResponse proto.InternalMessageInfo

func (m *QueryRegisteredTopicsIdsResponse) GetTopicsIds() []uint64 {
	if m != nil {
		return m.TopicsIds
	}
	return nil
}

// Returns the weight assigned by a reputer onto a worker for a given topic
type QueryWeightRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	Worker  string `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryWeightRequest) Reset()         { *m = QueryWeightRequest{} }
func (m *QueryWeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWeightRequest) ProtoMessage()    {}
func (*QueryWeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{20}
}
func (m *QueryWeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWeightRequest.Merge(m, src)
}
func (m *QueryWeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWeightRequest proto.InternalMessageInfo

func (m *QueryWeightRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryWeightRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *QueryWeightRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

// Returns the weight assigned by a reputer onto a worker for a given topic
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryWeightResponse struct {
	Amount cosmossdk_io_math.Uint `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *QueryWeightResponse) Reset()         { *m = QueryWeightResponse{} }
func (m *QueryWeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWeightResponse) ProtoMessage()    {}
func (*QueryWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{21}
}
func (m *QueryWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWeightResponse.Merge(m, src)
}
func (m *QueryWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWeightResponse proto.InternalMessageInfo

// Returns the latest inference on a topic from a worker
type QueryAllInferencesRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryAllInferencesRequest) Reset()         { *m = QueryAllInferencesRequest{} }
func (m *QueryAllInferencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferencesRequest) ProtoMessage()    {}
func (*QueryAllInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{22}
}
func (m *QueryAllInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferencesRequest.Merge(m, src)
}
func (m *QueryAllInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferencesRequest proto.InternalMessageInfo

func (m *QueryAllInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryAllInferencesRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Returns the latest inference on a topic from a worker
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryAllInferencesResponse struct {
	Inferences *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *QueryAllInferencesResponse) Reset()         { *m = QueryAllInferencesResponse{} }
func (m *QueryAllInferencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInferencesResponse) ProtoMessage()    {}
func (*QueryAllInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{23}
}
func (m *QueryAllInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInferencesResponse.Merge(m, src)
}
func (m *QueryAllInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInferencesResponse proto.InternalMessageInfo

func (m *QueryAllInferencesResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type QueryInferencesToScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryInferencesToScoreRequest) Reset()         { *m = QueryInferencesToScoreRequest{} }
func (m *QueryInferencesToScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesToScoreRequest) ProtoMessage()    {}
func (*QueryInferencesToScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{24}
}
func (m *QueryInferencesToScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesToScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesToScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesToScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesToScoreRequest.Merge(m, src)
}
func (m *QueryInferencesToScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesToScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesToScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesToScoreRequest proto.InternalMessageInfo

func (m *QueryInferencesToScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryInferencesToScoreResponse struct {
	Inferences []*InferenceSetForScoring `protobuf:"bytes,1,rep,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *QueryInferencesToScoreResponse) Reset()         { *m = QueryInferencesToScoreResponse{} }
func (m *QueryInferencesToScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesToScoreResponse) ProtoMessage()    {}
func (*QueryInferencesToScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{25}
}
func (m *QueryInferencesToScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesToScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesToScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesToScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesToScoreResponse.Merge(m, src)
}
func (m *QueryInferencesToScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesToScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesToScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesToScoreResponse proto.InternalMessageInfo

func (m *QueryInferencesToScoreResponse) GetInferences() []*InferenceSetForScoring {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type QueryRegisteredWorkerNodesRequest struct {
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *QueryRegisteredWorkerNodesRequest) Reset()         { *m = QueryRegisteredWorkerNodesRequest{} }
func (m *QueryRegisteredWorkerNodesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredWorkerNodesRequest) ProtoMessage()    {}
func (*QueryRegisteredWorkerNodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{26}
}
func (m *QueryRegisteredWorkerNodesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredWorkerNodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredWorkerNodesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredWorkerNodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredWorkerNodesRequest.Merge(m, src)
}
func (m *QueryRegisteredWorkerNodesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredWorkerNodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredWorkerNodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredWorkerNodesRequest proto.InternalMessageInfo

func (m *QueryRegisteredWorkerNodesRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type QueryRegisteredWorkerNodesResponse struct {
	Nodes []*OffchainNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *QueryRegisteredWorkerNodesResponse) Reset()         { *m = QueryRegisteredWorkerNodesResponse{} }
func (m *QueryRegisteredWorkerNodesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredWorkerNodesResponse) ProtoMessage()    {}
func (*QueryRegisteredWorkerNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{27}
}
func (m *QueryRegisteredWorkerNodesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredWorkerNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredWorkerNodesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredWorkerNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredWorkerNodesResponse.Merge(m, src)
}
func (m *QueryRegisteredWorkerNodesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredWorkerNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredWorkerNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredWorkerNodesResponse proto.InternalMessageInfo

func (m *QueryRegisteredWorkerNodesResponse) GetNodes() []*OffchainNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type QueryWorkerAddressByP2PKeyRequest struct {
	Libp2PKey string `protobuf:"bytes,1,opt,name=libp2p_key,json=libp2pKey,proto3" json:"libp2p_key,omitempty"`
}

func (m *QueryWorkerAddressByP2PKeyRequest) Reset()         { *m = QueryWorkerAddressByP2PKeyRequest{} }
func (m *QueryWorkerAddressByP2PKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerAddressByP2PKeyRequest) ProtoMessage()    {}
func (*QueryWorkerAddressByP2PKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{28}
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.Merge(m, src)
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerAddressByP2PKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerAddressByP2PKeyRequest proto.InternalMessageInfo

func (m *QueryWorkerAddressByP2PKeyRequest) GetLibp2PKey() string {
	if m != nil {
		return m.Libp2PKey
	}
	return ""
}

type QueryWorkerAddressByP2PKeyResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryWorkerAddressByP2PKeyResponse) Reset()         { *m = QueryWorkerAddressByP2PKeyResponse{} }
func (m *QueryWorkerAddressByP2PKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerAddressByP2PKeyResponse) ProtoMessage()    {}
func (*QueryWorkerAddressByP2PKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{29}
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.Merge(m, src)
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerAddressByP2PKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerAddressByP2PKeyResponse proto.InternalMessageInfo

func (m *QueryWorkerAddressByP2PKeyResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryExistingInferenceRequest struct {
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TopicId   uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryExistingInferenceRequest) Reset()         { *m = QueryExistingInferenceRequest{} }
func (m *QueryExistingInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExistingInferenceRequest) ProtoMessage()    {}
func (*QueryExistingInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{30}
}
func (m *QueryExistingInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExistingInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExistingInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExistingInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExistingInferenceRequest.Merge(m, src)
}
func (m *QueryExistingInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExistingInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExistingInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExistingInferenceRequest proto.InternalMessageInfo

func (m *QueryExistingInferenceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *QueryExistingInferenceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryExistingInferenceResponse struct {
	InferenceRequest *InferenceRequest      `protobuf:"bytes,1,opt,name=inference_request,json=inferenceRequest,proto3" json:"inference_request,omitempty"`
	DemandLeft       cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=demand_left,json=demandLeft,proto3,customtype=cosmossdk.io/math.Uint" json:"demand_left"`
}

func (m *QueryExistingInferenceResponse) Reset()         { *m = QueryExistingInferenceResponse{} }
func (m *QueryExistingInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExistingInferenceResponse) ProtoMessage()    {}
func (*QueryExistingInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{31}
}
func (m *QueryExistingInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExistingInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExistingInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExistingInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExistingInferenceResponse.Merge(m, src)
}
func (m *QueryExistingInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExistingInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExistingInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExistingInferenceResponse proto.InternalMessageInfo

func (m *QueryExistingInferenceResponse) GetInferenceRequest() *InferenceRequest {
	if m != nil {
		return m.InferenceRequest
	}
	return nil
}

type QueryAllExistingInferenceRequest struct {
}

func (m *QueryAllExistingInferenceRequest) Reset()         { *m = QueryAllExistingInferenceRequest{} }
func (m *QueryAllExistingInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExistingInferenceRequest) ProtoMessage()    {}
func (*QueryAllExistingInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{32}
}
func (m *QueryAllExistingInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExistingInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExistingInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExistingInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExistingInferenceRequest.Merge(m, src)
}
func (m *QueryAllExistingInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExistingInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExistingInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExistingInferenceRequest proto.InternalMessageInfo

type InferenceRequestAndDemandLeft struct {
	InferenceRequest *InferenceRequest      `protobuf:"bytes,1,opt,name=inference_request,json=inferenceRequest,proto3" json:"inference_request,omitempty"`
	DemandLeft       cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=demand_left,json=demandLeft,proto3,customtype=cosmossdk.io/math.Uint" json:"demand_left"`
}

func (m *InferenceRequestAndDemandLeft) Reset()         { *m = InferenceRequestAndDemandLeft{} }
func (m *InferenceRequestAndDemandLeft) String() string { return proto.CompactTextString(m) }
func (*InferenceRequestAndDemandLeft) ProtoMessage()    {}
func (*InferenceRequestAndDemandLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{33}
}
func (m *InferenceRequestAndDemandLeft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceRequestAndDemandLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceRequestAndDemandLeft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceRequestAndDemandLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceRequestAndDemandLeft.Merge(m, src)
}
func (m *InferenceRequestAndDemandLeft) XXX_Size() int {
	return m.Size()
}
func (m *InferenceRequestAndDemandLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceRequestAndDemandLeft.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceRequestAndDemandLeft proto.InternalMessageInfo

func (m *InferenceRequestAndDemandLeft) GetInferenceRequest() *InferenceRequest {
	if m != nil {
		return m.InferenceRequest
	}
	return nil
}

type QueryAllExistingInferenceResponse struct {
	InferenceRequests []*InferenceRequestAndDemandLeft `protobuf:"bytes,1,rep,name=inference_requests,json=inferenceRequests,proto3" json:"inference_requests,omitempty"`
}

func (m *QueryAllExistingInferenceResponse) Reset()         { *m = QueryAllExistingInferenceResponse{} }
func (m *QueryAllExistingInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExistingInferenceResponse) ProtoMessage()    {}
func (*QueryAllExistingInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{34}
}
func (m *QueryAllExistingInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExistingInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExistingInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExistingInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExistingInferenceResponse.Merge(m, src)
}
func (m *QueryAllExistingInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExistingInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExistingInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExistingInferenceResponse proto.InternalMessageInfo

func (m *QueryAllExistingInferenceResponse) GetInferenceRequests() []*InferenceRequestAndDemandLeft {
	if m != nil {
		return m.InferenceRequests
	}
	return nil
}

type QueryTopicUnmetDemandRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicUnmetDemandRequest) Reset()         { *m = QueryTopicUnmetDemandRequest{} }
func (m *QueryTopicUnmetDemandRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicUnmetDemandRequest) ProtoMessage()    {}
func (*QueryTopicUnmetDemandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{35}
}
func (m *QueryTopicUnmetDemandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicUnmetDemandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicUnmetDemandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicUnmetDemandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicUnmetDemandRequest.Merge(m, src)
}
func (m *QueryTopicUnmetDemandRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicUnmetDemandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicUnmetDemandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicUnmetDemandRequest proto.InternalMessageInfo

func (m *QueryTopicUnmetDemandRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicUnmetDemandResponse struct {
	DemandLeft cosmossdk_io_math.Uint `protobuf:"bytes,1,opt,name=demand_left,json=demandLeft,proto3,customtype=cosmossdk.io/math.Uint" json:"demand_left"`
}

func (m *QueryTopicUnmetDemandResponse) Reset()         { *m = QueryTopicUnmetDemandResponse{} }
func (m *QueryTopicUnmetDemandResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicUnmetDemandResponse) ProtoMessage()    {}
func (*QueryTopicUnmetDemandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52395e9357d64f17, []int{36}
}
func (m *QueryTopicUnmetDemandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicUnmetDemandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicUnmetDemandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicUnmetDemandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicUnmetDemandResponse.Merge(m, src)
}
func (m *QueryTopicUnmetDemandResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicUnmetDemandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicUnmetDemandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicUnmetDemandResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "emissions.state.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "emissions.state.v1.QueryParamsResponse")
	proto.RegisterType((*QueryLastRewardsUpdateRequest)(nil), "emissions.state.v1.QueryLastRewardsUpdateRequest")
	proto.RegisterType((*QueryLastRewardsUpdateResponse)(nil), "emissions.state.v1.QueryLastRewardsUpdateResponse")
	proto.RegisterType((*QueryTotalStakeRequest)(nil), "emissions.state.v1.QueryTotalStakeRequest")
	proto.RegisterType((*QueryTotalStakeResponse)(nil), "emissions.state.v1.QueryTotalStakeResponse")
	proto.RegisterType((*QueryAccountStakeListRequest)(nil), "emissions.state.v1.QueryAccountStakeListRequest")
	proto.RegisterType((*QueryAccountStakeListResponse)(nil), "emissions.state.v1.QueryAccountStakeListResponse")
	proto.RegisterType((*QueryAccumulatedEpochRewardsRequest)(nil), "emissions.state.v1.QueryAccumulatedEpochRewardsRequest")
	proto.RegisterType((*QueryAccumulatedEpochRewardsResponse)(nil), "emissions.state.v1.QueryAccumulatedEpochRewardsResponse")
	proto.RegisterType((*QueryNextTopicIdRequest)(nil), "emissions.state.v1.QueryNextTopicIdRequest")
	proto.RegisterType((*QueryNextTopicIdResponse)(nil), "emissions.state.v1.QueryNextTopicIdResponse")
	proto.RegisterType((*QueryTopicRequest)(nil), "emissions.state.v1.QueryTopicRequest")
	proto.RegisterType((*QueryTopicResponse)(nil), "emissions.state.v1.QueryTopicResponse")
	proto.RegisterType((*QueryActiveTopicsRequest)(nil), "emissions.state.v1.QueryActiveTopicsRequest")
	proto.RegisterType((*QueryActiveTopicsResponse)(nil), "emissions.state.v1.QueryActiveTopicsResponse")
	proto.RegisterType((*QueryGetTopicsByCreatorRequest)(nil), "emissions.state.v1.QueryGetTopicsByCreatorRequest")
	proto.RegisterType((*QueryGetTopicsByCreatorResponse)(nil), "emissions.state.v1.QueryGetTopicsByCreatorResponse")
	proto.RegisterType((*QueryRegisteredTopicsIdsRequest)(nil), "emissions.state.v1.QueryRegisteredTopicsIdsRequest")
	proto.RegisterType((*QueryRegisteredTopicsIdsResponse)(nil), "emissions.state.v1.QueryRegisteredTopicsIdsResponse")
	proto.RegisterType((*QueryWeightRequest)(nil), "emissions.state.v1.QueryWeightRequest")
	proto.RegisterType((*QueryWeightResponse)(nil), "emissions.state.v1.QueryWeightResponse")
	proto.RegisterType((*QueryAllInferencesRequest)(nil), "emissions.state.v1.QueryAllInferencesRequest")
	proto.RegisterType((*QueryAllInferencesResponse)(nil), "emissions.state.v1.QueryAllInferencesResponse")
	proto.RegisterType((*QueryInferencesToScoreRequest)(nil), "emissions.state.v1.QueryInferencesToScoreRequest")
	proto.RegisterType((*QueryInferencesToScoreResponse)(nil), "emissions.state.v1.QueryInferencesToScoreResponse")
	proto.RegisterType((*QueryRegisteredWorkerNodesRequest)(nil), "emissions.state.v1.QueryRegisteredWorkerNodesRequest")
	proto.RegisterType((*QueryRegisteredWorkerNodesResponse)(nil), "emissions.state.v1.QueryRegisteredWorkerNodesResponse")
	proto.RegisterType((*QueryWorkerAddressByP2PKeyRequest)(nil), "emissions.state.v1.QueryWorkerAddressByP2PKeyRequest")
	proto.RegisterType((*QueryWorkerAddressByP2PKeyResponse)(nil), "emissions.state.v1.QueryWorkerAddressByP2PKeyResponse")
	proto.RegisterType((*QueryExistingInferenceRequest)(nil), "emissions.state.v1.QueryExistingInferenceRequest")
	proto.RegisterType((*QueryExistingInferenceResponse)(nil), "emissions.state.v1.QueryExistingInferenceResponse")
	proto.RegisterType((*QueryAllExistingInferenceRequest)(nil), "emissions.state.v1.QueryAllExistingInferenceRequest")
	proto.RegisterType((*InferenceRequestAndDemandLeft)(nil), "emissions.state.v1.InferenceRequestAndDemandLeft")
	proto.RegisterType((*QueryAllExistingInferenceResponse)(nil), "emissions.state.v1.QueryAllExistingInferenceResponse")
	proto.RegisterType((*QueryTopicUnmetDemandRequest)(nil), "emissions.state.v1.QueryTopicUnmetDemandRequest")
	proto.RegisterType((*QueryTopicUnmetDemandResponse)(nil), "emissions.state.v1.QueryTopicUnmetDemandResponse")
}

func init() { proto.RegisterFile("emissions/state/v1/query.proto", fileDescriptor_52395e9357d64f17) }

var fileDescriptor_52395e9357d64f17 = []byte{
	// 1791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0x14, 0xc7,
	0x12, 0xf7, 0xf0, 0xb1, 0xb0, 0x65, 0xf1, 0x1e, 0x6e, 0x78, 0x66, 0x3d, 0xd8, 0x6b, 0x33, 0x80,
	0x01, 0x7f, 0xec, 0xb0, 0x8b, 0x31, 0xe0, 0xf7, 0x1e, 0x92, 0xfd, 0x1e, 0x38, 0x1b, 0x2c, 0x62,
	0xc6, 0x26, 0x28, 0x08, 0x69, 0x33, 0xde, 0x69, 0xaf, 0x47, 0xde, 0x9d, 0x59, 0x66, 0x7a, 0x8d,
	0x2d, 0x6b, 0x2f, 0x91, 0x22, 0xe5, 0x12, 0x29, 0x52, 0xa4, 0x5c, 0x22, 0x45, 0x51, 0x94, 0x43,
	0x8e, 0x48, 0x21, 0xa7, 0x1c, 0xa3, 0x08, 0x4b, 0xb9, 0xa0, 0xe4, 0x12, 0xe5, 0x80, 0x22, 0x88,
	0x94, 0xfc, 0x0b, 0xb9, 0x45, 0xd3, 0x5d, 0xb3, 0xb3, 0x1f, 0x33, 0xe3, 0x35, 0x4a, 0x0e, 0xb9,
	0x58, 0x3b, 0xdd, 0x55, 0xd5, 0xbf, 0xfa, 0x55, 0x75, 0x77, 0x55, 0x1b, 0xd2, 0xb4, 0x62, 0xba,
	0xae, 0x69, 0x5b, 0xae, 0xea, 0x32, 0x9d, 0x51, 0x75, 0x23, 0xab, 0x3e, 0xac, 0x51, 0x67, 0x2b,
	0x53, 0x75, 0x6c, 0x66, 0x13, 0xd2, 0x98, 0xcf, 0xf0, 0xf9, 0xcc, 0x46, 0x56, 0x1e, 0x2b, 0xda,
	0x6e, 0xc5, 0x76, 0xd5, 0x15, 0xdd, 0xa5, 0x42, 0x58, 0xdd, 0xc8, 0xae, 0x50, 0xa6, 0x67, 0xd5,
	0xaa, 0x5e, 0x32, 0x2d, 0x9d, 0x99, 0xb6, 0x25, 0xf4, 0xe5, 0x30, 0xfb, 0x6c, 0xab, 0x4a, 0x5d,
	0x9c, 0x1f, 0x2c, 0xd9, 0x76, 0xa9, 0x4c, 0x55, 0xbd, 0x6a, 0xaa, 0xba, 0x65, 0xd9, 0x8c, 0x2b,
	0xfb, 0xb3, 0x27, 0x71, 0x25, 0x7f, 0x91, 0x66, 0x68, 0x72, 0x9f, 0x5e, 0x31, 0x2d, 0x5b, 0xe5,
	0x7f, 0x71, 0xe8, 0x78, 0xc9, 0x2e, 0xd9, 0xfc, 0xa7, 0xea, 0xfd, 0xc2, 0xd1, 0x01, 0x61, 0xa5,
	0x20, 0x26, 0xc4, 0x87, 0x98, 0x52, 0x8e, 0x03, 0xb9, 0xe3, 0x99, 0x5c, 0xd4, 0x1d, 0xbd, 0xe2,
	0x6a, 0xf4, 0x61, 0x8d, 0xba, 0x4c, 0x59, 0x86, 0x63, 0x2d, 0xa3, 0x6e, 0xd5, 0xb6, 0x5c, 0x4a,
	0xfe, 0x0b, 0x89, 0x2a, 0x1f, 0x49, 0x49, 0x23, 0xd2, 0xf9, 0xde, 0x9c, 0x9c, 0xe9, 0x24, 0x27,
	0x23, 0x74, 0xe6, 0x92, 0x3b, 0xcf, 0x87, 0x7b, 0xbe, 0xf8, 0xf5, 0xf1, 0x98, 0xa4, 0xa1, 0x92,
	0x32, 0x0c, 0x43, 0xdc, 0xea, 0x82, 0xee, 0x32, 0x8d, 0x3e, 0xd2, 0x1d, 0xc3, 0xbd, 0x5b, 0x35,
	0x74, 0x46, 0xfd, 0x65, 0x17, 0x21, 0x1d, 0x25, 0x80, 0x08, 0x32, 0x70, 0xac, 0xac, 0xbb, 0xac,
	0xe0, 0x88, 0xd9, 0x42, 0x8d, 0x4f, 0x73, 0x38, 0xfb, 0xb5, 0xbe, 0x72, 0xbb, 0x9e, 0x92, 0x82,
	0x7e, 0x6e, 0x71, 0xd9, 0x66, 0x7a, 0x79, 0x89, 0xe9, 0xeb, 0x8d, 0xb5, 0xd6, 0xe1, 0x44, 0xc7,
	0x0c, 0x2e, 0xf2, 0x3a, 0x24, 0xf4, 0x8a, 0x5d, 0xb3, 0x18, 0xb7, 0x9b, 0x9c, 0xcb, 0x79, 0xae,
	0xfc, 0xf4, 0x7c, 0xb8, 0x5f, 0x30, 0xe7, 0x1a, 0xeb, 0x19, 0xd3, 0x56, 0x2b, 0x3a, 0x5b, 0xcb,
	0xdc, 0x35, 0x2d, 0xf6, 0xfd, 0x93, 0xc9, 0x5e, 0xe4, 0xd4, 0xfb, 0x44, 0x9f, 0x85, 0x85, 0x99,
	0x03, 0xbf, 0x7d, 0x3a, 0x2c, 0x29, 0x57, 0x61, 0x90, 0x2f, 0x36, 0x5b, 0x2c, 0x7a, 0xa3, 0x7c,
	0xb9, 0x05, 0xd3, 0x03, 0xcb, 0xc1, 0x90, 0x14, 0x1c, 0xd2, 0x0d, 0xc3, 0xa1, 0xae, 0x60, 0x36,
	0xa9, 0xf9, 0x9f, 0xca, 0x9b, 0xc8, 0x59, 0xa7, 0x26, 0x82, 0xbd, 0x0c, 0x09, 0xd7, 0x1b, 0xf4,
	0x34, 0xf7, 0x9f, 0xef, 0xcd, 0x0d, 0x85, 0xc5, 0x84, 0xab, 0xe5, 0xad, 0x55, 0x5b, 0x43, 0x61,
	0xe5, 0x2c, 0x9c, 0xf6, 0xed, 0xd6, 0x2a, 0xb5, 0xb2, 0xce, 0xa8, 0x71, 0xa3, 0x6a, 0x17, 0xd7,
	0x90, 0x3e, 0x9f, 0xa5, 0x0d, 0x38, 0x13, 0x2f, 0x86, 0x28, 0x5e, 0x6b, 0xa3, 0xec, 0x22, 0x52,
	0xf6, 0xaf, 0x4e, 0xca, 0xf2, 0x9c, 0x31, 0x40, 0xc6, 0xf2, 0xe1, 0x84, 0x0d, 0x60, 0x74, 0x6e,
	0xd3, 0x4d, 0xb6, 0x6c, 0x57, 0xcd, 0x62, 0xde, 0xf0, 0x21, 0x5d, 0x87, 0x54, 0xe7, 0x14, 0xc2,
	0x50, 0xe0, 0x88, 0x45, 0x37, 0x59, 0x81, 0x79, 0xe3, 0x05, 0xd3, 0xe0, 0x68, 0x0e, 0x68, 0xbd,
	0x56, 0x20, 0xab, 0x64, 0xa0, 0x0f, 0x03, 0x5f, 0x35, 0x8b, 0x7e, 0x00, 0x06, 0xe0, 0x70, 0x9b,
	0xce, 0x21, 0x86, 0xf2, 0x37, 0x70, 0x87, 0xa0, 0x3c, 0xae, 0xa4, 0xc2, 0x41, 0x2e, 0x80, 0x3b,
	0x61, 0x20, 0x8c, 0x75, 0xa1, 0x21, 0xe4, 0x14, 0x19, 0x61, 0xcf, 0x16, 0x99, 0xb9, 0x41, 0xf9,
	0x54, 0x83, 0xe5, 0xdb, 0x30, 0x10, 0x32, 0x87, 0x2b, 0x65, 0x21, 0xc1, 0x2d, 0xf8, 0x01, 0x8e,
	0x59, 0x0a, 0x05, 0x95, 0x19, 0xdc, 0x47, 0xf3, 0x54, 0x78, 0xed, 0xce, 0x6d, 0xfd, 0xcf, 0xa1,
	0x3a, 0xb3, 0x9d, 0xa6, 0x84, 0x2b, 0x8a, 0x11, 0x3f, 0xe1, 0xf0, 0x53, 0x59, 0x86, 0xe1, 0x48,
	0xdd, 0x57, 0x47, 0x74, 0x1f, 0xad, 0x6a, 0xb4, 0x64, 0xba, 0x8c, 0x3a, 0xd4, 0x10, 0xc6, 0xf3,
	0x8d, 0x54, 0x8b, 0xde, 0x03, 0x64, 0x08, 0xc0, 0x74, 0x0b, 0x0e, 0xad, 0xd6, 0x18, 0x75, 0x52,
	0xfb, 0x46, 0xa4, 0xf3, 0x87, 0xb5, 0xa4, 0xe9, 0x6a, 0x62, 0x40, 0x99, 0x85, 0x91, 0x68, 0xdb,
	0x08, 0x79, 0x08, 0x40, 0x20, 0x29, 0x98, 0x86, 0x80, 0x7d, 0x40, 0x4b, 0x32, 0x5f, 0x4c, 0xd1,
	0x31, 0xc6, 0xf7, 0xa8, 0x59, 0x5a, 0x63, 0xbb, 0x27, 0x85, 0x07, 0xb6, 0x19, 0x4f, 0x52, 0xf3,
	0x3f, 0x49, 0x3f, 0x24, 0x1e, 0xd9, 0xce, 0x3a, 0x75, 0x52, 0xfb, 0xf9, 0x04, 0x7e, 0x29, 0x25,
	0x3c, 0x52, 0xfd, 0x25, 0xfe, 0xb2, 0xb3, 0x66, 0xd9, 0x4f, 0xa6, 0x72, 0x39, 0x6f, 0xad, 0x52,
	0x87, 0x5a, 0x45, 0xea, 0x76, 0xe1, 0xd2, 0x20, 0x24, 0x99, 0x59, 0xa1, 0x2e, 0xd3, 0x2b, 0x55,
	0xee, 0x94, 0xc7, 0x90, 0x3f, 0xa0, 0x3c, 0x00, 0x39, 0xcc, 0x2a, 0x7a, 0x71, 0x1d, 0xc0, 0x6c,
	0x8c, 0xe2, 0x96, 0x48, 0x87, 0x65, 0x45, 0x93, 0x6e, 0x93, 0x86, 0x32, 0x83, 0xa7, 0x5c, 0x30,
	0xbd, 0x6c, 0x2f, 0x15, 0x6d, 0x87, 0x76, 0xb1, 0x3f, 0xcb, 0x98, 0xec, 0x21, 0xba, 0x0d, 0x8e,
	0x5b, 0xd1, 0x79, 0x39, 0x3b, 0x16, 0x8b, 0x6e, 0x89, 0xb2, 0x9b, 0xb6, 0xe3, 0x59, 0x31, 0xad,
	0x52, 0x0b, 0xd2, 0xff, 0xc0, 0xa9, 0xb6, 0x64, 0xbb, 0xc7, 0xe3, 0x7b, 0xdb, 0x36, 0x02, 0x96,
	0x4f, 0xc0, 0x21, 0xcb, 0x36, 0xa8, 0x07, 0x56, 0x64, 0x47, 0xc2, 0xfb, 0xcc, 0x1b, 0xca, 0x03,
	0x50, 0xe2, 0xb4, 0x11, 0xef, 0x34, 0x1c, 0xf4, 0xe4, 0x7d, 0xa8, 0x23, 0x61, 0x50, 0xdf, 0x58,
	0x5d, 0x2d, 0xae, 0xe9, 0xa6, 0xe5, 0x69, 0x6a, 0x42, 0x5c, 0x99, 0x43, 0x6c, 0xc2, 0xe6, 0xac,
	0xd8, 0x3d, 0x73, 0x5b, 0x8b, 0xb9, 0xc5, 0x5b, 0x74, 0xcb, 0xc7, 0x36, 0x04, 0x50, 0x36, 0x57,
	0xaa, 0xb9, 0x6a, 0x61, 0x9d, 0x6e, 0xe1, 0x4e, 0x4b, 0x8a, 0x91, 0x5b, 0x74, 0x4b, 0xb9, 0x8e,
	0x08, 0x23, 0x6c, 0x20, 0xc2, 0xe8, 0xfb, 0xea, 0x2d, 0x8c, 0xe4, 0x8d, 0x4d, 0xd3, 0x65, 0xa6,
	0x55, 0x6a, 0x50, 0xda, 0xb4, 0xbe, 0x23, 0x7e, 0xfa, 0xb1, 0x4c, 0x6a, 0x49, 0x1c, 0xc9, 0x1b,
	0x2d, 0x81, 0xde, 0xd7, 0x1a, 0xe8, 0x1d, 0x09, 0x23, 0x1d, 0x62, 0x1b, 0x71, 0xdd, 0x81, 0xbe,
	0x46, 0xac, 0x0a, 0x68, 0x14, 0xd3, 0xf1, 0x4c, 0x6c, 0xc0, 0x11, 0x9d, 0x76, 0xd4, 0x6c, 0xc7,
	0xbb, 0x04, 0xbd, 0x06, 0xad, 0xe8, 0x96, 0x51, 0x28, 0xd3, 0x55, 0x26, 0xe2, 0xf9, 0x4a, 0xbb,
	0x14, 0x84, 0x99, 0x05, 0xba, 0xca, 0x14, 0x05, 0x8f, 0xac, 0xd9, 0x72, 0x39, 0x8a, 0x28, 0xe5,
	0xa9, 0x04, 0x43, 0xed, 0x83, 0xb3, 0x96, 0xf1, 0xff, 0x86, 0x95, 0xbf, 0x8d, 0xb7, 0xef, 0x4a,
	0x98, 0x98, 0xe1, 0xee, 0x62, 0xec, 0xde, 0x06, 0xd2, 0xe1, 0x8d, 0xbf, 0x05, 0xb2, 0xdd, 0xb8,
	0xd3, 0x42, 0x8e, 0xd6, 0xd7, 0xee, 0x9b, 0xab, 0x5c, 0xc3, 0x2a, 0x8c, 0x5f, 0x0f, 0x77, 0xad,
	0x0a, 0x65, 0x42, 0xbe, 0x8b, 0x43, 0x86, 0x61, 0x5a, 0x77, 0xaa, 0x22, 0xfa, 0x36, 0xe2, 0xa4,
	0x3f, 0x83, 0xb8, 0xdc, 0xef, 0x29, 0x38, 0xc8, 0x97, 0x25, 0x75, 0x48, 0x88, 0xba, 0x9a, 0x8c,
	0x86, 0x51, 0xd1, 0x59, 0xc2, 0xcb, 0xe7, 0x76, 0x95, 0x13, 0xc8, 0x15, 0xe5, 0x9d, 0x1f, 0x7e,
	0xf9, 0x70, 0xdf, 0x20, 0x91, 0xd5, 0x90, 0x4e, 0x45, 0x54, 0xee, 0xe4, 0x4b, 0x09, 0x8e, 0xcf,
	0x53, 0xd6, 0x51, 0x97, 0x93, 0x6c, 0xe4, 0x2a, 0x51, 0x45, 0xbe, 0x9c, 0xdb, 0x8b, 0x0a, 0x62,
	0x9c, 0x7a, 0xcf, 0xe3, 0x86, 0x03, 0xbd, 0x40, 0xce, 0x85, 0x01, 0x0d, 0xe9, 0x0a, 0xc8, 0x77,
	0x12, 0xc8, 0xf3, 0x94, 0x45, 0xd4, 0xae, 0xe4, 0x4a, 0x24, 0x90, 0xf8, 0xa2, 0x58, 0xbe, 0xba,
	0x77, 0x45, 0xf4, 0x63, 0x26, 0xf0, 0x43, 0x25, 0x93, 0x61, 0x7e, 0xe8, 0x81, 0x85, 0x02, 0xf5,
	0x4c, 0xf8, 0x4e, 0x91, 0x8f, 0x25, 0xf8, 0xc7, 0x3c, 0x65, 0x4d, 0x65, 0x2f, 0x19, 0x8f, 0x04,
	0xd2, 0x59, 0x37, 0xcb, 0x13, 0xdd, 0x09, 0x23, 0xd2, 0x4c, 0x80, 0xf4, 0x34, 0x39, 0x15, 0x86,
	0xb4, 0xa5, 0xd0, 0x26, 0xef, 0x4b, 0x70, 0xd8, 0x2f, 0x19, 0xc9, 0xd9, 0xc8, 0xa5, 0x9a, 0x8b,
	0x6e, 0x79, 0x74, 0x37, 0x31, 0xc4, 0x92, 0x0b, 0xb0, 0x9c, 0x23, 0x67, 0xc3, 0xb0, 0x88, 0x4a,
	0x4e, 0xdd, 0xf6, 0xe1, 0xd4, 0xc9, 0x27, 0x12, 0xfc, 0x93, 0xc7, 0x3e, 0xa8, 0xa8, 0xc9, 0x44,
	0x4c, 0xdc, 0x3a, 0x8a, 0x72, 0x79, 0xb2, 0x4b, 0xe9, 0xae, 0x09, 0xd3, 0xb9, 0x9a, 0xa0, 0xcc,
	0x25, 0x8f, 0x25, 0x20, 0x9d, 0x35, 0x36, 0x89, 0xde, 0x1d, 0x91, 0xc5, 0xbc, 0x7c, 0x69, 0x4f,
	0x3a, 0x88, 0x37, 0x1b, 0xe0, 0x1d, 0x25, 0x67, 0xe2, 0x48, 0xc5, 0xce, 0xa0, 0x4e, 0x3e, 0x97,
	0x20, 0x39, 0x4f, 0x99, 0xa8, 0x60, 0x63, 0x0e, 0xa2, 0x96, 0x2a, 0x3a, 0xe6, 0x20, 0x6a, 0x2d,
	0x85, 0x95, 0x9b, 0x01, 0xa2, 0x7f, 0x93, 0x6b, 0x61, 0x88, 0x1e, 0x71, 0x85, 0xe6, 0x38, 0xab,
	0xdb, 0x58, 0x77, 0xd7, 0xd5, 0x6d, 0x51, 0x68, 0xd7, 0xc9, 0x53, 0x09, 0x4e, 0xce, 0x53, 0x16,
	0x59, 0x81, 0x44, 0x9f, 0x59, 0x51, 0x2a, 0x31, 0x67, 0x56, 0xe4, 0x7d, 0xa6, 0xcc, 0x06, 0xee,
	0x4c, 0x93, 0xa9, 0x30, 0x77, 0x82, 0xb2, 0x52, 0xf5, 0xef, 0x3b, 0xcf, 0x1f, 0xbf, 0x38, 0xaa,
	0x93, 0x1d, 0x09, 0x86, 0xbd, 0x24, 0x8e, 0xae, 0x12, 0x5c, 0x32, 0x15, 0x9d, 0xa6, 0xd1, 0x6a,
	0xf2, 0xe5, 0x3d, 0x6a, 0xa1, 0x4f, 0x57, 0x03, 0x9f, 0x26, 0xc9, 0xf8, 0x2e, 0x3e, 0xe9, 0xe5,
	0x72, 0xe3, 0x1e, 0x27, 0x4f, 0x24, 0x38, 0xe6, 0x67, 0x63, 0xd3, 0xfd, 0x49, 0x2e, 0xc6, 0x9f,
	0x01, 0x9d, 0xb7, 0xb4, 0x9c, 0xdd, 0x83, 0x46, 0xd7, 0xb0, 0x6b, 0x9e, 0x56, 0x41, 0x5c, 0xbd,
	0xcd, 0xc7, 0xc8, 0x57, 0x12, 0x1c, 0x15, 0x11, 0x08, 0xda, 0x0b, 0x32, 0x19, 0x47, 0x5e, 0x47,
	0xcf, 0x25, 0x67, 0xba, 0x15, 0x47, 0xb4, 0x73, 0x01, 0xda, 0x2b, 0xe4, 0xf2, 0x2e, 0x24, 0x37,
	0x6f, 0x85, 0x46, 0xb7, 0xc6, 0x71, 0x7b, 0x17, 0x76, 0x47, 0x4f, 0x14, 0x93, 0xfc, 0x51, 0xbd,
	0x57, 0x4c, 0xf2, 0x47, 0xb6, 0x5c, 0xca, 0x74, 0xe0, 0xc3, 0x38, 0xb9, 0xd0, 0xb5, 0x0f, 0xe4,
	0x23, 0x09, 0x8e, 0xf0, 0x34, 0xf1, 0x1f, 0xe5, 0xc8, 0x58, 0x4c, 0xb8, 0xdb, 0xde, 0xf4, 0xe4,
	0xf1, 0xae, 0x64, 0x11, 0xe2, 0x44, 0x00, 0xf1, 0x14, 0x19, 0x0e, 0x3f, 0x00, 0x99, 0x5e, 0x2e,
	0xf0, 0x07, 0x33, 0xf2, 0x99, 0xc8, 0xdf, 0xf6, 0x67, 0xb8, 0x98, 0xfc, 0x8d, 0x78, 0xeb, 0x8b,
	0xc9, 0xdf, 0xa8, 0x37, 0x3e, 0x65, 0x34, 0x80, 0x7a, 0x92, 0x0c, 0x84, 0x41, 0x15, 0x20, 0xbf,
	0x91, 0x60, 0xc0, 0x3b, 0xa0, 0x1b, 0x3d, 0xa5, 0xe8, 0x33, 0x1d, 0xfe, 0xa4, 0x4c, 0xa2, 0xf7,
	0x7c, 0x5c, 0x33, 0x2b, 0x4f, 0xef, 0x55, 0x0d, 0x41, 0x5f, 0x09, 0x40, 0x4f, 0x90, 0xb1, 0xd0,
	0xe3, 0x9c, 0x6b, 0x15, 0x78, 0xf3, 0xaa, 0x6e, 0x63, 0xc7, 0x5c, 0x27, 0xdf, 0x4a, 0x90, 0x6a,
	0x78, 0xd1, 0xd6, 0x81, 0xc6, 0x38, 0x11, 0xd7, 0xf5, 0xc6, 0x38, 0x11, 0xdb, 0xe8, 0x76, 0x51,
	0xb0, 0xb5, 0x3a, 0x11, 0xb4, 0xd6, 0x75, 0xf2, 0xb5, 0x04, 0xfd, 0xf3, 0x94, 0x85, 0x3c, 0x4b,
	0x91, 0x4b, 0x5d, 0x70, 0xda, 0xfe, 0x40, 0x26, 0x4f, 0xed, 0x4d, 0xa9, 0xeb, 0x9d, 0xe8, 0x34,
	0xb4, 0x0b, 0xc1, 0x1b, 0xd9, 0xdc, 0xc2, 0xce, 0x8b, 0xb4, 0xf4, 0xec, 0x45, 0x5a, 0xfa, 0xf9,
	0x45, 0x5a, 0xfa, 0xe0, 0x65, 0xba, 0xe7, 0xd9, 0xcb, 0x74, 0xcf, 0x8f, 0x2f, 0xd3, 0x3d, 0xf7,
	0x73, 0x25, 0x93, 0xad, 0xd5, 0x56, 0x32, 0x45, 0xbb, 0xe2, 0x9d, 0xf1, 0xb6, 0xa3, 0x4f, 0x5a,
	0x94, 0x79, 0x3c, 0xf8, 0x9f, 0xfc, 0x65, 0x42, 0xdd, 0x0c, 0x16, 0x5b, 0x49, 0xf0, 0xff, 0x36,
	0x5c, 0xfa, 0x23, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xab, 0x43, 0x37, 0x6e, 0x19, 0x00, 0x00,
}

func (this *QueryTotalStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTotalStakeResponse)
	if !ok {
		that2, ok := that.(QueryTotalStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryAccumulatedEpochRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryAccumulatedEpochRewardsResponse)
	if !ok {
		that2, ok := that.(QueryAccumulatedEpochRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryWeightResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWeightResponse)
	if !ok {
		that2, ok := that.(QueryWeightResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetLastRewardsUpdate(ctx context.Context, in *QueryLastRewardsUpdateRequest, opts ...grpc.CallOption) (*QueryLastRewardsUpdateResponse, error)
	GetAccumulatedEpochRewards(ctx context.Context, in *QueryAccumulatedEpochRewardsRequest, opts ...grpc.CallOption) (*QueryAccumulatedEpochRewardsResponse, error)
	GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error)
	GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error)
	GetTopicsByCreator(ctx context.Context, in *QueryGetTopicsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetTopicsByCreatorResponse, error)
	GetWeight(ctx context.Context, in *QueryWeightRequest, opts ...grpc.CallOption) (*QueryWeightResponse, error)
	GetExistingInferenceRequest(ctx context.Context, in *QueryExistingInferenceRequest, opts ...grpc.CallOption) (*QueryExistingInferenceResponse, error)
	GetAllExistingInferenceRequests(ctx context.Context, in *QueryAllExistingInferenceRequest, opts ...grpc.CallOption) (*QueryAllExistingInferenceResponse, error)
	GetTopicUnmetDemand(ctx context.Context, in *QueryTopicUnmetDemandRequest, opts ...grpc.CallOption) (*QueryTopicUnmetDemandResponse, error)
	GetAllInferences(ctx context.Context, in *QueryAllInferencesRequest, opts ...grpc.CallOption) (*QueryAllInferencesResponse, error)
	GetInferencesToScore(ctx context.Context, in *QueryInferencesToScoreRequest, opts ...grpc.CallOption) (*QueryInferencesToScoreResponse, error)
	GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error)
	GetAccountStakeList(ctx context.Context, in *QueryAccountStakeListRequest, opts ...grpc.CallOption) (*QueryAccountStakeListResponse, error)
	GetWorkerNodeRegistration(ctx context.Context, in *QueryRegisteredWorkerNodesRequest, opts ...grpc.CallOption) (*QueryRegisteredWorkerNodesResponse, error)
	GetWorkerAddressByP2PKey(ctx context.Context, in *QueryWorkerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryWorkerAddressByP2PKeyResponse, error)
	GetRegisteredTopicsIds(ctx context.Context, in *QueryRegisteredTopicsIdsRequest, opts ...grpc.CallOption) (*QueryRegisteredTopicsIdsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastRewardsUpdate(ctx context.Context, in *QueryLastRewardsUpdateRequest, opts ...grpc.CallOption) (*QueryLastRewardsUpdateResponse, error) {
	out := new(QueryLastRewardsUpdateResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetLastRewardsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccumulatedEpochRewards(ctx context.Context, in *QueryAccumulatedEpochRewardsRequest, opts ...grpc.CallOption) (*QueryAccumulatedEpochRewardsResponse, error) {
	out := new(QueryAccumulatedEpochRewardsResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetAccumulatedEpochRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error) {
	out := new(QueryNextTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetNextTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error) {
	out := new(QueryTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error) {
	out := new(QueryActiveTopicsResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetActiveTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicsByCreator(ctx context.Context, in *QueryGetTopicsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetTopicsByCreatorResponse, error) {
	out := new(QueryGetTopicsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetTopicsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWeight(ctx context.Context, in *QueryWeightRequest, opts ...grpc.CallOption) (*QueryWeightResponse, error) {
	out := new(QueryWeightResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetExistingInferenceRequest(ctx context.Context, in *QueryExistingInferenceRequest, opts ...grpc.CallOption) (*QueryExistingInferenceResponse, error) {
	out := new(QueryExistingInferenceResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetExistingInferenceRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllExistingInferenceRequests(ctx context.Context, in *QueryAllExistingInferenceRequest, opts ...grpc.CallOption) (*QueryAllExistingInferenceResponse, error) {
	out := new(QueryAllExistingInferenceResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetAllExistingInferenceRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicUnmetDemand(ctx context.Context, in *QueryTopicUnmetDemandRequest, opts ...grpc.CallOption) (*QueryTopicUnmetDemandResponse, error) {
	out := new(QueryTopicUnmetDemandResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetTopicUnmetDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllInferences(ctx context.Context, in *QueryAllInferencesRequest, opts ...grpc.CallOption) (*QueryAllInferencesResponse, error) {
	out := new(QueryAllInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetAllInferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferencesToScore(ctx context.Context, in *QueryInferencesToScoreRequest, opts ...grpc.CallOption) (*QueryInferencesToScoreResponse, error) {
	out := new(QueryInferencesToScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetInferencesToScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error) {
	out := new(QueryTotalStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetTotalStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountStakeList(ctx context.Context, in *QueryAccountStakeListRequest, opts ...grpc.CallOption) (*QueryAccountStakeListResponse, error) {
	out := new(QueryAccountStakeListResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetAccountStakeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerNodeRegistration(ctx context.Context, in *QueryRegisteredWorkerNodesRequest, opts ...grpc.CallOption) (*QueryRegisteredWorkerNodesResponse, error) {
	out := new(QueryRegisteredWorkerNodesResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetWorkerNodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerAddressByP2PKey(ctx context.Context, in *QueryWorkerAddressByP2PKeyRequest, opts ...grpc.CallOption) (*QueryWorkerAddressByP2PKeyResponse, error) {
	out := new(QueryWorkerAddressByP2PKeyResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetWorkerAddressByP2PKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRegisteredTopicsIds(ctx context.Context, in *QueryRegisteredTopicsIdsRequest, opts ...grpc.CallOption) (*QueryRegisteredTopicsIdsResponse, error) {
	out := new(QueryRegisteredTopicsIdsResponse)
	err := c.cc.Invoke(ctx, "/emissions.state.v1.Query/GetRegisteredTopicsIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetLastRewardsUpdate(context.Context, *QueryLastRewardsUpdateRequest) (*QueryLastRewardsUpdateResponse, error)
	GetAccumulatedEpochRewards(context.Context, *QueryAccumulatedEpochRewardsRequest) (*QueryAccumulatedEpochRewardsResponse, error)
	GetNextTopicId(context.Context, *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error)
	GetTopic(context.Context, *QueryTopicRequest) (*QueryTopicResponse, error)
	GetActiveTopics(context.Context, *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error)
	GetTopicsByCreator(context.Context, *QueryGetTopicsByCreatorRequest) (*QueryGetTopicsByCreatorResponse, error)
	GetWeight(context.Context, *QueryWeightRequest) (*QueryWeightResponse, error)
	GetExistingInferenceRequest(context.Context, *QueryExistingInferenceRequest) (*QueryExistingInferenceResponse, error)
	GetAllExistingInferenceRequests(context.Context, *QueryAllExistingInferenceRequest) (*QueryAllExistingInferenceResponse, error)
	GetTopicUnmetDemand(context.Context, *QueryTopicUnmetDemandRequest) (*QueryTopicUnmetDemandResponse, error)
	GetAllInferences(context.Context, *QueryAllInferencesRequest) (*QueryAllInferencesResponse, error)
	GetInferencesToScore(context.Context, *QueryInferencesToScoreRequest) (*QueryInferencesToScoreResponse, error)
	GetTotalStake(context.Context, *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error)
	GetAccountStakeList(context.Context, *QueryAccountStakeListRequest) (*QueryAccountStakeListResponse, error)
	GetWorkerNodeRegistration(context.Context, *QueryRegisteredWorkerNodesRequest) (*QueryRegisteredWorkerNodesResponse, error)
	GetWorkerAddressByP2PKey(context.Context, *QueryWorkerAddressByP2PKeyRequest) (*QueryWorkerAddressByP2PKeyResponse, error)
	GetRegisteredTopicsIds(context.Context, *QueryRegisteredTopicsIdsRequest) (*QueryRegisteredTopicsIdsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetLastRewardsUpdate(ctx context.Context, req *QueryLastRewardsUpdateRequest) (*QueryLastRewardsUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastRewardsUpdate not implemented")
}
func (*UnimplementedQueryServer) GetAccumulatedEpochRewards(ctx context.Context, req *QueryAccumulatedEpochRewardsRequest) (*QueryAccumulatedEpochRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccumulatedEpochRewards not implemented")
}
func (*UnimplementedQueryServer) GetNextTopicId(ctx context.Context, req *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (*UnimplementedQueryServer) GetTopic(ctx context.Context, req *QueryTopicRequest) (*QueryTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedQueryServer) GetActiveTopics(ctx context.Context, req *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopics not implemented")
}
func (*UnimplementedQueryServer) GetTopicsByCreator(ctx context.Context, req *QueryGetTopicsByCreatorRequest) (*QueryGetTopicsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicsByCreator not implemented")
}
func (*UnimplementedQueryServer) GetWeight(ctx context.Context, req *QueryWeightRequest) (*QueryWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeight not implemented")
}
func (*UnimplementedQueryServer) GetExistingInferenceRequest(ctx context.Context, req *QueryExistingInferenceRequest) (*QueryExistingInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExistingInferenceRequest not implemented")
}
func (*UnimplementedQueryServer) GetAllExistingInferenceRequests(ctx context.Context, req *QueryAllExistingInferenceRequest) (*QueryAllExistingInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExistingInferenceRequests not implemented")
}
func (*UnimplementedQueryServer) GetTopicUnmetDemand(ctx context.Context, req *QueryTopicUnmetDemandRequest) (*QueryTopicUnmetDemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicUnmetDemand not implemented")
}
func (*UnimplementedQueryServer) GetAllInferences(ctx context.Context, req *QueryAllInferencesRequest) (*QueryAllInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInferences not implemented")
}
func (*UnimplementedQueryServer) GetInferencesToScore(ctx context.Context, req *QueryInferencesToScoreRequest) (*QueryInferencesToScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesToScore not implemented")
}
func (*UnimplementedQueryServer) GetTotalStake(ctx context.Context, req *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (*UnimplementedQueryServer) GetAccountStakeList(ctx context.Context, req *QueryAccountStakeListRequest) (*QueryAccountStakeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStakeList not implemented")
}
func (*UnimplementedQueryServer) GetWorkerNodeRegistration(ctx context.Context, req *QueryRegisteredWorkerNodesRequest) (*QueryRegisteredWorkerNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeRegistration not implemented")
}
func (*UnimplementedQueryServer) GetWorkerAddressByP2PKey(ctx context.Context, req *QueryWorkerAddressByP2PKeyRequest) (*QueryWorkerAddressByP2PKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerAddressByP2PKey not implemented")
}
func (*UnimplementedQueryServer) GetRegisteredTopicsIds(ctx context.Context, req *QueryRegisteredTopicsIdsRequest) (*QueryRegisteredTopicsIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredTopicsIds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastRewardsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastRewardsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastRewardsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetLastRewardsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastRewardsUpdate(ctx, req.(*QueryLastRewardsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccumulatedEpochRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccumulatedEpochRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccumulatedEpochRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetAccumulatedEpochRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccumulatedEpochRewards(ctx, req.(*QueryAccumulatedEpochRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetNextTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextTopicId(ctx, req.(*QueryNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopic(ctx, req.(*QueryTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetActiveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetActiveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetActiveTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetActiveTopics(ctx, req.(*QueryActiveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTopicsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetTopicsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicsByCreator(ctx, req.(*QueryGetTopicsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWeight(ctx, req.(*QueryWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetExistingInferenceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExistingInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetExistingInferenceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetExistingInferenceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetExistingInferenceRequest(ctx, req.(*QueryExistingInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllExistingInferenceRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExistingInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllExistingInferenceRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetAllExistingInferenceRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllExistingInferenceRequests(ctx, req.(*QueryAllExistingInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicUnmetDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicUnmetDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicUnmetDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetTopicUnmetDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicUnmetDemand(ctx, req.(*QueryTopicUnmetDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetAllInferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllInferences(ctx, req.(*QueryAllInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferencesToScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesToScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferencesToScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetInferencesToScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferencesToScore(ctx, req.(*QueryInferencesToScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetTotalStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalStake(ctx, req.(*QueryTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountStakeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountStakeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountStakeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetAccountStakeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountStakeList(ctx, req.(*QueryAccountStakeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerNodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredWorkerNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerNodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetWorkerNodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerNodeRegistration(ctx, req.(*QueryRegisteredWorkerNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerAddressByP2PKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerAddressByP2PKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerAddressByP2PKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetWorkerAddressByP2PKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerAddressByP2PKey(ctx, req.(*QueryWorkerAddressByP2PKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRegisteredTopicsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredTopicsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRegisteredTopicsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.state.v1.Query/GetRegisteredTopicsIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRegisteredTopicsIds(ctx, req.(*QueryRegisteredTopicsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.state.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetLastRewardsUpdate",
			Handler:    _Query_GetLastRewardsUpdate_Handler,
		},
		{
			MethodName: "GetAccumulatedEpochRewards",
			Handler:    _Query_GetAccumulatedEpochRewards_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _Query_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _Query_GetTopic_Handler,
		},
		{
			MethodName: "GetActiveTopics",
			Handler:    _Query_GetActiveTopics_Handler,
		},
		{
			MethodName: "GetTopicsByCreator",
			Handler:    _Query_GetTopicsByCreator_Handler,
		},
		{
			MethodName: "GetWeight",
			Handler:    _Query_GetWeight_Handler,
		},
		{
			MethodName: "GetExistingInferenceRequest",
			Handler:    _Query_GetExistingInferenceRequest_Handler,
		},
		{
			MethodName: "GetAllExistingInferenceRequests",
			Handler:    _Query_GetAllExistingInferenceRequests_Handler,
		},
		{
			MethodName: "GetTopicUnmetDemand",
			Handler:    _Query_GetTopicUnmetDemand_Handler,
		},
		{
			MethodName: "GetAllInferences",
			Handler:    _Query_GetAllInferences_Handler,
		},
		{
			MethodName: "GetInferencesToScore",
			Handler:    _Query_GetInferencesToScore_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _Query_GetTotalStake_Handler,
		},
		{
			MethodName: "GetAccountStakeList",
			Handler:    _Query_GetAccountStakeList_Handler,
		},
		{
			MethodName: "GetWorkerNodeRegistration",
			Handler:    _Query_GetWorkerNodeRegistration_Handler,
		},
		{
			MethodName: "GetWorkerAddressByP2PKey",
			Handler:    _Query_GetWorkerAddressByP2PKey_Handler,
		},
		{
			MethodName: "GetRegisteredTopicsIds",
			Handler:    _Query_GetRegisteredTopicsIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/state/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLastRewardsUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastRewardsUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastRewardsUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastRewardsUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastRewardsUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastRewardsUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRewardsUpdate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastRewardsUpdate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAccountStakeListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountStakeListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountStakeListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountStakeListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountStakeListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountStakeListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccumulatedEpochRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccumulatedEpochRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccumulatedEpochRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAccumulatedEpochRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccumulatedEpochRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccumulatedEpochRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextTopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextTopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopicsByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopicsByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopicsByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTopicsByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTopicsByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTopicsByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTopicsIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTopicsIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTopicsIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReputer {
		i--
		if m.IsReputer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredTopicsIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredTopicsIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredTopicsIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicsIds) > 0 {
		dAtA4 := make([]byte, len(m.TopicsIds)*10)
		var j3 int
		for _, num := range m.TopicsIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesToScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesToScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesToScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesToScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesToScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesToScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for iNdEx := len(m.Inferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredWorkerNodesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredWorkerNodesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredWorkerNodesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredWorkerNodesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredWorkerNodesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredWorkerNodesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerAddressByP2PKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerAddressByP2PKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerAddressByP2PKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Libp2PKey) > 0 {
		i -= len(m.Libp2PKey)
		copy(dAtA[i:], m.Libp2PKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Libp2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerAddressByP2PKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerAddressByP2PKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerAddressByP2PKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExistingInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExistingInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExistingInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExistingInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExistingInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExistingInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DemandLeft.Size()
		i -= size
		if _, err := m.DemandLeft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.InferenceRequest != nil {
		{
			size, err := m.InferenceRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExistingInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExistingInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExistingInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InferenceRequestAndDemandLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceRequestAndDemandLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceRequestAndDemandLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DemandLeft.Size()
		i -= size
		if _, err := m.DemandLeft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.InferenceRequest != nil {
		{
			size, err := m.InferenceRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExistingInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExistingInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExistingInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InferenceRequests) > 0 {
		for iNdEx := len(m.InferenceRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InferenceRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicUnmetDemandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicUnmetDemandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicUnmetDemandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicUnmetDemandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicUnmetDemandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicUnmetDemandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DemandLeft.Size()
		i -= size
		if _, err := m.DemandLeft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLastRewardsUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastRewardsUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastRewardsUpdate != 0 {
		n += 1 + sovQuery(uint64(m.LastRewardsUpdate))
	}
	return n
}

func (m *QueryTotalStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAccountStakeListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountStakeListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAccumulatedEpochRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAccumulatedEpochRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNextTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextTopicId != 0 {
		n += 1 + sovQuery(uint64(m.NextTopicId))
	}
	return n
}

func (m *QueryTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActiveTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetTopicsByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTopicsByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredTopicsIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsReputer {
		n += 2
	}
	return n
}

func (m *QueryRegisteredTopicsIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicsIds) > 0 {
		l = 0
		for _, e := range m.TopicsIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryWeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryAllInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferencesToScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryInferencesToScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for _, e := range m.Inferences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredWorkerNodesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRegisteredWorkerNodesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWorkerAddressByP2PKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Libp2PKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerAddressByP2PKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExistingInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryExistingInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InferenceRequest != nil {
		l = m.InferenceRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.DemandLeft.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExistingInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InferenceRequestAndDemandLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InferenceRequest != nil {
		l = m.InferenceRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.DemandLeft.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExistingInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InferenceRequests) > 0 {
		for _, e := range m.InferenceRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTopicUnmetDemandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicUnmetDemandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DemandLeft.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastRewardsUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastRewardsUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastRewardsUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastRewardsUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastRewardsUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastRewardsUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardsUpdate", wireType)
			}
			m.LastRewardsUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRewardsUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountStakeListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountStakeListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountStakeListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountStakeListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountStakeListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountStakeListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, &StakeInfo{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccumulatedEpochRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccumulatedEpochRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccumulatedEpochRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccumulatedEpochRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccumulatedEpochRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccumulatedEpochRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTopicId", wireType)
			}
			m.NextTopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopicsByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopicsByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopicsByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTopicsByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTopicsByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTopicsByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTopicsIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTopicsIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTopicsIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReputer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReputer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredTopicsIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredTopicsIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredTopicsIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TopicsIds = append(m.TopicsIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TopicsIds) == 0 {
					m.TopicsIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TopicsIds = append(m.TopicsIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicsIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesToScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesToScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesToScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesToScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesToScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesToScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferences = append(m.Inferences, &InferenceSetForScoring{})
			if err := m.Inferences[len(m.Inferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredWorkerNodesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredWorkerNodesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredWorkerNodesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredWorkerNodesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredWorkerNodesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredWorkerNodesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &OffchainNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerAddressByP2PKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Libp2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Libp2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerAddressByP2PKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerAddressByP2PKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExistingInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExistingInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExistingInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExistingInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExistingInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExistingInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InferenceRequest == nil {
				m.InferenceRequest = &InferenceRequest{}
			}
			if err := m.InferenceRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandLeft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DemandLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExistingInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExistingInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExistingInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceRequestAndDemandLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceRequestAndDemandLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceRequestAndDemandLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InferenceRequest == nil {
				m.InferenceRequest = &InferenceRequest{}
			}
			if err := m.InferenceRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandLeft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DemandLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExistingInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExistingInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExistingInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceRequests = append(m.InferenceRequests, &InferenceRequestAndDemandLeft{})
			if err := m.InferenceRequests[len(m.InferenceRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicUnmetDemandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicUnmetDemandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicUnmetDemandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicUnmetDemandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicUnmetDemandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicUnmetDemandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DemandLeft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DemandLeft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
