// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	Version                         string                                          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RewardCadence                   int64                                           `protobuf:"varint,2,opt,name=reward_cadence,json=rewardCadence,proto3" json:"reward_cadence,omitempty"`
	MinTopicWeight                  github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,3,opt,name=min_topic_weight,json=minTopicWeight,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"min_topic_weight"`
	MaxTopicsPerBlock               uint64                                          `protobuf:"varint,4,opt,name=max_topics_per_block,json=maxTopicsPerBlock,proto3" json:"max_topics_per_block,omitempty"`
	MaxMissingInferencePercent      github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,5,opt,name=max_missing_inference_percent,json=maxMissingInferencePercent,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"max_missing_inference_percent"`
	RequiredMinimumStake            cosmossdk_io_math.Uint                          `protobuf:"bytes,6,opt,name=required_minimum_stake,json=requiredMinimumStake,proto3,customtype=cosmossdk.io/math.Uint" json:"required_minimum_stake"`
	RemoveStakeDelayWindow          int64                                           `protobuf:"varint,7,opt,name=remove_stake_delay_window,json=removeStakeDelayWindow,proto3" json:"remove_stake_delay_window,omitempty"`
	MinEpochLength                  int64                                           `protobuf:"varint,8,opt,name=min_epoch_length,json=minEpochLength,proto3" json:"min_epoch_length,omitempty"`
	BetaEntropy                     github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,9,opt,name=beta_entropy,json=betaEntropy,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"beta_entropy"`
	LearningRate                    github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,10,opt,name=learning_rate,json=learningRate,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"learning_rate"`
	MaxGradientThreshold            github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,11,opt,name=max_gradient_threshold,json=maxGradientThreshold,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"max_gradient_threshold"`
	MinStakeFraction                github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,12,opt,name=min_stake_fraction,json=minStakeFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"min_stake_fraction"`
	Epsilon                         github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,13,opt,name=epsilon,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"epsilon"`
	PInferenceSynthesis             github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,14,opt,name=p_inference_synthesis,json=pInferenceSynthesis,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_inference_synthesis"`
	PRewardSpread                   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,15,opt,name=p_reward_spread,json=pRewardSpread,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"p_reward_spread"`
	AlphaRegret                     github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,16,opt,name=alpha_regret,json=alphaRegret,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"alpha_regret"`
	MaxUnfulfilledWorkerRequests    uint64                                          `protobuf:"varint,17,opt,name=max_unfulfilled_worker_requests,json=maxUnfulfilledWorkerRequests,proto3" json:"max_unfulfilled_worker_requests,omitempty"`
	MaxUnfulfilledReputerRequests   uint64                                          `protobuf:"varint,18,opt,name=max_unfulfilled_reputer_requests,json=maxUnfulfilledReputerRequests,proto3" json:"max_unfulfilled_reputer_requests,omitempty"`
	TopicRewardStakeImportance      github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,19,opt,name=topic_reward_stake_importance,json=topicRewardStakeImportance,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_stake_importance"`
	TopicRewardFeeRevenueImportance github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,20,opt,name=topic_reward_fee_revenue_importance,json=topicRewardFeeRevenueImportance,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_fee_revenue_importance"`
	// 0.5
	TopicRewardAlpha github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,21,opt,name=topic_reward_alpha,json=topicRewardAlpha,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"topic_reward_alpha"`
	// updates
	TaskRewardAlpha                 github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,22,opt,name=task_reward_alpha,json=taskRewardAlpha,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"task_reward_alpha"`
	ValidatorsVsAlloraPercentReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,23,opt,name=validators_vs_allora_percent_reward,json=validatorsVsAlloraPercentReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"validators_vs_allora_percent_reward"`
	MaxSamplesToScaleScores         uint64                                          `protobuf:"varint,24,opt,name=max_samples_to_scale_scores,json=maxSamplesToScaleScores,proto3" json:"max_samples_to_scale_scores,omitempty"`
	// max this many inferences from unique workers and forecasts thereof are accepted per payload
	MaxTopWorkersToReward           uint64                                          `protobuf:"varint,25,opt,name=max_top_workers_to_reward,json=maxTopWorkersToReward,proto3" json:"max_top_workers_to_reward,omitempty"`
	MaxTopReputersToReward          uint64                                          `protobuf:"varint,26,opt,name=max_top_reputers_to_reward,json=maxTopReputersToReward,proto3" json:"max_top_reputers_to_reward,omitempty"`
	CreateTopicFee                  cosmossdk_io_math.Int                           `protobuf:"bytes,27,opt,name=create_topic_fee,json=createTopicFee,proto3,customtype=cosmossdk.io/math.Int" json:"create_topic_fee"`
	SigmoidA                        github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,28,opt,name=sigmoid_a,json=sigmoidA,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"sigmoid_a"`
	SigmoidB                        github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,29,opt,name=sigmoid_b,json=sigmoidB,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"sigmoid_b"`
	GradientDescentMaxIters         uint64                                          `protobuf:"varint,30,opt,name=gradient_descent_max_iters,json=gradientDescentMaxIters,proto3" json:"gradient_descent_max_iters,omitempty"`
	MaxRetriesToFulfilNoncesWorker  int64                                           `protobuf:"varint,31,opt,name=max_retries_to_fulfil_nonces_worker,json=maxRetriesToFulfilNoncesWorker,proto3" json:"max_retries_to_fulfil_nonces_worker,omitempty"`
	MaxRetriesToFulfilNoncesReputer int64                                           `protobuf:"varint,32,opt,name=max_retries_to_fulfil_nonces_reputer,json=maxRetriesToFulfilNoncesReputer,proto3" json:"max_retries_to_fulfil_nonces_reputer,omitempty"`
	TopicPageLimit                  uint64                                          `protobuf:"varint,33,opt,name=topic_page_limit,json=topicPageLimit,proto3" json:"topic_page_limit,omitempty"`
	MaxTopicPages                   uint64                                          `protobuf:"varint,34,opt,name=max_topic_pages,json=maxTopicPages,proto3" json:"max_topic_pages,omitempty"`
	RegistrationFee                 cosmossdk_io_math.Int                           `protobuf:"bytes,35,opt,name=registration_fee,json=registrationFee,proto3,customtype=cosmossdk.io/math.Int" json:"registration_fee"`
	DefaultLimit                    uint64                                          `protobuf:"varint,36,opt,name=default_limit,json=defaultLimit,proto3" json:"default_limit,omitempty"`
	MaxLimit                        uint64                                          `protobuf:"varint,37,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
	MinEpochLengthRecordLimit       int64                                           `protobuf:"varint,38,opt,name=min_epoch_length_record_limit,json=minEpochLengthRecordLimit,proto3" json:"min_epoch_length_record_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f535e53c00d44458, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Params) GetRewardCadence() int64 {
	if m != nil {
		return m.RewardCadence
	}
	return 0
}

func (m *Params) GetMaxTopicsPerBlock() uint64 {
	if m != nil {
		return m.MaxTopicsPerBlock
	}
	return 0
}

func (m *Params) GetRemoveStakeDelayWindow() int64 {
	if m != nil {
		return m.RemoveStakeDelayWindow
	}
	return 0
}

func (m *Params) GetMinEpochLength() int64 {
	if m != nil {
		return m.MinEpochLength
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledWorkerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledWorkerRequests
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledReputerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledReputerRequests
	}
	return 0
}

func (m *Params) GetMaxSamplesToScaleScores() uint64 {
	if m != nil {
		return m.MaxSamplesToScaleScores
	}
	return 0
}

func (m *Params) GetMaxTopWorkersToReward() uint64 {
	if m != nil {
		return m.MaxTopWorkersToReward
	}
	return 0
}

func (m *Params) GetMaxTopReputersToReward() uint64 {
	if m != nil {
		return m.MaxTopReputersToReward
	}
	return 0
}

func (m *Params) GetGradientDescentMaxIters() uint64 {
	if m != nil {
		return m.GradientDescentMaxIters
	}
	return 0
}

func (m *Params) GetMaxRetriesToFulfilNoncesWorker() int64 {
	if m != nil {
		return m.MaxRetriesToFulfilNoncesWorker
	}
	return 0
}

func (m *Params) GetMaxRetriesToFulfilNoncesReputer() int64 {
	if m != nil {
		return m.MaxRetriesToFulfilNoncesReputer
	}
	return 0
}

func (m *Params) GetTopicPageLimit() uint64 {
	if m != nil {
		return m.TopicPageLimit
	}
	return 0
}

func (m *Params) GetMaxTopicPages() uint64 {
	if m != nil {
		return m.MaxTopicPages
	}
	return 0
}

func (m *Params) GetDefaultLimit() uint64 {
	if m != nil {
		return m.DefaultLimit
	}
	return 0
}

func (m *Params) GetMaxLimit() uint64 {
	if m != nil {
		return m.MaxLimit
	}
	return 0
}

func (m *Params) GetMinEpochLengthRecordLimit() int64 {
	if m != nil {
		return m.MinEpochLengthRecordLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "emissions.v1.Params")
}

func init() { proto.RegisterFile("emissions/v1/params.proto", fileDescriptor_f535e53c00d44458) }

var fileDescriptor_f535e53c00d44458 = []byte{
	// 1193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4d, 0x6f, 0x5c, 0x35,
	0x17, 0xc7, 0x33, 0x4f, 0xfb, 0xb4, 0x8d, 0x9b, 0x57, 0x37, 0x49, 0x9d, 0xb4, 0x99, 0x84, 0xa6,
	0xad, 0x22, 0xa4, 0x66, 0x28, 0x2c, 0x28, 0x2f, 0x0b, 0x1a, 0xda, 0x54, 0x11, 0x0d, 0x0a, 0x37,
	0x29, 0x95, 0x0a, 0x92, 0xe5, 0xdc, 0x7b, 0x66, 0xc6, 0xca, 0xf5, 0xf5, 0xc5, 0xf6, 0x4c, 0x26,
	0xdd, 0xb3, 0xe7, 0x63, 0xb0, 0x64, 0xc1, 0x87, 0xe8, 0xb2, 0x62, 0x85, 0x58, 0x54, 0xa8, 0x11,
	0xe2, 0x6b, 0x20, 0x1f, 0xfb, 0x26, 0x33, 0x45, 0x20, 0xc4, 0x65, 0x53, 0xf5, 0xda, 0xff, 0xf3,
	0x3b, 0x27, 0xe7, 0x1c, 0xfb, 0x78, 0xc8, 0x22, 0x28, 0x69, 0xad, 0xd4, 0x85, 0x6d, 0xf5, 0xef,
	0xb6, 0x4a, 0x61, 0x84, 0xb2, 0x1b, 0xa5, 0xd1, 0x4e, 0xd3, 0x89, 0xd3, 0xad, 0x8d, 0xfe, 0xdd,
	0xa5, 0xc5, 0x54, 0x5b, 0xa5, 0x2d, 0xc7, 0xbd, 0x56, 0xf8, 0x08, 0xc2, 0xa5, 0x59, 0xa1, 0x64,
	0xa1, 0x5b, 0xf8, 0x6f, 0x5c, 0x9a, 0xeb, 0xe8, 0x8e, 0x0e, 0x52, 0xff, 0xbf, 0xb0, 0x7a, 0xe3,
	0xb7, 0xab, 0xe4, 0xc2, 0x2e, 0xba, 0xa0, 0x8c, 0x5c, 0xec, 0x83, 0xf1, 0x74, 0xd6, 0x58, 0x6d,
	0xac, 0x8f, 0x27, 0xd5, 0x27, 0xbd, 0x45, 0xa6, 0x0c, 0x1c, 0x09, 0x93, 0xf1, 0x54, 0x64, 0x50,
	0xa4, 0xc0, 0xfe, 0xb7, 0xda, 0x58, 0x3f, 0x97, 0x4c, 0x86, 0xd5, 0x4f, 0xc3, 0x22, 0x15, 0x64,
	0x46, 0xc9, 0x82, 0x3b, 0x5d, 0xca, 0x94, 0x1f, 0x81, 0xec, 0x74, 0x1d, 0x3b, 0xe7, 0x49, 0x9b,
	0xef, 0xbf, 0x78, 0xb5, 0x32, 0xf6, 0xcb, 0xab, 0x95, 0x56, 0x47, 0xba, 0x6e, 0xef, 0x60, 0x23,
	0xd5, 0xaa, 0x25, 0xf2, 0x5c, 0x1b, 0x71, 0xa7, 0x00, 0x77, 0xa4, 0xcd, 0x61, 0xf5, 0x99, 0x76,
	0x85, 0x2c, 0x5a, 0x4a, 0xb8, 0xee, 0xc6, 0x03, 0x48, 0x93, 0x29, 0x25, 0x8b, 0x7d, 0xcf, 0x7b,
	0x8a, 0x38, 0xda, 0x22, 0x73, 0x4a, 0x0c, 0x82, 0x0b, 0xcb, 0x4b, 0x30, 0xfc, 0x20, 0xd7, 0xe9,
	0x21, 0x3b, 0xbf, 0xda, 0x58, 0x3f, 0x9f, 0xcc, 0x2a, 0x31, 0x40, 0xb5, 0xdd, 0x05, 0xb3, 0xe9,
	0x37, 0xe8, 0x73, 0xb2, 0xec, 0x0d, 0x30, 0x6d, 0x45, 0x87, 0xcb, 0xa2, 0x0d, 0xc6, 0x07, 0xeb,
	0x6d, 0x53, 0x28, 0x1c, 0xfb, 0x7f, 0xbd, 0x00, 0x97, 0x94, 0x18, 0xec, 0x04, 0xf8, 0x76, 0xc5,
	0xde, 0x0d, 0x68, 0xda, 0x25, 0x0b, 0x06, 0xbe, 0xe9, 0x49, 0x03, 0x19, 0x57, 0xb2, 0x90, 0xaa,
	0xa7, 0xb8, 0x75, 0xe2, 0x10, 0xd8, 0x05, 0x74, 0xfa, 0x6e, 0x74, 0xba, 0x10, 0x4a, 0x67, 0xb3,
	0xc3, 0x0d, 0xa9, 0x03, 0xfa, 0x89, 0x2c, 0xdc, 0x4f, 0x3f, 0xde, 0xb9, 0x1c, 0x8b, 0xea, 0x3f,
	0xbf, 0xff, 0xfd, 0x87, 0xb7, 0x1b, 0xc9, 0x5c, 0x45, 0xdc, 0x09, 0xc0, 0x3d, 0xcf, 0xa3, 0x1f,
	0x90, 0x45, 0x03, 0x4a, 0xf7, 0x21, 0xf0, 0x79, 0x06, 0xb9, 0x38, 0xe6, 0x47, 0xb2, 0xc8, 0xf4,
	0x11, 0xbb, 0x88, 0xb5, 0x5a, 0x08, 0x02, 0xd4, 0x3f, 0xf0, 0xdb, 0x4f, 0x71, 0x97, 0xae, 0x87,
	0xa2, 0x41, 0xa9, 0xd3, 0x2e, 0xcf, 0xa1, 0xe8, 0xb8, 0x2e, 0xbb, 0x84, 0x16, 0x3e, 0xf7, 0x0f,
	0xfd, 0xf2, 0x63, 0x5c, 0xa5, 0xcf, 0xc8, 0xc4, 0x01, 0x38, 0xc1, 0xa1, 0x70, 0x46, 0x97, 0xc7,
	0x6c, 0xbc, 0x5e, 0xe6, 0x2e, 0x7b, 0xd8, 0xc3, 0xc0, 0xa2, 0x5f, 0x93, 0xc9, 0x1c, 0x84, 0x29,
	0x7c, 0x8d, 0x8c, 0x70, 0xc0, 0x48, 0x3d, 0xf8, 0x44, 0x45, 0x4b, 0x84, 0x03, 0xaa, 0xc8, 0x82,
	0x6f, 0x82, 0x8e, 0x11, 0x99, 0x84, 0xc2, 0x71, 0xd7, 0x35, 0x60, 0xbb, 0x3a, 0xcf, 0xd8, 0xe5,
	0x7a, 0x6e, 0x7c, 0x33, 0x3e, 0x8a, 0xd4, 0xfd, 0x0a, 0x4a, 0x81, 0x50, 0x9f, 0xd2, 0x50, 0x8a,
	0xb6, 0x11, 0xa9, 0xf3, 0x67, 0x6a, 0xa2, 0x9e, 0x2b, 0x5f, 0x25, 0x2c, 0xde, 0x56, 0x04, 0xd2,
	0x2f, 0xc8, 0x45, 0x28, 0xad, 0xcc, 0x75, 0xc1, 0x26, 0xeb, 0xb1, 0x2b, 0x0e, 0x3d, 0x24, 0xf3,
	0xe5, 0xd0, 0x19, 0xb1, 0xc7, 0x85, 0xeb, 0x82, 0x95, 0x96, 0x4d, 0xd5, 0x73, 0x70, 0xa5, 0x3c,
	0x3d, 0x1c, 0x7b, 0x15, 0x93, 0x72, 0x32, 0x5d, 0xf2, 0x78, 0xaf, 0xd8, 0xd2, 0x80, 0xc8, 0xd8,
	0x74, 0x3d, 0x37, 0x93, 0x65, 0x82, 0xb8, 0x3d, 0xa4, 0xf9, 0x86, 0x15, 0x79, 0xd9, 0x15, 0xdc,
	0x40, 0xc7, 0x80, 0x63, 0x33, 0x35, 0x1b, 0x16, 0x61, 0x09, 0xb2, 0xe8, 0x43, 0xb2, 0xe2, 0x5b,
	0xaa, 0x57, 0xb4, 0x7b, 0x79, 0x5b, 0xe6, 0x39, 0x64, 0xdc, 0x9b, 0x82, 0xe1, 0xfe, 0x80, 0x82,
	0x75, 0x96, 0xcd, 0xe2, 0x9d, 0x74, 0x5d, 0x89, 0xc1, 0x93, 0x33, 0xd5, 0x53, 0x14, 0x25, 0x51,
	0x43, 0x1f, 0x91, 0xd5, 0x37, 0x31, 0x06, 0xca, 0x9e, 0x1b, 0xe6, 0x50, 0xe4, 0x2c, 0x8f, 0x72,
	0x92, 0xa0, 0x3a, 0x05, 0x3d, 0x27, 0xcb, 0xe1, 0xde, 0xad, 0x12, 0x8a, 0xcd, 0x27, 0x55, 0xa9,
	0x8d, 0x13, 0xfe, 0xc6, 0xbe, 0x52, 0xf3, 0x9e, 0x43, 0x7a, 0x4c, 0xaf, 0x67, 0x6f, 0x9f, 0xa2,
	0xe9, 0xb7, 0x0d, 0xb2, 0x36, 0xe2, 0xbc, 0x0d, 0xc0, 0x0d, 0xf4, 0xa1, 0xe8, 0x8d, 0x84, 0x30,
	0x57, 0x2f, 0x84, 0x95, 0xa1, 0x10, 0xb6, 0x00, 0x92, 0xe0, 0x60, 0x28, 0x0e, 0x20, 0x74, 0x24,
	0x0c, 0xac, 0x17, 0x9b, 0xaf, 0x79, 0xee, 0x86, 0xbc, 0xde, 0xf7, 0x40, 0x9a, 0x92, 0x59, 0x27,
	0xec, 0xe1, 0xa8, 0x97, 0x85, 0x7a, 0x5e, 0xa6, 0x3d, 0x71, 0xd8, 0x89, 0xcf, 0x69, 0x5f, 0xe4,
	0x32, 0x13, 0x4e, 0x1b, 0xcb, 0xfb, 0x96, 0x07, 0xc3, 0x6a, 0x6e, 0x45, 0xef, 0xec, 0x6a, 0xcd,
	0x9c, 0x9e, 0xf9, 0xf8, 0xd2, 0xde, 0x47, 0x49, 0x9c, 0x5e, 0x21, 0x18, 0xfa, 0x31, 0xb9, 0xe6,
	0x1b, 0xd4, 0x0a, 0x55, 0xe6, 0x60, 0xb9, 0xd3, 0xdc, 0xa6, 0x22, 0x07, 0x6e, 0x53, 0x6d, 0xc0,
	0x32, 0x86, 0xbd, 0x79, 0x55, 0x89, 0xc1, 0x5e, 0x50, 0xec, 0xeb, 0x3d, 0xbf, 0xbf, 0x87, 0xdb,
	0xf4, 0x1e, 0x59, 0x8c, 0xe3, 0x3a, 0x9e, 0x0e, 0x24, 0xc4, 0xd0, 0x17, 0xd1, 0x76, 0x3e, 0xcc,
	0xec, 0x70, 0x2e, 0xec, 0xbe, 0x8e, 0x7e, 0x3f, 0x24, 0x4b, 0x95, 0x65, 0x3c, 0x10, 0xc3, 0xa6,
	0x4b, 0x68, 0xba, 0x10, 0x4c, 0xe3, 0x51, 0x38, 0xb3, 0x7d, 0x46, 0x66, 0x52, 0x03, 0xc2, 0x41,
	0x7c, 0x8a, 0xb4, 0x01, 0xd8, 0x35, 0xcc, 0xd3, 0x3b, 0x31, 0x4f, 0xf3, 0x7f, 0x9e, 0xb8, 0xdb,
	0x38, 0x70, 0x49, 0x1c, 0xb8, 0xdb, 0xd5, 0xbc, 0x9d, 0x0a, 0x24, 0x7c, 0x55, 0x6c, 0x01, 0xd0,
	0x7d, 0x32, 0x6e, 0x65, 0x47, 0x69, 0x99, 0x71, 0xc1, 0xae, 0xd7, 0x4b, 0xfe, 0xa5, 0x48, 0xba,
	0x3f, 0x4c, 0x3d, 0x60, 0xcb, 0xff, 0x0d, 0x75, 0x93, 0x7e, 0x44, 0x96, 0x4e, 0x47, 0x5e, 0x06,
	0x16, 0xdb, 0xc6, 0x27, 0x55, 0xfa, 0x6c, 0xb1, 0x66, 0x28, 0x5d, 0xa5, 0x78, 0x10, 0x04, 0x3b,
	0x62, 0xb0, 0xed, 0xb7, 0xe9, 0x67, 0x64, 0xcd, 0x6b, 0x0d, 0x38, 0x23, 0x43, 0xe1, 0xc3, 0xdd,
	0xc3, 0x0b, 0x5d, 0xa4, 0x60, 0x63, 0x3d, 0xd9, 0x0a, 0x3e, 0x15, 0x9a, 0x4a, 0x0c, 0x92, 0xa0,
	0xdc, 0xd7, 0x5b, 0xa8, 0xfb, 0x1c, 0x65, 0xa1, 0xac, 0x74, 0x87, 0xdc, 0xfc, 0x5b, 0x58, 0x2c,
	0x31, 0x5b, 0x45, 0xda, 0xca, 0x5f, 0xd1, 0x62, 0xa5, 0xfd, 0x9b, 0x25, 0x54, 0xb6, 0x14, 0x1d,
	0xe0, 0xb9, 0x54, 0xd2, 0xb1, 0xb7, 0xf0, 0xcf, 0x99, 0xc2, 0xf5, 0x5d, 0xd1, 0x81, 0xc7, 0x7e,
	0x95, 0xde, 0x26, 0xd3, 0xa7, 0xef, 0x45, 0x54, 0x5b, 0x76, 0x03, 0x85, 0x93, 0xd5, 0x53, 0xd1,
	0x6b, 0x2d, 0xfd, 0x8a, 0xcc, 0x18, 0xe8, 0x48, 0xeb, 0x8c, 0xf0, 0xb3, 0x15, 0x5b, 0x66, 0xed,
	0x5f, 0xb6, 0xcc, 0xf4, 0x30, 0xc9, 0xf7, 0xcc, 0x1a, 0x99, 0xcc, 0xa0, 0x2d, 0x7a, 0xb9, 0x8b,
	0xb1, 0xde, 0xc4, 0x10, 0x26, 0xe2, 0x62, 0x88, 0xf4, 0x1a, 0x19, 0xf7, 0x91, 0x06, 0xc1, 0x2d,
	0x14, 0x5c, 0x52, 0x62, 0x10, 0x36, 0x3f, 0x21, 0xcb, 0x6f, 0x3e, 0xd2, 0xb8, 0x81, 0x54, 0x9b,
	0x2c, 0x1a, 0xdc, 0xc6, 0xc4, 0x2d, 0x8e, 0xbe, 0xd8, 0x12, 0x54, 0x20, 0x61, 0x33, 0x79, 0xf1,
	0xba, 0xd9, 0x78, 0xf9, 0xba, 0xd9, 0xf8, 0xf5, 0x75, 0xb3, 0xf1, 0xdd, 0x49, 0x73, 0xec, 0xe5,
	0x49, 0x73, 0xec, 0xe7, 0x93, 0xe6, 0xd8, 0xb3, 0x7b, 0xff, 0xb0, 0xc1, 0x06, 0xad, 0xb3, 0xdf,
	0x25, 0xee, 0xb8, 0x04, 0x7b, 0x70, 0x01, 0x7f, 0x42, 0xbc, 0xf7, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa2, 0x24, 0xde, 0x78, 0xb1, 0x0c, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinEpochLengthRecordLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinEpochLengthRecordLimit))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.MaxLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxLimit))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.DefaultLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultLimit))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	{
		size := m.RegistrationFee.Size()
		i -= size
		if _, err := m.RegistrationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	if m.MaxTopicPages != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopicPages))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.TopicPageLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TopicPageLimit))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.MaxRetriesToFulfilNoncesReputer != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxRetriesToFulfilNoncesReputer))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.MaxRetriesToFulfilNoncesWorker != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxRetriesToFulfilNoncesWorker))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.GradientDescentMaxIters != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.GradientDescentMaxIters))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	{
		size := m.SigmoidB.Size()
		i -= size
		if _, err := m.SigmoidB.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	{
		size := m.SigmoidA.Size()
		i -= size
		if _, err := m.SigmoidA.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	{
		size := m.CreateTopicFee.Size()
		i -= size
		if _, err := m.CreateTopicFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if m.MaxTopReputersToReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopReputersToReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxTopWorkersToReward != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopWorkersToReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.MaxSamplesToScaleScores != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSamplesToScaleScores))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	{
		size := m.ValidatorsVsAlloraPercentReward.Size()
		i -= size
		if _, err := m.ValidatorsVsAlloraPercentReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.TaskRewardAlpha.Size()
		i -= size
		if _, err := m.TaskRewardAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.TopicRewardAlpha.Size()
		i -= size
		if _, err := m.TopicRewardAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.TopicRewardFeeRevenueImportance.Size()
		i -= size
		if _, err := m.TopicRewardFeeRevenueImportance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.TopicRewardStakeImportance.Size()
		i -= size
		if _, err := m.TopicRewardStakeImportance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.MaxUnfulfilledReputerRequests != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxUnfulfilledReputerRequests))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.MaxUnfulfilledWorkerRequests != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxUnfulfilledWorkerRequests))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size := m.AlphaRegret.Size()
		i -= size
		if _, err := m.AlphaRegret.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.PRewardSpread.Size()
		i -= size
		if _, err := m.PRewardSpread.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.PInferenceSynthesis.Size()
		i -= size
		if _, err := m.PInferenceSynthesis.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.Epsilon.Size()
		i -= size
		if _, err := m.Epsilon.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.MinStakeFraction.Size()
		i -= size
		if _, err := m.MinStakeFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.MaxGradientThreshold.Size()
		i -= size
		if _, err := m.MaxGradientThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.LearningRate.Size()
		i -= size
		if _, err := m.LearningRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.BetaEntropy.Size()
		i -= size
		if _, err := m.BetaEntropy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.MinEpochLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinEpochLength))
		i--
		dAtA[i] = 0x40
	}
	if m.RemoveStakeDelayWindow != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RemoveStakeDelayWindow))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.RequiredMinimumStake.Size()
		i -= size
		if _, err := m.RequiredMinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxMissingInferencePercent.Size()
		i -= size
		if _, err := m.MaxMissingInferencePercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTopicsPerBlock != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxTopicsPerBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinTopicWeight.Size()
		i -= size
		if _, err := m.MinTopicWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardCadence != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.RewardCadence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.RewardCadence != 0 {
		n += 1 + sovParams(uint64(m.RewardCadence))
	}
	l = m.MinTopicWeight.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxTopicsPerBlock != 0 {
		n += 1 + sovParams(uint64(m.MaxTopicsPerBlock))
	}
	l = m.MaxMissingInferencePercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.RequiredMinimumStake.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.RemoveStakeDelayWindow != 0 {
		n += 1 + sovParams(uint64(m.RemoveStakeDelayWindow))
	}
	if m.MinEpochLength != 0 {
		n += 1 + sovParams(uint64(m.MinEpochLength))
	}
	l = m.BetaEntropy.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.LearningRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxGradientThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinStakeFraction.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Epsilon.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PInferenceSynthesis.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.PRewardSpread.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AlphaRegret.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.MaxUnfulfilledWorkerRequests != 0 {
		n += 2 + sovParams(uint64(m.MaxUnfulfilledWorkerRequests))
	}
	if m.MaxUnfulfilledReputerRequests != 0 {
		n += 2 + sovParams(uint64(m.MaxUnfulfilledReputerRequests))
	}
	l = m.TopicRewardStakeImportance.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TopicRewardFeeRevenueImportance.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TopicRewardAlpha.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TaskRewardAlpha.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ValidatorsVsAlloraPercentReward.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.MaxSamplesToScaleScores != 0 {
		n += 2 + sovParams(uint64(m.MaxSamplesToScaleScores))
	}
	if m.MaxTopWorkersToReward != 0 {
		n += 2 + sovParams(uint64(m.MaxTopWorkersToReward))
	}
	if m.MaxTopReputersToReward != 0 {
		n += 2 + sovParams(uint64(m.MaxTopReputersToReward))
	}
	l = m.CreateTopicFee.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SigmoidA.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.SigmoidB.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.GradientDescentMaxIters != 0 {
		n += 2 + sovParams(uint64(m.GradientDescentMaxIters))
	}
	if m.MaxRetriesToFulfilNoncesWorker != 0 {
		n += 2 + sovParams(uint64(m.MaxRetriesToFulfilNoncesWorker))
	}
	if m.MaxRetriesToFulfilNoncesReputer != 0 {
		n += 2 + sovParams(uint64(m.MaxRetriesToFulfilNoncesReputer))
	}
	if m.TopicPageLimit != 0 {
		n += 2 + sovParams(uint64(m.TopicPageLimit))
	}
	if m.MaxTopicPages != 0 {
		n += 2 + sovParams(uint64(m.MaxTopicPages))
	}
	l = m.RegistrationFee.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.DefaultLimit != 0 {
		n += 2 + sovParams(uint64(m.DefaultLimit))
	}
	if m.MaxLimit != 0 {
		n += 2 + sovParams(uint64(m.MaxLimit))
	}
	if m.MinEpochLengthRecordLimit != 0 {
		n += 2 + sovParams(uint64(m.MinEpochLengthRecordLimit))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCadence", wireType)
			}
			m.RewardCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCadence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTopicWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTopicWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopicsPerBlock", wireType)
			}
			m.MaxTopicsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopicsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMissingInferencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMissingInferencePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredMinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredMinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveStakeDelayWindow", wireType)
			}
			m.RemoveStakeDelayWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveStakeDelayWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochLength", wireType)
			}
			m.MinEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaEntropy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetaEntropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LearningRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGradientThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxGradientThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStakeFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epsilon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PInferenceSynthesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PInferenceSynthesis.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PRewardSpread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PRewardSpread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaRegret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AlphaRegret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledWorkerRequests", wireType)
			}
			m.MaxUnfulfilledWorkerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledWorkerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledReputerRequests", wireType)
			}
			m.MaxUnfulfilledReputerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledReputerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardStakeImportance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardStakeImportance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardFeeRevenueImportance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardFeeRevenueImportance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TopicRewardAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskRewardAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskRewardAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsVsAlloraPercentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsVsAlloraPercentReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSamplesToScaleScores", wireType)
			}
			m.MaxSamplesToScaleScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSamplesToScaleScores |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopWorkersToReward", wireType)
			}
			m.MaxTopWorkersToReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopWorkersToReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopReputersToReward", wireType)
			}
			m.MaxTopReputersToReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopReputersToReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTopicFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreateTopicFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigmoidA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigmoidA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigmoidB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigmoidB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradientDescentMaxIters", wireType)
			}
			m.GradientDescentMaxIters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GradientDescentMaxIters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetriesToFulfilNoncesWorker", wireType)
			}
			m.MaxRetriesToFulfilNoncesWorker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetriesToFulfilNoncesWorker |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetriesToFulfilNoncesReputer", wireType)
			}
			m.MaxRetriesToFulfilNoncesReputer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetriesToFulfilNoncesReputer |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicPageLimit", wireType)
			}
			m.TopicPageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicPageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopicPages", wireType)
			}
			m.MaxTopicPages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopicPages |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RegistrationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLimit", wireType)
			}
			m.DefaultLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLimit", wireType)
			}
			m.MaxLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochLengthRecordLimit", wireType)
			}
			m.MinEpochLengthRecordLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEpochLengthRecordLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
