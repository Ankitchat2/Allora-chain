// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v1/types.proto

package types

import (
	bytes "bytes"
	cosmossdk_io_math "cosmossdk.io/math"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	Version                       string                      `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RewardCadence                 int64                       `protobuf:"varint,2,opt,name=reward_cadence,json=rewardCadence,proto3" json:"reward_cadence,omitempty"`
	MinTopicUnmetDemand           cosmossdk_io_math.Uint      `protobuf:"bytes,3,opt,name=min_topic_unmet_demand,json=minTopicUnmetDemand,proto3,customtype=cosmossdk.io/math.Uint" json:"min_topic_unmet_demand"`
	MaxTopicsPerBlock             uint64                      `protobuf:"varint,4,opt,name=max_topics_per_block,json=maxTopicsPerBlock,proto3" json:"max_topics_per_block,omitempty"`
	MinRequestUnmetDemand         cosmossdk_io_math.Uint      `protobuf:"bytes,5,opt,name=min_request_unmet_demand,json=minRequestUnmetDemand,proto3,customtype=cosmossdk.io/math.Uint" json:"min_request_unmet_demand"`
	MaxMissingInferencePercent    cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=max_missing_inference_percent,json=maxMissingInferencePercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_missing_inference_percent"`
	RequiredMinimumStake          cosmossdk_io_math.Uint      `protobuf:"bytes,7,opt,name=required_minimum_stake,json=requiredMinimumStake,proto3,customtype=cosmossdk.io/math.Uint" json:"required_minimum_stake"`
	RemoveStakeDelayWindow        uint64                      `protobuf:"varint,8,opt,name=remove_stake_delay_window,json=removeStakeDelayWindow,proto3" json:"remove_stake_delay_window,omitempty"`
	MinRequestCadence             uint64                      `protobuf:"varint,9,opt,name=min_request_cadence,json=minRequestCadence,proto3" json:"min_request_cadence,omitempty"`
	MinLossCadence                uint64                      `protobuf:"varint,10,opt,name=min_loss_cadence,json=minLossCadence,proto3" json:"min_loss_cadence,omitempty"`
	MaxInferenceRequestValidity   uint64                      `protobuf:"varint,11,opt,name=max_inference_request_validity,json=maxInferenceRequestValidity,proto3" json:"max_inference_request_validity,omitempty"`
	MaxRequestCadence             uint64                      `protobuf:"varint,12,opt,name=max_request_cadence,json=maxRequestCadence,proto3" json:"max_request_cadence,omitempty"`
	PercentRewardsReputersWorkers cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=percent_rewards_reputers_workers,json=percentRewardsReputersWorkers,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"percent_rewards_reputers_workers"`
	Sharpness                     uint64                      `protobuf:"varint,15,opt,name=sharpness,proto3" json:"sharpness,omitempty"`
	// above-average stake holders at high values
	BetaEntropy          float32 `protobuf:"fixed32,16,opt,name=beta_entropy,json=betaEntropy,proto3" json:"beta_entropy,omitempty"`
	DcoefAbs             float32 `protobuf:"fixed32,17,opt,name=dcoef_abs,json=dcoefAbs,proto3" json:"dcoef_abs,omitempty"`
	LearningRate         float32 `protobuf:"fixed32,18,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	MaxGradientThreshold float32 `protobuf:"fixed32,19,opt,name=max_gradient_threshold,json=maxGradientThreshold,proto3" json:"max_gradient_threshold,omitempty"`
	MinStakeFraction     float32 `protobuf:"fixed32,20,opt,name=min_stake_fraction,json=minStakeFraction,proto3" json:"min_stake_fraction,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Params) GetRewardCadence() int64 {
	if m != nil {
		return m.RewardCadence
	}
	return 0
}

func (m *Params) GetMaxTopicsPerBlock() uint64 {
	if m != nil {
		return m.MaxTopicsPerBlock
	}
	return 0
}

func (m *Params) GetRemoveStakeDelayWindow() uint64 {
	if m != nil {
		return m.RemoveStakeDelayWindow
	}
	return 0
}

func (m *Params) GetMinRequestCadence() uint64 {
	if m != nil {
		return m.MinRequestCadence
	}
	return 0
}

func (m *Params) GetMinLossCadence() uint64 {
	if m != nil {
		return m.MinLossCadence
	}
	return 0
}

func (m *Params) GetMaxInferenceRequestValidity() uint64 {
	if m != nil {
		return m.MaxInferenceRequestValidity
	}
	return 0
}

func (m *Params) GetMaxRequestCadence() uint64 {
	if m != nil {
		return m.MaxRequestCadence
	}
	return 0
}

func (m *Params) GetSharpness() uint64 {
	if m != nil {
		return m.Sharpness
	}
	return 0
}

func (m *Params) GetBetaEntropy() float32 {
	if m != nil {
		return m.BetaEntropy
	}
	return 0
}

func (m *Params) GetDcoefAbs() float32 {
	if m != nil {
		return m.DcoefAbs
	}
	return 0
}

func (m *Params) GetLearningRate() float32 {
	if m != nil {
		return m.LearningRate
	}
	return 0
}

func (m *Params) GetMaxGradientThreshold() float32 {
	if m != nil {
		return m.MaxGradientThreshold
	}
	return 0
}

func (m *Params) GetMinStakeFraction() float32 {
	if m != nil {
		return m.MinStakeFraction
	}
	return 0
}

type Topic struct {
	Id                     uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string  `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Metadata               string  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LossLogic              string  `protobuf:"bytes,4,opt,name=loss_logic,json=lossLogic,proto3" json:"loss_logic,omitempty"`
	LossMethod             string  `protobuf:"bytes,5,opt,name=loss_method,json=lossMethod,proto3" json:"loss_method,omitempty"`
	LossCadence            uint64  `protobuf:"varint,6,opt,name=loss_cadence,json=lossCadence,proto3" json:"loss_cadence,omitempty"`
	LossLastRan            uint64  `protobuf:"varint,7,opt,name=loss_last_ran,json=lossLastRan,proto3" json:"loss_last_ran,omitempty"`
	InferenceLogic         string  `protobuf:"bytes,8,opt,name=inference_logic,json=inferenceLogic,proto3" json:"inference_logic,omitempty"`
	InferenceMethod        string  `protobuf:"bytes,9,opt,name=inference_method,json=inferenceMethod,proto3" json:"inference_method,omitempty"`
	InferenceCadence       uint64  `protobuf:"varint,10,opt,name=inference_cadence,json=inferenceCadence,proto3" json:"inference_cadence,omitempty"`
	InferenceLastRan       uint64  `protobuf:"varint,11,opt,name=inference_last_ran,json=inferenceLastRan,proto3" json:"inference_last_ran,omitempty"`
	Active                 bool    `protobuf:"varint,12,opt,name=active,proto3" json:"active,omitempty"`
	DefaultArg             string  `protobuf:"bytes,13,opt,name=default_arg,json=defaultArg,proto3" json:"default_arg,omitempty"`
	Pnorm                  uint64  `protobuf:"varint,14,opt,name=pnorm,proto3" json:"pnorm,omitempty"`
	AlphaRegret            float32 `protobuf:"fixed32,15,opt,name=alpha_regret,json=alphaRegret,proto3" json:"alpha_regret,omitempty"`
	PrewardReputer         float32 `protobuf:"fixed32,16,opt,name=preward_reputer,json=prewardReputer,proto3" json:"preward_reputer,omitempty"`
	PrewardInference       float32 `protobuf:"fixed32,17,opt,name=preward_inference,json=prewardInference,proto3" json:"preward_inference,omitempty"`
	PrewardForecast        float32 `protobuf:"fixed32,18,opt,name=preward_forecast,json=prewardForecast,proto3" json:"preward_forecast,omitempty"`
	FTolerance             float32 `protobuf:"fixed32,19,opt,name=f_tolerance,json=fTolerance,proto3" json:"f_tolerance,omitempty"`
	Subsidy                uint64  `protobuf:"varint,20,opt,name=subsidy,proto3" json:"subsidy,omitempty"`
	SubsidizedRewardEpochs float32 `protobuf:"fixed32,21,opt,name=subsidized_reward_epochs,json=subsidizedRewardEpochs,proto3" json:"subsidized_reward_epochs,omitempty"`
	FTreasury              float32 `protobuf:"fixed32,22,opt,name=f_treasury,json=fTreasury,proto3" json:"f_treasury,omitempty"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{1}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Topic) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Topic) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Topic) GetLossLogic() string {
	if m != nil {
		return m.LossLogic
	}
	return ""
}

func (m *Topic) GetLossMethod() string {
	if m != nil {
		return m.LossMethod
	}
	return ""
}

func (m *Topic) GetLossCadence() uint64 {
	if m != nil {
		return m.LossCadence
	}
	return 0
}

func (m *Topic) GetLossLastRan() uint64 {
	if m != nil {
		return m.LossLastRan
	}
	return 0
}

func (m *Topic) GetInferenceLogic() string {
	if m != nil {
		return m.InferenceLogic
	}
	return ""
}

func (m *Topic) GetInferenceMethod() string {
	if m != nil {
		return m.InferenceMethod
	}
	return ""
}

func (m *Topic) GetInferenceCadence() uint64 {
	if m != nil {
		return m.InferenceCadence
	}
	return 0
}

func (m *Topic) GetInferenceLastRan() uint64 {
	if m != nil {
		return m.InferenceLastRan
	}
	return 0
}

func (m *Topic) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Topic) GetDefaultArg() string {
	if m != nil {
		return m.DefaultArg
	}
	return ""
}

func (m *Topic) GetPnorm() uint64 {
	if m != nil {
		return m.Pnorm
	}
	return 0
}

func (m *Topic) GetAlphaRegret() float32 {
	if m != nil {
		return m.AlphaRegret
	}
	return 0
}

func (m *Topic) GetPrewardReputer() float32 {
	if m != nil {
		return m.PrewardReputer
	}
	return 0
}

func (m *Topic) GetPrewardInference() float32 {
	if m != nil {
		return m.PrewardInference
	}
	return 0
}

func (m *Topic) GetPrewardForecast() float32 {
	if m != nil {
		return m.PrewardForecast
	}
	return 0
}

func (m *Topic) GetFTolerance() float32 {
	if m != nil {
		return m.FTolerance
	}
	return 0
}

func (m *Topic) GetSubsidy() uint64 {
	if m != nil {
		return m.Subsidy
	}
	return 0
}

func (m *Topic) GetSubsidizedRewardEpochs() float32 {
	if m != nil {
		return m.SubsidizedRewardEpochs
	}
	return 0
}

func (m *Topic) GetFTreasury() float32 {
	if m != nil {
		return m.FTreasury
	}
	return 0
}

type TopicList struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *TopicList) Reset()         { *m = TopicList{} }
func (m *TopicList) String() string { return proto.CompactTextString(m) }
func (*TopicList) ProtoMessage()    {}
func (*TopicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{2}
}
func (m *TopicList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicList.Merge(m, src)
}
func (m *TopicList) XXX_Size() int {
	return m.Size()
}
func (m *TopicList) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicList.DiscardUnknown(m)
}

var xxx_messageInfo_TopicList proto.InternalMessageInfo

func (m *TopicList) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type WorkerAttributedLoss struct {
	Worker    string                 `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Value     cosmossdk_io_math.Uint `protobuf:"bytes,2,opt,name=value,proto3,customtype=cosmossdk.io/math.Uint" json:"value"`
	ExtraData []byte                 `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *WorkerAttributedLoss) Reset()         { *m = WorkerAttributedLoss{} }
func (m *WorkerAttributedLoss) String() string { return proto.CompactTextString(m) }
func (*WorkerAttributedLoss) ProtoMessage()    {}
func (*WorkerAttributedLoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{3}
}
func (m *WorkerAttributedLoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerAttributedLoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerAttributedLoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerAttributedLoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerAttributedLoss.Merge(m, src)
}
func (m *WorkerAttributedLoss) XXX_Size() int {
	return m.Size()
}
func (m *WorkerAttributedLoss) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerAttributedLoss.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerAttributedLoss proto.InternalMessageInfo

func (m *WorkerAttributedLoss) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WorkerAttributedLoss) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

// eq13 in the litepaper
type LossBundle struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer   string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	ExtraData []byte `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// L_im
	CombinedLoss cosmossdk_io_math.Uint `protobuf:"bytes,4,opt,name=combined_loss,json=combinedLoss,proto3,customtype=cosmossdk.io/math.Uint" json:"combined_loss"`
	// L_ijm
	InfererLosses []*WorkerAttributedLoss `protobuf:"bytes,5,rep,name=inferer_losses,json=infererLosses,proto3" json:"inferer_losses,omitempty"`
	// L_ikm
	ForecasterLosses []*WorkerAttributedLoss `protobuf:"bytes,6,rep,name=forecaster_losses,json=forecasterLosses,proto3" json:"forecaster_losses,omitempty"`
	// L^-_im
	NaiveLoss cosmossdk_io_math.Uint `protobuf:"bytes,7,opt,name=naive_loss,json=naiveLoss,proto3,customtype=cosmossdk.io/math.Uint" json:"naive_loss"`
	// L^-_lim
	OneOutLosses []*WorkerAttributedLoss `protobuf:"bytes,8,rep,name=one_out_losses,json=oneOutLosses,proto3" json:"one_out_losses,omitempty"`
	// L^+_kim
	OneInNaiveLosses []*WorkerAttributedLoss `protobuf:"bytes,9,rep,name=one_in_naive_losses,json=oneInNaiveLosses,proto3" json:"one_in_naive_losses,omitempty"`
}

func (m *LossBundle) Reset()         { *m = LossBundle{} }
func (m *LossBundle) String() string { return proto.CompactTextString(m) }
func (*LossBundle) ProtoMessage()    {}
func (*LossBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{4}
}
func (m *LossBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LossBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LossBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LossBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossBundle.Merge(m, src)
}
func (m *LossBundle) XXX_Size() int {
	return m.Size()
}
func (m *LossBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_LossBundle.DiscardUnknown(m)
}

var xxx_messageInfo_LossBundle proto.InternalMessageInfo

func (m *LossBundle) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *LossBundle) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *LossBundle) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *LossBundle) GetInfererLosses() []*WorkerAttributedLoss {
	if m != nil {
		return m.InfererLosses
	}
	return nil
}

func (m *LossBundle) GetForecasterLosses() []*WorkerAttributedLoss {
	if m != nil {
		return m.ForecasterLosses
	}
	return nil
}

func (m *LossBundle) GetOneOutLosses() []*WorkerAttributedLoss {
	if m != nil {
		return m.OneOutLosses
	}
	return nil
}

func (m *LossBundle) GetOneInNaiveLosses() []*WorkerAttributedLoss {
	if m != nil {
		return m.OneInNaiveLosses
	}
	return nil
}

type LossBundles struct {
	LossBundles []*LossBundle `protobuf:"bytes,1,rep,name=loss_bundles,json=lossBundles,proto3" json:"loss_bundles,omitempty"`
}

func (m *LossBundles) Reset()         { *m = LossBundles{} }
func (m *LossBundles) String() string { return proto.CompactTextString(m) }
func (*LossBundles) ProtoMessage()    {}
func (*LossBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{5}
}
func (m *LossBundles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LossBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LossBundles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LossBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossBundles.Merge(m, src)
}
func (m *LossBundles) XXX_Size() int {
	return m.Size()
}
func (m *LossBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_LossBundles.DiscardUnknown(m)
}

var xxx_messageInfo_LossBundles proto.InternalMessageInfo

func (m *LossBundles) GetLossBundles() []*LossBundle {
	if m != nil {
		return m.LossBundles
	}
	return nil
}

type Inference struct {
	TopicId   uint64                 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker    string                 `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	Value     cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=value,proto3,customtype=cosmossdk.io/math.Uint" json:"value"`
	ExtraData []byte                 `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Proof     string                 `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Inference) Reset()         { *m = Inference{} }
func (m *Inference) String() string { return proto.CompactTextString(m) }
func (*Inference) ProtoMessage()    {}
func (*Inference) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{6}
}
func (m *Inference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inference.Merge(m, src)
}
func (m *Inference) XXX_Size() int {
	return m.Size()
}
func (m *Inference) XXX_DiscardUnknown() {
	xxx_messageInfo_Inference.DiscardUnknown(m)
}

var xxx_messageInfo_Inference proto.InternalMessageInfo

func (m *Inference) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Inference) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *Inference) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *Inference) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Inferences struct {
	Inferences []*Inference `protobuf:"bytes,1,rep,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *Inferences) Reset()         { *m = Inferences{} }
func (m *Inferences) String() string { return proto.CompactTextString(m) }
func (*Inferences) ProtoMessage()    {}
func (*Inferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{7}
}
func (m *Inferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inferences.Merge(m, src)
}
func (m *Inferences) XXX_Size() int {
	return m.Size()
}
func (m *Inferences) XXX_DiscardUnknown() {
	xxx_messageInfo_Inferences.DiscardUnknown(m)
}

var xxx_messageInfo_Inferences proto.InternalMessageInfo

func (m *Inferences) GetInferences() []*Inference {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type ForecastElement struct {
	Inferer   string                 `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
	Value     cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=value,proto3,customtype=cosmossdk.io/math.Uint" json:"value"`
	ExtraData []byte                 `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Proof     string                 `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ForecastElement) Reset()         { *m = ForecastElement{} }
func (m *ForecastElement) String() string { return proto.CompactTextString(m) }
func (*ForecastElement) ProtoMessage()    {}
func (*ForecastElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{8}
}
func (m *ForecastElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecastElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForecastElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForecastElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastElement.Merge(m, src)
}
func (m *ForecastElement) XXX_Size() int {
	return m.Size()
}
func (m *ForecastElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastElement.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastElement proto.InternalMessageInfo

func (m *ForecastElement) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

func (m *ForecastElement) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ForecastElement) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Forecast struct {
	TopicId          uint64             `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster       string             `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	ForecastElements []*ForecastElement `protobuf:"bytes,3,rep,name=forecast_elements,json=forecastElements,proto3" json:"forecast_elements,omitempty"`
}

func (m *Forecast) Reset()         { *m = Forecast{} }
func (m *Forecast) String() string { return proto.CompactTextString(m) }
func (*Forecast) ProtoMessage()    {}
func (*Forecast) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{9}
}
func (m *Forecast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecast.Merge(m, src)
}
func (m *Forecast) XXX_Size() int {
	return m.Size()
}
func (m *Forecast) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecast.DiscardUnknown(m)
}

var xxx_messageInfo_Forecast proto.InternalMessageInfo

func (m *Forecast) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Forecast) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *Forecast) GetForecastElements() []*ForecastElement {
	if m != nil {
		return m.ForecastElements
	}
	return nil
}

type Forecasts struct {
	Forecasts []*Forecast `protobuf:"bytes,1,rep,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *Forecasts) Reset()         { *m = Forecasts{} }
func (m *Forecasts) String() string { return proto.CompactTextString(m) }
func (*Forecasts) ProtoMessage()    {}
func (*Forecasts) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{10}
}
func (m *Forecasts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecasts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecasts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecasts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecasts.Merge(m, src)
}
func (m *Forecasts) XXX_Size() int {
	return m.Size()
}
func (m *Forecasts) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecasts.DiscardUnknown(m)
}

var xxx_messageInfo_Forecasts proto.InternalMessageInfo

func (m *Forecasts) GetForecasts() []*Forecast {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type OffchainNode struct {
	LibP2PKey    string `protobuf:"bytes,1,opt,name=lib_p2p_key,json=libP2pKey,proto3" json:"lib_p2p_key,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multi_address,json=multiAddress,proto3" json:"multi_address,omitempty"`
	Owner        string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	NodeAddress  string `protobuf:"bytes,4,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	NodeId       string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *OffchainNode) Reset()         { *m = OffchainNode{} }
func (m *OffchainNode) String() string { return proto.CompactTextString(m) }
func (*OffchainNode) ProtoMessage()    {}
func (*OffchainNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{11}
}
func (m *OffchainNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffchainNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffchainNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffchainNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffchainNode.Merge(m, src)
}
func (m *OffchainNode) XXX_Size() int {
	return m.Size()
}
func (m *OffchainNode) XXX_DiscardUnknown() {
	xxx_messageInfo_OffchainNode.DiscardUnknown(m)
}

var xxx_messageInfo_OffchainNode proto.InternalMessageInfo

func (m *OffchainNode) GetLibP2PKey() string {
	if m != nil {
		return m.LibP2PKey
	}
	return ""
}

func (m *OffchainNode) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

func (m *OffchainNode) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OffchainNode) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

func (m *OffchainNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type OffchainNodes struct {
	OffchainNode []*Inference `protobuf:"bytes,1,rep,name=offchain_node,json=offchainNode,proto3" json:"offchain_node,omitempty"`
}

func (m *OffchainNodes) Reset()         { *m = OffchainNodes{} }
func (m *OffchainNodes) String() string { return proto.CompactTextString(m) }
func (*OffchainNodes) ProtoMessage()    {}
func (*OffchainNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{12}
}
func (m *OffchainNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffchainNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffchainNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffchainNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffchainNodes.Merge(m, src)
}
func (m *OffchainNodes) XXX_Size() int {
	return m.Size()
}
func (m *OffchainNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_OffchainNodes.DiscardUnknown(m)
}

var xxx_messageInfo_OffchainNodes proto.InternalMessageInfo

func (m *OffchainNodes) GetOffchainNode() []*Inference {
	if m != nil {
		return m.OffchainNode
	}
	return nil
}

type InferenceSetForScoring struct {
	TopicId    uint64      `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Timestamp  uint64      `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Inferences *Inferences `protobuf:"bytes,3,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *InferenceSetForScoring) Reset()         { *m = InferenceSetForScoring{} }
func (m *InferenceSetForScoring) String() string { return proto.CompactTextString(m) }
func (*InferenceSetForScoring) ProtoMessage()    {}
func (*InferenceSetForScoring) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{13}
}
func (m *InferenceSetForScoring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceSetForScoring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceSetForScoring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceSetForScoring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceSetForScoring.Merge(m, src)
}
func (m *InferenceSetForScoring) XXX_Size() int {
	return m.Size()
}
func (m *InferenceSetForScoring) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceSetForScoring.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceSetForScoring proto.InternalMessageInfo

func (m *InferenceSetForScoring) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *InferenceSetForScoring) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *InferenceSetForScoring) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type ForecastSetForScoring struct {
	TopicId   uint64     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Timestamp uint64     `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Forecasts *Forecasts `protobuf:"bytes,3,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *ForecastSetForScoring) Reset()         { *m = ForecastSetForScoring{} }
func (m *ForecastSetForScoring) String() string { return proto.CompactTextString(m) }
func (*ForecastSetForScoring) ProtoMessage()    {}
func (*ForecastSetForScoring) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{14}
}
func (m *ForecastSetForScoring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecastSetForScoring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForecastSetForScoring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForecastSetForScoring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastSetForScoring.Merge(m, src)
}
func (m *ForecastSetForScoring) XXX_Size() int {
	return m.Size()
}
func (m *ForecastSetForScoring) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastSetForScoring.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastSetForScoring proto.InternalMessageInfo

func (m *ForecastSetForScoring) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *ForecastSetForScoring) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ForecastSetForScoring) GetForecasts() *Forecasts {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type StakePlacement struct {
	TopicId uint64                 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string                 `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	Amount  cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *StakePlacement) Reset()         { *m = StakePlacement{} }
func (m *StakePlacement) String() string { return proto.CompactTextString(m) }
func (*StakePlacement) ProtoMessage()    {}
func (*StakePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{15}
}
func (m *StakePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakePlacement.Merge(m, src)
}
func (m *StakePlacement) XXX_Size() int {
	return m.Size()
}
func (m *StakePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_StakePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_StakePlacement proto.InternalMessageInfo

func (m *StakePlacement) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *StakePlacement) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type StakeRemoval struct {
	TimestampRemovalStarted uint64            `protobuf:"varint,1,opt,name=timestamp_removal_started,json=timestampRemovalStarted,proto3" json:"timestamp_removal_started,omitempty"`
	Placements              []*StakePlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
}

func (m *StakeRemoval) Reset()         { *m = StakeRemoval{} }
func (m *StakeRemoval) String() string { return proto.CompactTextString(m) }
func (*StakeRemoval) ProtoMessage()    {}
func (*StakeRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{16}
}
func (m *StakeRemoval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRemoval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRemoval.Merge(m, src)
}
func (m *StakeRemoval) XXX_Size() int {
	return m.Size()
}
func (m *StakeRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRemoval proto.InternalMessageInfo

func (m *StakeRemoval) GetTimestampRemovalStarted() uint64 {
	if m != nil {
		return m.TimestampRemovalStarted
	}
	return 0
}

func (m *StakeRemoval) GetPlacements() []*StakePlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

type DelegatedStakePlacement struct {
	TopicId   uint64                 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer   string                 `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	Delegator string                 `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Amount    cosmossdk_io_math.Uint `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *DelegatedStakePlacement) Reset()         { *m = DelegatedStakePlacement{} }
func (m *DelegatedStakePlacement) String() string { return proto.CompactTextString(m) }
func (*DelegatedStakePlacement) ProtoMessage()    {}
func (*DelegatedStakePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{17}
}
func (m *DelegatedStakePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedStakePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedStakePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedStakePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedStakePlacement.Merge(m, src)
}
func (m *DelegatedStakePlacement) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedStakePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedStakePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedStakePlacement proto.InternalMessageInfo

func (m *DelegatedStakePlacement) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *DelegatedStakePlacement) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *DelegatedStakePlacement) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

type DelegatedStakeRemoval struct {
	TimestampRemovalStarted uint64                     `protobuf:"varint,1,opt,name=timestamp_removal_started,json=timestampRemovalStarted,proto3" json:"timestamp_removal_started,omitempty"`
	Placements              []*DelegatedStakePlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
}

func (m *DelegatedStakeRemoval) Reset()         { *m = DelegatedStakeRemoval{} }
func (m *DelegatedStakeRemoval) String() string { return proto.CompactTextString(m) }
func (*DelegatedStakeRemoval) ProtoMessage()    {}
func (*DelegatedStakeRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{18}
}
func (m *DelegatedStakeRemoval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedStakeRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedStakeRemoval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedStakeRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedStakeRemoval.Merge(m, src)
}
func (m *DelegatedStakeRemoval) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedStakeRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedStakeRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedStakeRemoval proto.InternalMessageInfo

func (m *DelegatedStakeRemoval) GetTimestampRemovalStarted() uint64 {
	if m != nil {
		return m.TimestampRemovalStarted
	}
	return 0
}

func (m *DelegatedStakeRemoval) GetPlacements() []*DelegatedStakePlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

// num_inference_possible = bid_amount / max_price_per_inference,
// length of time this inference repeats for =  num_inference_possible * cadence
type InferenceRequest struct {
	Sender               string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Nonce                uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TopicId              uint64                 `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Cadence              uint64                 `protobuf:"varint,4,opt,name=cadence,proto3" json:"cadence,omitempty"`
	MaxPricePerInference cosmossdk_io_math.Uint `protobuf:"bytes,5,opt,name=max_price_per_inference,json=maxPricePerInference,proto3,customtype=cosmossdk.io/math.Uint" json:"max_price_per_inference"`
	BidAmount            cosmossdk_io_math.Uint `protobuf:"bytes,6,opt,name=bid_amount,json=bidAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"bid_amount"`
	LastChecked          uint64                 `protobuf:"varint,7,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
	TimestampValidUntil  uint64                 `protobuf:"varint,8,opt,name=timestamp_valid_until,json=timestampValidUntil,proto3" json:"timestamp_valid_until,omitempty"`
	ExtraData            []byte                 `protobuf:"bytes,9,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *InferenceRequest) Reset()         { *m = InferenceRequest{} }
func (m *InferenceRequest) String() string { return proto.CompactTextString(m) }
func (*InferenceRequest) ProtoMessage()    {}
func (*InferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{19}
}
func (m *InferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceRequest.Merge(m, src)
}
func (m *InferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *InferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceRequest proto.InternalMessageInfo

func (m *InferenceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InferenceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *InferenceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *InferenceRequest) GetCadence() uint64 {
	if m != nil {
		return m.Cadence
	}
	return 0
}

func (m *InferenceRequest) GetLastChecked() uint64 {
	if m != nil {
		return m.LastChecked
	}
	return 0
}

func (m *InferenceRequest) GetTimestampValidUntil() uint64 {
	if m != nil {
		return m.TimestampValidUntil
	}
	return 0
}

func (m *InferenceRequest) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "emissions.v1.Params")
	proto.RegisterType((*Topic)(nil), "emissions.v1.Topic")
	proto.RegisterType((*TopicList)(nil), "emissions.v1.TopicList")
	proto.RegisterType((*WorkerAttributedLoss)(nil), "emissions.v1.WorkerAttributedLoss")
	proto.RegisterType((*LossBundle)(nil), "emissions.v1.LossBundle")
	proto.RegisterType((*LossBundles)(nil), "emissions.v1.LossBundles")
	proto.RegisterType((*Inference)(nil), "emissions.v1.Inference")
	proto.RegisterType((*Inferences)(nil), "emissions.v1.Inferences")
	proto.RegisterType((*ForecastElement)(nil), "emissions.v1.ForecastElement")
	proto.RegisterType((*Forecast)(nil), "emissions.v1.Forecast")
	proto.RegisterType((*Forecasts)(nil), "emissions.v1.Forecasts")
	proto.RegisterType((*OffchainNode)(nil), "emissions.v1.OffchainNode")
	proto.RegisterType((*OffchainNodes)(nil), "emissions.v1.OffchainNodes")
	proto.RegisterType((*InferenceSetForScoring)(nil), "emissions.v1.InferenceSetForScoring")
	proto.RegisterType((*ForecastSetForScoring)(nil), "emissions.v1.ForecastSetForScoring")
	proto.RegisterType((*StakePlacement)(nil), "emissions.v1.StakePlacement")
	proto.RegisterType((*StakeRemoval)(nil), "emissions.v1.StakeRemoval")
	proto.RegisterType((*DelegatedStakePlacement)(nil), "emissions.v1.DelegatedStakePlacement")
	proto.RegisterType((*DelegatedStakeRemoval)(nil), "emissions.v1.DelegatedStakeRemoval")
	proto.RegisterType((*InferenceRequest)(nil), "emissions.v1.InferenceRequest")
}

func init() { proto.RegisterFile("emissions/v1/types.proto", fileDescriptor_32ba9f7333c0b525) }

var fileDescriptor_32ba9f7333c0b525 = []byte{
	// 1942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0xfb, 0x63, 0xec, 0x7e, 0x33, 0xf6, 0xda, 0x65, 0x7b, 0xdc, 0xf9, 0x72, 0xcc, 0xa0,
	0x15, 0x86, 0xdd, 0xd8, 0x5a, 0xb3, 0x40, 0x58, 0xf6, 0xe2, 0xc4, 0x0e, 0x38, 0x38, 0x1b, 0x6f,
	0x27, 0x21, 0x12, 0x97, 0x56, 0x4d, 0x77, 0xcd, 0x4c, 0xc9, 0xdd, 0x55, 0x43, 0x55, 0x8d, 0xed,
	0x41, 0x48, 0x9c, 0x10, 0x08, 0x2e, 0x70, 0x42, 0x42, 0x42, 0xe2, 0x82, 0x80, 0xdb, 0x1e, 0x72,
	0xe0, 0xce, 0x65, 0x8f, 0xab, 0x3d, 0x21, 0x0e, 0x2b, 0x94, 0x1c, 0xe0, 0xcf, 0x40, 0xf5, 0xd5,
	0x3d, 0xe3, 0x98, 0xec, 0xca, 0x09, 0x12, 0x97, 0xd1, 0xbc, 0x57, 0xaf, 0x5e, 0xbd, 0xf7, 0x7b,
	0x5f, 0xd5, 0x05, 0x11, 0x29, 0xa8, 0x94, 0x94, 0x33, 0xb9, 0x75, 0xfc, 0xce, 0x96, 0x1a, 0xf6,
	0x89, 0xdc, 0xec, 0x0b, 0xae, 0x38, 0x6a, 0x94, 0x2b, 0x9b, 0xc7, 0xef, 0x5c, 0xb9, 0x9c, 0x72,
	0x59, 0x70, 0x99, 0x98, 0xb5, 0x2d, 0x4b, 0x58, 0xc1, 0x2b, 0x8b, 0xb8, 0xa0, 0x8c, 0x6f, 0x99,
	0x5f, 0xc7, 0x5a, 0xee, 0xf2, 0x2e, 0xb7, 0xa2, 0xfa, 0x9f, 0xe5, 0xb6, 0xfe, 0x14, 0x42, 0xed,
	0x10, 0x0b, 0x5c, 0x48, 0x14, 0xc1, 0xcc, 0x31, 0x11, 0x5a, 0x7b, 0x14, 0xac, 0x07, 0x1b, 0x61,
	0xec, 0x49, 0xf4, 0x26, 0xcc, 0x0b, 0x72, 0x82, 0x45, 0x96, 0xa4, 0x38, 0x23, 0x2c, 0x25, 0xd1,
	0xc4, 0x7a, 0xb0, 0x31, 0x19, 0xcf, 0x59, 0xee, 0x1d, 0xcb, 0x44, 0x5d, 0x68, 0x16, 0x94, 0x25,
	0x8a, 0xf7, 0x69, 0x9a, 0x0c, 0x58, 0x41, 0x54, 0x92, 0x91, 0x02, 0xb3, 0x2c, 0x9a, 0xd4, 0xfa,
	0x6e, 0x6f, 0x7f, 0xfc, 0xd9, 0x8d, 0x4b, 0xff, 0xf8, 0xec, 0x46, 0xd3, 0x9a, 0x2a, 0xb3, 0xa3,
	0x4d, 0xca, 0xb7, 0x0a, 0xac, 0x7a, 0x9b, 0x8f, 0x29, 0x53, 0x9f, 0x3e, 0xbd, 0x59, 0x77, 0x4e,
	0x68, 0xf2, 0xcf, 0xff, 0xfa, 0xe8, 0x6b, 0x41, 0xbc, 0x54, 0x50, 0xf6, 0x48, 0x2b, 0x7c, 0xac,
	0xf5, 0xed, 0x1a, 0x75, 0x68, 0x0b, 0x96, 0x0b, 0x7c, 0x6a, 0x0f, 0x92, 0x49, 0x9f, 0x88, 0xa4,
	0x9d, 0xf3, 0xf4, 0x28, 0x9a, 0x5a, 0x0f, 0x36, 0xa6, 0xe2, 0xc5, 0x02, 0x9f, 0x9a, 0x2d, 0xf2,
	0x90, 0x88, 0xdb, 0x7a, 0x01, 0x1d, 0x41, 0xa4, 0x2d, 0x13, 0xe4, 0x47, 0x03, 0x22, 0xd5, 0xb8,
	0x6d, 0xd3, 0x17, 0xb6, 0x6d, 0xa5, 0xa0, 0x2c, 0xb6, 0x2a, 0x47, 0xad, 0x1b, 0xc2, 0x75, 0x6d,
	0x9d, 0x89, 0x14, 0xeb, 0x26, 0x94, 0x75, 0x88, 0xd0, 0xf8, 0x68, 0x43, 0x53, 0xc2, 0x54, 0x54,
	0x33, 0x27, 0x7e, 0xd3, 0x9d, 0x78, 0xf5, 0xc5, 0x13, 0x0f, 0x48, 0x17, 0xa7, 0xc3, 0x5d, 0x92,
	0x7e, 0xfa, 0xf4, 0x26, 0xb8, 0x63, 0x77, 0x49, 0x6a, 0x4f, 0xbd, 0x52, 0xe0, 0xd3, 0xfb, 0x56,
	0xf7, 0xbe, 0x57, 0x7d, 0x68, 0x35, 0xa3, 0x1e, 0x34, 0xb5, 0x8f, 0x54, 0x90, 0x2c, 0x29, 0x28,
	0xa3, 0xc5, 0xa0, 0x48, 0xa4, 0xc2, 0x47, 0x24, 0x9a, 0xb9, 0xb0, 0x97, 0xcb, 0x5e, 0xe3, 0x7d,
	0xab, 0xf0, 0xa1, 0xd6, 0x87, 0xbe, 0x0d, 0x97, 0x05, 0x29, 0xf8, 0x31, 0xb1, 0xfa, 0x93, 0x8c,
	0xe4, 0x78, 0x98, 0x9c, 0x50, 0x96, 0xf1, 0x93, 0x68, 0xd6, 0xc4, 0xa1, 0x69, 0x05, 0x8c, 0xfc,
	0xae, 0x5e, 0x7e, 0x62, 0x56, 0xd1, 0x26, 0x2c, 0x8d, 0x06, 0xc3, 0xa7, 0x54, 0xe8, 0x82, 0x57,
	0x62, 0xea, 0xd3, 0x6a, 0x03, 0x16, 0xb4, 0x7c, 0xce, 0xa5, 0x2c, 0x85, 0xc1, 0x08, 0xcf, 0x17,
	0x94, 0x1d, 0x70, 0x29, 0xbd, 0xe4, 0x1d, 0x58, 0xd3, 0xc8, 0x57, 0x88, 0xfb, 0x33, 0x8e, 0x71,
	0x4e, 0x33, 0xaa, 0x86, 0x51, 0xdd, 0xec, 0xbb, 0x5a, 0xe0, 0xd3, 0x12, 0x3b, 0x77, 0xda, 0x0f,
	0x9c, 0x88, 0x31, 0x0f, 0x9f, 0xbe, 0x60, 0x5e, 0xa3, 0xcc, 0xad, 0x33, 0xe6, 0xfd, 0x14, 0xd6,
	0x5d, 0x60, 0x13, 0x5b, 0x0e, 0x32, 0x11, 0xa4, 0x3f, 0x50, 0x44, 0xc8, 0xe4, 0x84, 0x8b, 0x23,
	0x22, 0x64, 0x34, 0xf7, 0x4a, 0x11, 0xbf, 0xee, 0xf4, 0xc7, 0x56, 0x7d, 0xec, 0xb4, 0x3f, 0xb1,
	0xca, 0xd1, 0x35, 0x08, 0x65, 0x0f, 0x8b, 0x3e, 0x23, 0x52, 0x46, 0x6f, 0x18, 0x33, 0x2b, 0x06,
	0xfa, 0x12, 0x34, 0xda, 0x44, 0xe1, 0x84, 0x30, 0x25, 0x78, 0x7f, 0x18, 0x2d, 0xac, 0x07, 0x1b,
	0x13, 0x71, 0x5d, 0xf3, 0xf6, 0x2c, 0x0b, 0x5d, 0x85, 0x30, 0x4b, 0x39, 0xe9, 0x24, 0xb8, 0x2d,
	0xa3, 0x45, 0xb3, 0x3e, 0x6b, 0x18, 0x3b, 0x6d, 0x89, 0xbe, 0x0c, 0x73, 0x39, 0xc1, 0x82, 0xe9,
	0x54, 0x16, 0x58, 0x91, 0x08, 0x19, 0x81, 0x86, 0x67, 0xc6, 0x58, 0x11, 0xf4, 0x2e, 0x34, 0x35,
	0x66, 0x5d, 0x81, 0x33, 0xaa, 0x81, 0x50, 0x3d, 0x41, 0x64, 0x8f, 0xe7, 0x59, 0xb4, 0x64, 0xa4,
	0x75, 0xb9, 0x7e, 0xd7, 0x2d, 0x3e, 0xf2, 0x6b, 0xe8, 0x6d, 0x40, 0x3a, 0xb0, 0x36, 0x81, 0x3a,
	0x02, 0xa7, 0x4a, 0xf7, 0x9e, 0x65, 0xb3, 0x43, 0x87, 0xdc, 0x64, 0xce, 0x5d, 0xc7, 0x6f, 0xfd,
	0xb2, 0x06, 0xd3, 0xa6, 0xac, 0xd1, 0x3c, 0x4c, 0xd0, 0xcc, 0xf4, 0xa8, 0xa9, 0x78, 0x82, 0x66,
	0xba, 0x71, 0xa5, 0x82, 0x60, 0xc5, 0x85, 0xe9, 0x4b, 0x61, 0xec, 0x49, 0x74, 0x05, 0x66, 0x0b,
	0xa2, 0x70, 0x86, 0x15, 0xb6, 0x3d, 0x28, 0x2e, 0x69, 0x74, 0x1d, 0xc0, 0xa4, 0x54, 0xce, 0xbb,
	0x34, 0x35, 0xad, 0x23, 0x8c, 0x43, 0xcd, 0x39, 0xd0, 0x0c, 0x74, 0x03, 0xea, 0x66, 0xb9, 0x20,
	0xaa, 0xc7, 0x5d, 0x97, 0x88, 0xcd, 0x8e, 0xfb, 0x86, 0xa3, 0x81, 0x1d, 0x4b, 0xc9, 0x9a, 0xb1,
	0xc7, 0x6c, 0xf2, 0xa9, 0xd1, 0x82, 0x39, 0x7b, 0x04, 0x96, 0x2a, 0x11, 0x98, 0x99, 0x2a, 0x74,
	0x32, 0x07, 0x58, 0xaa, 0x18, 0x33, 0xf4, 0x15, 0x78, 0xa3, 0xca, 0x57, 0x6b, 0xcb, 0xac, 0x39,
	0x6b, 0xbe, 0x64, 0x5b, 0x83, 0xbe, 0x0a, 0x0b, 0x95, 0xa0, 0xb3, 0x2a, 0x34, 0x92, 0x95, 0x02,
	0x67, 0xda, 0x5b, 0xb0, 0x58, 0x89, 0x8e, 0x97, 0x4c, 0xa5, 0xc3, 0x1b, 0xf9, 0x36, 0xa0, 0x11,
	0x03, 0xbc, 0xa5, 0xf5, 0x33, 0xd2, 0xde, 0xdc, 0x26, 0xd4, 0x74, 0x3c, 0x8e, 0x6d, 0x41, 0xcc,
	0xc6, 0x8e, 0xd2, 0x70, 0x65, 0xa4, 0x83, 0x07, 0xb9, 0x4a, 0xb0, 0xe8, 0xda, 0x84, 0x8f, 0xc1,
	0xb1, 0x76, 0x44, 0x17, 0x2d, 0xc3, 0x74, 0x9f, 0x71, 0x51, 0x44, 0xf3, 0x46, 0xb3, 0x25, 0x34,
	0x88, 0x38, 0xef, 0xf7, 0x70, 0x22, 0x48, 0x57, 0x10, 0x65, 0xd2, 0x77, 0x22, 0xae, 0x1b, 0x5e,
	0x6c, 0x58, 0x1a, 0xa0, 0xbe, 0x9b, 0x3e, 0xae, 0xae, 0x5c, 0x0e, 0xcf, 0x3b, 0xb6, 0xab, 0x07,
	0xed, 0xb5, 0x17, 0x2c, 0xcd, 0x76, 0xe9, 0xbc, 0xe0, 0x16, 0xca, 0xa2, 0xd7, 0x68, 0x7a, 0xe1,
	0x0e, 0x17, 0x24, 0xc5, 0x52, 0xb9, 0xcc, 0xf6, 0xa7, 0xdd, 0x75, 0x6c, 0xed, 0x5a, 0x27, 0x51,
	0x3c, 0x27, 0x02, 0x6b, 0x8d, 0x36, 0xa3, 0xa1, 0xf3, 0xc8, 0x73, 0x74, 0xfe, 0xc9, 0x41, 0x5b,
	0xd2, 0x6c, 0x68, 0x92, 0x77, 0x2a, 0xf6, 0x24, 0xba, 0x05, 0x91, 0xfd, 0x4b, 0x7f, 0x4c, 0x32,
	0xd7, 0x1e, 0x12, 0xd2, 0xe7, 0x69, 0x4f, 0x46, 0x2b, 0x46, 0x4f, 0xb3, 0x5a, 0xb7, 0xe5, 0xbd,
	0x67, 0x56, 0x75, 0x76, 0x76, 0x12, 0x25, 0x08, 0x96, 0x03, 0x31, 0x8c, 0x9a, 0x46, 0x36, 0xec,
	0x3c, 0x72, 0x8c, 0xd6, 0x2d, 0x08, 0x4d, 0x2d, 0x1c, 0x50, 0xa9, 0xd0, 0x5b, 0x50, 0xb3, 0xa3,
	0x30, 0x0a, 0xd6, 0x27, 0x37, 0xea, 0xdb, 0x4b, 0x9b, 0xa3, 0xd7, 0x84, 0x4d, 0x23, 0x18, 0x3b,
	0x91, 0xd6, 0xef, 0x03, 0x58, 0xb6, 0x9d, 0x63, 0x47, 0x29, 0x41, 0xdb, 0x03, 0x45, 0x32, 0xdd,
	0x43, 0x75, 0x64, 0x6d, 0xbb, 0x72, 0xd3, 0xdf, 0x51, 0xe8, 0x7b, 0x30, 0x7d, 0x8c, 0xf3, 0x81,
	0x9d, 0xf9, 0x17, 0x1b, 0x21, 0x56, 0x81, 0xf6, 0x89, 0x9c, 0x2a, 0x81, 0x93, 0xb2, 0x1e, 0x1b,
	0x71, 0x68, 0x38, 0xbb, 0x58, 0xe1, 0xf7, 0xa6, 0xfe, 0xfd, 0x87, 0x1b, 0x41, 0xeb, 0xe9, 0x34,
	0x80, 0xb6, 0xe7, 0xf6, 0x80, 0x65, 0x39, 0x41, 0x97, 0x61, 0xd6, 0xde, 0x27, 0xca, 0x8a, 0x9f,
	0x31, 0xf4, 0xbe, 0x29, 0x7b, 0x9f, 0x10, 0xae, 0xec, 0x1d, 0xf9, 0x39, 0x07, 0xa1, 0x27, 0x30,
	0x97, 0xf2, 0xa2, 0x4d, 0x19, 0xc9, 0xcc, 0x54, 0xb1, 0xc5, 0x7f, 0x21, 0xcf, 0x1a, 0x5e, 0x91,
	0x81, 0x70, 0x1f, 0x5c, 0xd1, 0x0a, 0xa3, 0x97, 0xc8, 0x68, 0xda, 0x04, 0xa4, 0x35, 0x1e, 0x90,
	0xf3, 0xe0, 0x8f, 0xe7, 0xdc, 0xce, 0x03, 0xb3, 0x11, 0x3d, 0x80, 0x45, 0x9f, 0x97, 0x95, 0xb6,
	0xda, 0x17, 0xd6, 0xb6, 0x50, 0x6d, 0x76, 0x0a, 0x3f, 0x04, 0x60, 0x98, 0x1e, 0x13, 0xeb, 0xf1,
	0xc5, 0xaf, 0x03, 0xa1, 0xd1, 0x62, 0xdc, 0xfd, 0x09, 0xcc, 0x73, 0x46, 0x12, 0x3e, 0x50, 0xde,
	0xc0, 0xd9, 0x2f, 0x6a, 0xe0, 0xc5, 0xc0, 0xe6, 0x8c, 0x3c, 0x18, 0x28, 0xe7, 0xd0, 0xcf, 0x02,
	0x58, 0xd2, 0xc7, 0x53, 0x96, 0x54, 0x8e, 0x11, 0x19, 0x85, 0xff, 0x53, 0x1b, 0x16, 0x38, 0x23,
	0xfb, 0xec, 0x03, 0x8f, 0x01, 0x91, 0x2e, 0x6d, 0xef, 0x41, 0xbd, 0xca, 0x5a, 0x89, 0xbe, 0xe3,
	0x86, 0x43, 0xdb, 0xd2, 0xae, 0x30, 0xa3, 0x71, 0xa3, 0xaa, 0x0d, 0x76, 0x24, 0xb8, 0xcd, 0xad,
	0xbf, 0x05, 0x10, 0x56, 0x9d, 0xea, 0x25, 0x15, 0x50, 0x95, 0xec, 0xc4, 0xf9, 0x25, 0x3b, 0xf9,
	0x7a, 0x4b, 0x76, 0xea, 0x6c, 0x25, 0xe9, 0xa6, 0x2e, 0x38, 0xef, 0xb8, 0xf1, 0x68, 0x09, 0x87,
	0xc8, 0x1e, 0x40, 0xe9, 0x84, 0x44, 0xdf, 0x02, 0x28, 0x9b, 0xb2, 0x87, 0x63, 0x75, 0x1c, 0x8e,
	0xea, 0x46, 0x36, 0x22, 0xda, 0xfa, 0x28, 0x80, 0x37, 0x7c, 0x2b, 0xde, 0xcb, 0x49, 0xa1, 0xaf,
	0xb9, 0x11, 0xcc, 0xb8, 0x6a, 0xf1, 0x95, 0xef, 0xc8, 0xff, 0x0f, 0xcf, 0x7f, 0x1b, 0xc0, 0x6c,
	0x39, 0x3d, 0x5e, 0x12, 0xbe, 0x35, 0x80, 0xaa, 0x4c, 0x9d, 0x27, 0x23, 0x1c, 0x74, 0xaf, 0xea,
	0x01, 0x09, 0xb1, 0xae, 0xcb, 0x68, 0xd2, 0x40, 0x77, 0x7d, 0x1c, 0xba, 0x33, 0x00, 0x55, 0xe5,
	0xef, 0x18, 0x3e, 0x4b, 0x77, 0x20, 0xf4, 0xa2, 0x12, 0xbd, 0x0b, 0xa1, 0x17, 0xf3, 0x11, 0x69,
	0x9e, 0xaf, 0x36, 0xae, 0x04, 0x5b, 0x7f, 0x0c, 0xa0, 0xf1, 0xa0, 0xd3, 0x49, 0x7b, 0x98, 0xb2,
	0x0f, 0x78, 0x46, 0xd0, 0x1a, 0xd4, 0x73, 0xda, 0x4e, 0xfa, 0xdb, 0xfd, 0xe4, 0x88, 0x0c, 0xdd,
	0xf0, 0x08, 0x73, 0xda, 0x3e, 0xdc, 0xee, 0x7f, 0x9f, 0x0c, 0xf5, 0x05, 0xb2, 0x18, 0xe4, 0x8a,
	0x26, 0x38, 0xcb, 0x84, 0xbe, 0xa2, 0x5a, 0x47, 0x1b, 0x86, 0xb9, 0x63, 0x79, 0x1a, 0x4e, 0x7e,
	0xc2, 0x88, 0x70, 0xb7, 0x34, 0x4b, 0xe8, 0xdb, 0x01, 0xe3, 0x19, 0x29, 0x77, 0xda, 0x4b, 0x5a,
	0x5d, 0xf3, 0xfc, 0xc6, 0x55, 0x98, 0x31, 0x22, 0xd4, 0x5f, 0xd1, 0x6a, 0x9a, 0xdc, 0xcf, 0x5a,
	0xf7, 0x61, 0x6e, 0xd4, 0x4c, 0x89, 0xde, 0x87, 0x39, 0xee, 0x18, 0x89, 0x96, 0xf9, 0xbc, 0x24,
	0x6c, 0xf0, 0x91, 0xed, 0xad, 0x5f, 0x05, 0xd0, 0x2c, 0xd7, 0x1e, 0x12, 0x75, 0x97, 0x8b, 0x87,
	0x29, 0x17, 0x94, 0x75, 0x5f, 0x16, 0xe1, 0x6b, 0x10, 0x2a, 0x5a, 0x10, 0xa9, 0x70, 0xd1, 0x37,
	0x7e, 0x4f, 0xc5, 0x15, 0x03, 0xdd, 0x1a, 0xab, 0x09, 0xed, 0xf9, 0x0b, 0x2d, 0xa2, 0xaa, 0xa0,
	0xb1, 0xa2, 0xf8, 0x79, 0x00, 0x2b, 0x3e, 0x38, 0xaf, 0xc9, 0x98, 0x6f, 0x8c, 0x66, 0x83, 0xb5,
	0x65, 0xf5, 0xfc, 0x6c, 0x90, 0xa3, 0xe9, 0xf0, 0x9b, 0x00, 0xe6, 0xcd, 0x3d, 0xfd, 0x30, 0xc7,
	0xa9, 0xad, 0xce, 0x0b, 0x8d, 0xec, 0x7b, 0x50, 0xc3, 0x05, 0x1f, 0x30, 0xf5, 0x0a, 0x95, 0xeb,
	0x34, 0xb4, 0x7e, 0x11, 0x40, 0xc3, 0xd8, 0x14, 0xeb, 0x0f, 0x50, 0x9c, 0xa3, 0xf7, 0xe0, 0x72,
	0xe9, 0x68, 0x22, 0x2c, 0x53, 0x7f, 0x76, 0x08, 0x45, 0xbc, 0x89, 0xab, 0xa5, 0x80, 0xdb, 0xf4,
	0xd0, 0x2e, 0xa3, 0xf7, 0x01, 0xfa, 0xde, 0x35, 0x9d, 0xbb, 0x3a, 0x67, 0xae, 0x8d, 0x03, 0x33,
	0xee, 0x7f, 0x3c, 0x22, 0xdf, 0xfa, 0x6b, 0x00, 0xab, 0xbb, 0x24, 0x27, 0x5d, 0xac, 0x48, 0xf6,
	0x3a, 0x70, 0xba, 0x06, 0x61, 0x66, 0xf5, 0x71, 0x5f, 0x2c, 0x15, 0x63, 0x04, 0xc5, 0xa9, 0x57,
	0x46, 0xf1, 0x77, 0x01, 0xac, 0x8c, 0x9b, 0xfe, 0x3a, 0xe0, 0xdc, 0x3b, 0x07, 0xce, 0x37, 0xc7,
	0xe1, 0xfc, 0x2f, 0x78, 0x8d, 0xe1, 0xfa, 0x97, 0x49, 0x58, 0x38, 0xfb, 0x05, 0xaf, 0xc7, 0xa1,
	0x24, 0x2c, 0xab, 0x6e, 0xb0, 0x96, 0xd2, 0xcd, 0x85, 0x71, 0xff, 0x6a, 0x35, 0x15, 0x5b, 0x62,
	0x0c, 0xfe, 0xc9, 0x17, 0xe0, 0xf7, 0x5f, 0x4d, 0xf6, 0x49, 0xc9, 0x93, 0x88, 0xc2, 0xaa, 0xfe,
	0xd0, 0xed, 0x0b, 0x6a, 0xdf, 0x73, 0x46, 0xbe, 0x34, 0x2e, 0xfe, 0x8e, 0xa4, 0xbf, 0x8e, 0x0f,
	0xb5, 0xc6, 0x43, 0x22, 0xaa, 0xb9, 0xff, 0x21, 0x40, 0x9b, 0x66, 0x89, 0x8b, 0x67, 0xed, 0xe2,
	0x17, 0xb6, 0x36, 0xcd, 0x76, 0x8c, 0x12, 0xf3, 0xc9, 0xaa, 0x87, 0x49, 0xda, 0x23, 0xe9, 0x11,
	0xc9, 0xca, 0xcf, 0x51, 0x2c, 0xd5, 0x1d, 0xcb, 0x42, 0xdb, 0xb0, 0x52, 0xc5, 0xd6, 0x3c, 0x9b,
	0x24, 0x03, 0xa6, 0x68, 0xee, 0xde, 0x74, 0x96, 0xca, 0x45, 0xf3, 0x5e, 0xf2, 0x58, 0x2f, 0x9d,
	0x19, 0x95, 0xe1, 0x99, 0x51, 0x79, 0x3b, 0xfe, 0xf8, 0xd9, 0x5a, 0xf0, 0xc9, 0xb3, 0xb5, 0xe0,
	0x9f, 0xcf, 0xd6, 0x82, 0x5f, 0x3f, 0x5f, 0xbb, 0xf4, 0xc9, 0xf3, 0xb5, 0x4b, 0x7f, 0x7f, 0xbe,
	0x76, 0xe9, 0x87, 0xb7, 0xba, 0x54, 0xf5, 0x06, 0xed, 0xcd, 0x94, 0x17, 0x5b, 0x38, 0xcf, 0xb9,
	0xc0, 0x37, 0x19, 0x51, 0xfa, 0x12, 0xe3, 0x49, 0xd3, 0x80, 0xb7, 0x4e, 0xb7, 0xaa, 0x17, 0x51,
	0xf3, 0x1c, 0xda, 0xae, 0x99, 0xd7, 0xcb, 0xaf, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xce, 0x2c,
	0x89, 0xd3, 0x2b, 0x15, 0x00, 0x00,
}

func (this *WorkerAttributedLoss) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerAttributedLoss)
	if !ok {
		that2, ok := that.(WorkerAttributedLoss)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	return true
}
func (this *LossBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LossBundle)
	if !ok {
		that2, ok := that.(LossBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Reputer != that1.Reputer {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if !this.CombinedLoss.Equal(that1.CombinedLoss) {
		return false
	}
	if len(this.InfererLosses) != len(that1.InfererLosses) {
		return false
	}
	for i := range this.InfererLosses {
		if !this.InfererLosses[i].Equal(that1.InfererLosses[i]) {
			return false
		}
	}
	if len(this.ForecasterLosses) != len(that1.ForecasterLosses) {
		return false
	}
	for i := range this.ForecasterLosses {
		if !this.ForecasterLosses[i].Equal(that1.ForecasterLosses[i]) {
			return false
		}
	}
	if !this.NaiveLoss.Equal(that1.NaiveLoss) {
		return false
	}
	if len(this.OneOutLosses) != len(that1.OneOutLosses) {
		return false
	}
	for i := range this.OneOutLosses {
		if !this.OneOutLosses[i].Equal(that1.OneOutLosses[i]) {
			return false
		}
	}
	if len(this.OneInNaiveLosses) != len(that1.OneInNaiveLosses) {
		return false
	}
	for i := range this.OneInNaiveLosses {
		if !this.OneInNaiveLosses[i].Equal(that1.OneInNaiveLosses[i]) {
			return false
		}
	}
	return true
}
func (this *Inference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Inference)
	if !ok {
		that2, ok := that.(Inference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *ForecastElement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForecastElement)
	if !ok {
		that2, ok := that.(ForecastElement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Inferer != that1.Inferer {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *Forecast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Forecast)
	if !ok {
		that2, ok := that.(Forecast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Forecaster != that1.Forecaster {
		return false
	}
	if len(this.ForecastElements) != len(that1.ForecastElements) {
		return false
	}
	for i := range this.ForecastElements {
		if !this.ForecastElements[i].Equal(that1.ForecastElements[i]) {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinStakeFraction != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinStakeFraction))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa5
	}
	if m.MaxGradientThreshold != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxGradientThreshold))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9d
	}
	if m.LearningRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LearningRate))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if m.DcoefAbs != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DcoefAbs))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.BetaEntropy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BetaEntropy))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.Sharpness != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Sharpness))
		i--
		dAtA[i] = 0x78
	}
	{
		size := m.PercentRewardsReputersWorkers.Size()
		i -= size
		if _, err := m.PercentRewardsReputersWorkers.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.MaxRequestCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestCadence))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxInferenceRequestValidity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxInferenceRequestValidity))
		i--
		dAtA[i] = 0x58
	}
	if m.MinLossCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinLossCadence))
		i--
		dAtA[i] = 0x50
	}
	if m.MinRequestCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinRequestCadence))
		i--
		dAtA[i] = 0x48
	}
	if m.RemoveStakeDelayWindow != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RemoveStakeDelayWindow))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.RequiredMinimumStake.Size()
		i -= size
		if _, err := m.RequiredMinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MaxMissingInferencePercent.Size()
		i -= size
		if _, err := m.MaxMissingInferencePercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinRequestUnmetDemand.Size()
		i -= size
		if _, err := m.MinRequestUnmetDemand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTopicsPerBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxTopicsPerBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinTopicUnmetDemand.Size()
		i -= size
		if _, err := m.MinTopicUnmetDemand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RewardCadence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FTreasury != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FTreasury))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb5
	}
	if m.SubsidizedRewardEpochs != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SubsidizedRewardEpochs))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xad
	}
	if m.Subsidy != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Subsidy))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.FTolerance != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FTolerance))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9d
	}
	if m.PrewardForecast != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PrewardForecast))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if m.PrewardInference != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PrewardInference))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.PrewardReputer != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PrewardReputer))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.AlphaRegret != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AlphaRegret))))
		i--
		dAtA[i] = 0x7d
	}
	if m.Pnorm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Pnorm))
		i--
		dAtA[i] = 0x70
	}
	if len(m.DefaultArg) > 0 {
		i -= len(m.DefaultArg)
		copy(dAtA[i:], m.DefaultArg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DefaultArg)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.InferenceLastRan != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InferenceLastRan))
		i--
		dAtA[i] = 0x58
	}
	if m.InferenceCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InferenceCadence))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InferenceMethod) > 0 {
		i -= len(m.InferenceMethod)
		copy(dAtA[i:], m.InferenceMethod)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InferenceMethod)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.InferenceLogic) > 0 {
		i -= len(m.InferenceLogic)
		copy(dAtA[i:], m.InferenceLogic)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InferenceLogic)))
		i--
		dAtA[i] = 0x42
	}
	if m.LossLastRan != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LossLastRan))
		i--
		dAtA[i] = 0x38
	}
	if m.LossCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LossCadence))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LossMethod) > 0 {
		i -= len(m.LossMethod)
		copy(dAtA[i:], m.LossMethod)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LossMethod)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LossLogic) > 0 {
		i -= len(m.LossLogic)
		copy(dAtA[i:], m.LossLogic)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LossLogic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkerAttributedLoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerAttributedLoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerAttributedLoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LossBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LossBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LossBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OneInNaiveLosses) > 0 {
		for iNdEx := len(m.OneInNaiveLosses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneInNaiveLosses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.OneOutLosses) > 0 {
		for iNdEx := len(m.OneOutLosses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutLosses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.NaiveLoss.Size()
		i -= size
		if _, err := m.NaiveLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ForecasterLosses) > 0 {
		for iNdEx := len(m.ForecasterLosses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterLosses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InfererLosses) > 0 {
		for iNdEx := len(m.InfererLosses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererLosses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.CombinedLoss.Size()
		i -= size
		if _, err := m.CombinedLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LossBundles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LossBundles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LossBundles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LossBundles) > 0 {
		for iNdEx := len(m.LossBundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LossBundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Inference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for iNdEx := len(m.Inferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForecastElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecastElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecastElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Forecast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForecastElements) > 0 {
		for iNdEx := len(m.ForecastElements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecastElements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Forecasts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecasts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecasts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for iNdEx := len(m.Forecasts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forecasts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OffchainNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffchainNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffchainNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MultiAddress) > 0 {
		i -= len(m.MultiAddress)
		copy(dAtA[i:], m.MultiAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MultiAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LibP2PKey) > 0 {
		i -= len(m.LibP2PKey)
		copy(dAtA[i:], m.LibP2PKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LibP2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OffchainNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffchainNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffchainNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OffchainNode) > 0 {
		for iNdEx := len(m.OffchainNode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OffchainNode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceSetForScoring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceSetForScoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceSetForScoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForecastSetForScoring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecastSetForScoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecastSetForScoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecasts != nil {
		{
			size, err := m.Forecasts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakeRemoval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRemoval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRemoval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Placements) > 0 {
		for iNdEx := len(m.Placements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Placements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TimestampRemovalStarted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimestampRemovalStarted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatedStakePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedStakePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedStakePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatedStakeRemoval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedStakeRemoval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedStakeRemoval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Placements) > 0 {
		for iNdEx := len(m.Placements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Placements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TimestampRemovalStarted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimestampRemovalStarted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TimestampValidUntil != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TimestampValidUntil))
		i--
		dAtA[i] = 0x40
	}
	if m.LastChecked != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastChecked))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.BidAmount.Size()
		i -= size
		if _, err := m.BidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxPricePerInference.Size()
		i -= size
		if _, err := m.MaxPricePerInference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Cadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Cadence))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RewardCadence != 0 {
		n += 1 + sovTypes(uint64(m.RewardCadence))
	}
	l = m.MinTopicUnmetDemand.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.MaxTopicsPerBlock != 0 {
		n += 1 + sovTypes(uint64(m.MaxTopicsPerBlock))
	}
	l = m.MinRequestUnmetDemand.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MaxMissingInferencePercent.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.RequiredMinimumStake.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.RemoveStakeDelayWindow != 0 {
		n += 1 + sovTypes(uint64(m.RemoveStakeDelayWindow))
	}
	if m.MinRequestCadence != 0 {
		n += 1 + sovTypes(uint64(m.MinRequestCadence))
	}
	if m.MinLossCadence != 0 {
		n += 1 + sovTypes(uint64(m.MinLossCadence))
	}
	if m.MaxInferenceRequestValidity != 0 {
		n += 1 + sovTypes(uint64(m.MaxInferenceRequestValidity))
	}
	if m.MaxRequestCadence != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestCadence))
	}
	l = m.PercentRewardsReputersWorkers.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Sharpness != 0 {
		n += 1 + sovTypes(uint64(m.Sharpness))
	}
	if m.BetaEntropy != 0 {
		n += 6
	}
	if m.DcoefAbs != 0 {
		n += 6
	}
	if m.LearningRate != 0 {
		n += 6
	}
	if m.MaxGradientThreshold != 0 {
		n += 6
	}
	if m.MinStakeFraction != 0 {
		n += 6
	}
	return n
}

func (m *Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LossLogic)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LossMethod)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LossCadence != 0 {
		n += 1 + sovTypes(uint64(m.LossCadence))
	}
	if m.LossLastRan != 0 {
		n += 1 + sovTypes(uint64(m.LossLastRan))
	}
	l = len(m.InferenceLogic)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InferenceMethod)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InferenceCadence != 0 {
		n += 1 + sovTypes(uint64(m.InferenceCadence))
	}
	if m.InferenceLastRan != 0 {
		n += 1 + sovTypes(uint64(m.InferenceLastRan))
	}
	if m.Active {
		n += 2
	}
	l = len(m.DefaultArg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Pnorm != 0 {
		n += 1 + sovTypes(uint64(m.Pnorm))
	}
	if m.AlphaRegret != 0 {
		n += 5
	}
	if m.PrewardReputer != 0 {
		n += 6
	}
	if m.PrewardInference != 0 {
		n += 6
	}
	if m.PrewardForecast != 0 {
		n += 6
	}
	if m.FTolerance != 0 {
		n += 6
	}
	if m.Subsidy != 0 {
		n += 2 + sovTypes(uint64(m.Subsidy))
	}
	if m.SubsidizedRewardEpochs != 0 {
		n += 6
	}
	if m.FTreasury != 0 {
		n += 6
	}
	return n
}

func (m *TopicList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WorkerAttributedLoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *LossBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.CombinedLoss.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.InfererLosses) > 0 {
		for _, e := range m.InfererLosses {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ForecasterLosses) > 0 {
		for _, e := range m.ForecasterLosses {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.NaiveLoss.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.OneOutLosses) > 0 {
		for _, e := range m.OneOutLosses {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.OneInNaiveLosses) > 0 {
		for _, e := range m.OneInNaiveLosses {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *LossBundles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LossBundles) > 0 {
		for _, e := range m.LossBundles {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Inference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Inferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for _, e := range m.Inferences {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ForecastElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Forecast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ForecastElements) > 0 {
		for _, e := range m.ForecastElements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Forecasts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for _, e := range m.Forecasts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *OffchainNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LibP2PKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MultiAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OffchainNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OffchainNode) > 0 {
		for _, e := range m.OffchainNode {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *InferenceSetForScoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ForecastSetForScoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	if m.Forecasts != nil {
		l = m.Forecasts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *StakePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *StakeRemoval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampRemovalStarted != 0 {
		n += 1 + sovTypes(uint64(m.TimestampRemovalStarted))
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DelegatedStakePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *DelegatedStakeRemoval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampRemovalStarted != 0 {
		n += 1 + sovTypes(uint64(m.TimestampRemovalStarted))
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *InferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTypes(uint64(m.Nonce))
	}
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.Cadence != 0 {
		n += 1 + sovTypes(uint64(m.Cadence))
	}
	l = m.MaxPricePerInference.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.BidAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastChecked != 0 {
		n += 1 + sovTypes(uint64(m.LastChecked))
	}
	if m.TimestampValidUntil != 0 {
		n += 1 + sovTypes(uint64(m.TimestampValidUntil))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCadence", wireType)
			}
			m.RewardCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCadence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTopicUnmetDemand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTopicUnmetDemand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopicsPerBlock", wireType)
			}
			m.MaxTopicsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopicsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRequestUnmetDemand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinRequestUnmetDemand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMissingInferencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMissingInferencePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredMinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredMinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveStakeDelayWindow", wireType)
			}
			m.RemoveStakeDelayWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveStakeDelayWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRequestCadence", wireType)
			}
			m.MinRequestCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinRequestCadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLossCadence", wireType)
			}
			m.MinLossCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLossCadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInferenceRequestValidity", wireType)
			}
			m.MaxInferenceRequestValidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInferenceRequestValidity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestCadence", wireType)
			}
			m.MaxRequestCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestCadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentRewardsReputersWorkers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PercentRewardsReputersWorkers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharpness", wireType)
			}
			m.Sharpness = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sharpness |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaEntropy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BetaEntropy = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcoefAbs", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DcoefAbs = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LearningRate = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGradientThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxGradientThreshold = float32(math.Float32frombits(v))
		case 20:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeFraction", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinStakeFraction = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLogic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LossLogic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LossMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossCadence", wireType)
			}
			m.LossCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossCadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLastRan", wireType)
			}
			m.LossLastRan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossLastRan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceLogic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceLogic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceCadence", wireType)
			}
			m.InferenceCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceCadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceLastRan", wireType)
			}
			m.InferenceLastRan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceLastRan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultArg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultArg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnorm", wireType)
			}
			m.Pnorm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pnorm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaRegret", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AlphaRegret = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardReputer", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PrewardReputer = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardInference", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PrewardInference = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardForecast", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PrewardForecast = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FTolerance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FTolerance = float32(math.Float32frombits(v))
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsidy", wireType)
			}
			m.Subsidy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subsidy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubsidizedRewardEpochs", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SubsidizedRewardEpochs = float32(math.Float32frombits(v))
		case 22:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FTreasury", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FTreasury = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerAttributedLoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerAttributedLoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerAttributedLoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LossBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LossBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LossBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CombinedLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererLosses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererLosses = append(m.InfererLosses, &WorkerAttributedLoss{})
			if err := m.InfererLosses[len(m.InfererLosses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterLosses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterLosses = append(m.ForecasterLosses, &WorkerAttributedLoss{})
			if err := m.ForecasterLosses[len(m.ForecasterLosses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaiveLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NaiveLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutLosses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutLosses = append(m.OneOutLosses, &WorkerAttributedLoss{})
			if err := m.OneOutLosses[len(m.OneOutLosses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneInNaiveLosses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneInNaiveLosses = append(m.OneInNaiveLosses, &WorkerAttributedLoss{})
			if err := m.OneInNaiveLosses[len(m.OneInNaiveLosses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LossBundles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LossBundles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LossBundles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LossBundles = append(m.LossBundles, &LossBundle{})
			if err := m.LossBundles[len(m.LossBundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferences = append(m.Inferences, &Inference{})
			if err := m.Inferences[len(m.Inferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecastElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecastElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecastElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastElements = append(m.ForecastElements, &ForecastElement{})
			if err := m.ForecastElements[len(m.ForecastElements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecasts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecasts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecasts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecasts = append(m.Forecasts, &Forecast{})
			if err := m.Forecasts[len(m.Forecasts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffchainNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffchainNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffchainNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibP2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LibP2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffchainNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffchainNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffchainNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffchainNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffchainNode = append(m.OffchainNode, &Inference{})
			if err := m.OffchainNode[len(m.OffchainNode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceSetForScoring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceSetForScoring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceSetForScoring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecastSetForScoring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecastSetForScoring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecastSetForScoring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasts == nil {
				m.Forecasts = &Forecasts{}
			}
			if err := m.Forecasts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeRemoval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRemoval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRemoval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampRemovalStarted", wireType)
			}
			m.TimestampRemovalStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampRemovalStarted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &StakePlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedStakePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedStakePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedStakePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedStakeRemoval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedStakeRemoval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedStakeRemoval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampRemovalStarted", wireType)
			}
			m.TimestampRemovalStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampRemovalStarted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &DelegatedStakePlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cadence", wireType)
			}
			m.Cadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cadence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPricePerInference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPricePerInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChecked", wireType)
			}
			m.LastChecked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastChecked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampValidUntil", wireType)
			}
			m.TimestampValidUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampValidUntil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
