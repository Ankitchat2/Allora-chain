// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v1/types.proto

package types

import (
	bytes "bytes"
	cosmossdk_io_math "cosmossdk.io/math"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	Version                       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	RewardCadence                 int64                  `protobuf:"varint,2,opt,name=reward_cadence,json=rewardCadence,proto3" json:"reward_cadence,omitempty"`
	MinTopicUnmetDemand           cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=min_topic_unmet_demand,json=minTopicUnmetDemand,proto3,customtype=cosmossdk.io/math.Uint" json:"min_topic_unmet_demand"`
	MaxTopicsPerBlock             uint64                 `protobuf:"varint,4,opt,name=max_topics_per_block,json=maxTopicsPerBlock,proto3" json:"max_topics_per_block,omitempty"`
	MinRequestUnmetDemand         cosmossdk_io_math.Uint `protobuf:"bytes,5,opt,name=min_request_unmet_demand,json=minRequestUnmetDemand,proto3,customtype=cosmossdk.io/math.Uint" json:"min_request_unmet_demand"`
	MaxMissingInferencePercent    float64                `protobuf:"fixed64,6,opt,name=max_missing_inference_percent,json=maxMissingInferencePercent,proto3" json:"max_missing_inference_percent,omitempty"`
	RequiredMinimumStake          cosmossdk_io_math.Uint `protobuf:"bytes,7,opt,name=required_minimum_stake,json=requiredMinimumStake,proto3,customtype=cosmossdk.io/math.Uint" json:"required_minimum_stake"`
	RemoveStakeDelayWindow        int64                  `protobuf:"varint,8,opt,name=remove_stake_delay_window,json=removeStakeDelayWindow,proto3" json:"remove_stake_delay_window,omitempty"`
	MinEpochLength                int64                  `protobuf:"varint,9,opt,name=min_epoch_length,json=minEpochLength,proto3" json:"min_epoch_length,omitempty"`
	MaxInferenceRequestValidity   int64                  `protobuf:"varint,10,opt,name=max_inference_request_validity,json=maxInferenceRequestValidity,proto3" json:"max_inference_request_validity,omitempty"`
	MaxRequestCadence             int64                  `protobuf:"varint,11,opt,name=max_request_cadence,json=maxRequestCadence,proto3" json:"max_request_cadence,omitempty"`
	PercentRewardsReputersWorkers float64                `protobuf:"fixed64,12,opt,name=percent_rewards_reputers_workers,json=percentRewardsReputersWorkers,proto3" json:"percent_rewards_reputers_workers,omitempty"`
	Sharpness                     float64                `protobuf:"fixed64,13,opt,name=sharpness,proto3" json:"sharpness,omitempty"`
	// above-average stake holders at high values
	BetaEntropy                   float64 `protobuf:"fixed64,14,opt,name=beta_entropy,json=betaEntropy,proto3" json:"beta_entropy,omitempty"`
	DcoefAbs                      float64 `protobuf:"fixed64,15,opt,name=dcoef_abs,json=dcoefAbs,proto3" json:"dcoef_abs,omitempty"`
	LearningRate                  float64 `protobuf:"fixed64,16,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
	MaxGradientThreshold          float64 `protobuf:"fixed64,17,opt,name=max_gradient_threshold,json=maxGradientThreshold,proto3" json:"max_gradient_threshold,omitempty"`
	MinStakeFraction              float64 `protobuf:"fixed64,18,opt,name=min_stake_fraction,json=minStakeFraction,proto3" json:"min_stake_fraction,omitempty"`
	MaxWorkersPerTopicRequest     uint64  `protobuf:"varint,19,opt,name=max_workers_per_topic_request,json=maxWorkersPerTopicRequest,proto3" json:"max_workers_per_topic_request,omitempty"`
	MaxReputersPerTopicRequest    uint64  `protobuf:"varint,20,opt,name=max_reputers_per_topic_request,json=maxReputersPerTopicRequest,proto3" json:"max_reputers_per_topic_request,omitempty"`
	Epsilon                       float64 `protobuf:"fixed64,21,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	PInferenceSynthesis           float64 `protobuf:"fixed64,22,opt,name=p_inference_synthesis,json=pInferenceSynthesis,proto3" json:"p_inference_synthesis,omitempty"`
	AlphaRegret                   float64 `protobuf:"fixed64,23,opt,name=alpha_regret,json=alphaRegret,proto3" json:"alpha_regret,omitempty"`
	MaxUnfulfilledWorkerRequests  uint64  `protobuf:"varint,24,opt,name=max_unfulfilled_worker_requests,json=maxUnfulfilledWorkerRequests,proto3" json:"max_unfulfilled_worker_requests,omitempty"`
	MaxUnfulfilledReputerRequests uint64  `protobuf:"varint,25,opt,name=max_unfulfilled_reputer_requests,json=maxUnfulfilledReputerRequests,proto3" json:"max_unfulfilled_reputer_requests,omitempty"`
	NumberExpectedInfernceSybils         uint64  `protobuf:"varint,26,opt,name=number_expected_inference_sybils,json=numberOfClientsForTax,proto3" json:"number_expected_inference_sybils,omitempty"`
	SybilTaxExponent               uint64  `protobuf:"varint,27,opt,name=sybil_tax_exponent,json=parameterForTax,proto3" json:"sybil_tax_exponent,omitempty"`
	TopicRewardStakeImportance    float64 `protobuf:"fixed64,28,opt,name=topic_reward_stake_importance,json=topicRewardStakeImportance,proto3" json:"topic_reward_stake_importance,omitempty"`
	// topic and has a fiduciary value of 0.5
	TopicRewardFeeRevenueImportance float64 `protobuf:"fixed64,29,opt,name=topic_reward_fee_revenue_importance,json=topicRewardFeeRevenueImportance,proto3" json:"topic_reward_fee_revenue_importance,omitempty"`
	// reward of a topic and has a fiduciary value of 0.5
	TopicRewardAlpha float64 `protobuf:"fixed64,30,opt,name=topic_reward_alpha,json=topicRewardAlpha,proto3" json:"topic_reward_alpha,omitempty"`
	// monthly timescale, 0.5 for weekly updates
	// percentage of the total supply that is rewarded to
	// cosmos network validators the rest goes to
	// allora reputers workers etc
	ValidatorsVsAlloraPercentReward cosmossdk_io_math.LegacyDec `protobuf:"bytes,31,opt,name=validators_vs_allora_percent_reward,json=validatorsVsAlloraPercentReward,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validators_vs_allora_percent_reward"`
	MaxSamplesToScaleScores         uint64                      `protobuf:"varint,32,opt,name=max_samples_to_scale_scores,json=maxScoresToUseForStdDev,proto3" json:"max_samples_to_scale_scores,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Params) GetRewardCadence() int64 {
	if m != nil {
		return m.RewardCadence
	}
	return 0
}

func (m *Params) GetMaxTopicsPerBlock() uint64 {
	if m != nil {
		return m.MaxTopicsPerBlock
	}
	return 0
}

func (m *Params) GetMaxMissingInferencePercent() float64 {
	if m != nil {
		return m.MaxMissingInferencePercent
	}
	return 0
}

func (m *Params) GetRemoveStakeDelayWindow() int64 {
	if m != nil {
		return m.RemoveStakeDelayWindow
	}
	return 0
}

func (m *Params) GetMinEpochLength() int64 {
	if m != nil {
		return m.MinEpochLength
	}
	return 0
}

func (m *Params) GetMaxInferenceRequestValidity() int64 {
	if m != nil {
		return m.MaxInferenceRequestValidity
	}
	return 0
}

func (m *Params) GetMaxRequestCadence() int64 {
	if m != nil {
		return m.MaxRequestCadence
	}
	return 0
}

func (m *Params) GetPercentRewardsReputersWorkers() float64 {
	if m != nil {
		return m.PercentRewardsReputersWorkers
	}
	return 0
}

func (m *Params) GetSharpness() float64 {
	if m != nil {
		return m.Sharpness
	}
	return 0
}

func (m *Params) GetBetaEntropy() float64 {
	if m != nil {
		return m.BetaEntropy
	}
	return 0
}

func (m *Params) GetDcoefAbs() float64 {
	if m != nil {
		return m.DcoefAbs
	}
	return 0
}

func (m *Params) GetLearningRate() float64 {
	if m != nil {
		return m.LearningRate
	}
	return 0
}

func (m *Params) GetMaxGradientThreshold() float64 {
	if m != nil {
		return m.MaxGradientThreshold
	}
	return 0
}

func (m *Params) GetMinStakeFraction() float64 {
	if m != nil {
		return m.MinStakeFraction
	}
	return 0
}

func (m *Params) GetMaxWorkersPerTopicRequest() uint64 {
	if m != nil {
		return m.MaxWorkersPerTopicRequest
	}
	return 0
}

func (m *Params) GetMaxReputersPerTopicRequest() uint64 {
	if m != nil {
		return m.MaxReputersPerTopicRequest
	}
	return 0
}

func (m *Params) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *Params) GetPInferenceSynthesis() float64 {
	if m != nil {
		return m.PInferenceSynthesis
	}
	return 0
}

func (m *Params) GetAlphaRegret() float64 {
	if m != nil {
		return m.AlphaRegret
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledWorkerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledWorkerRequests
	}
	return 0
}

func (m *Params) GetMaxUnfulfilledReputerRequests() uint64 {
	if m != nil {
		return m.MaxUnfulfilledReputerRequests
	}
	return 0
}

func (m *Params) GetNumberExpectedInfernceSybils() uint64 {
	if m != nil {
		return m.NumberExpectedInfernceSybils
	}
	return 0
}

func (m *Params) GetSybilTaxExponent() uint64 {
	if m != nil {
		return m.SybilTaxExponent
	}
	return 0
}

func (m *Params) GetTopicRewardStakeImportance() float64 {
	if m != nil {
		return m.TopicRewardStakeImportance
	}
	return 0
}

func (m *Params) GetTopicRewardFeeRevenueImportance() float64 {
	if m != nil {
		return m.TopicRewardFeeRevenueImportance
	}
	return 0
}

func (m *Params) GetTopicRewardAlpha() float64 {
	if m != nil {
		return m.TopicRewardAlpha
	}
	return 0
}

func (m *Params) GetMaxSamplesToScaleScores() uint64 {
	if m != nil {
		return m.MaxSamplesToScaleScores
	}
	return 0
}

type Topic struct {
	Id               uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator          string  `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Metadata         string  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LossLogic        string  `protobuf:"bytes,4,opt,name=loss_logic,json=lossLogic,proto3" json:"loss_logic,omitempty"`
	LossMethod       string  `protobuf:"bytes,5,opt,name=loss_method,json=lossMethod,proto3" json:"loss_method,omitempty"`
	InferenceLogic   string  `protobuf:"bytes,6,opt,name=inference_logic,json=inferenceLogic,proto3" json:"inference_logic,omitempty"`
	InferenceMethod  string  `protobuf:"bytes,7,opt,name=inference_method,json=inferenceMethod,proto3" json:"inference_method,omitempty"`
	EpochLastEnded   int64   `protobuf:"varint,8,opt,name=epoch_last_ended,json=epochLastEnded,proto3" json:"epoch_last_ended,omitempty"`
	EpochLength      int64   `protobuf:"varint,9,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	GroundTruthLag   int64   `protobuf:"varint,10,opt,name=ground_truth_lag,json=groundTruthLag,proto3" json:"ground_truth_lag,omitempty"`
	Active           bool    `protobuf:"varint,11,opt,name=active,proto3" json:"active,omitempty"`
	DefaultArg       string  `protobuf:"bytes,12,opt,name=default_arg,json=defaultArg,proto3" json:"default_arg,omitempty"`
	Pnorm            uint64  `protobuf:"varint,13,opt,name=pnorm,proto3" json:"pnorm,omitempty"`
	AlphaRegret      float64 `protobuf:"fixed64,14,opt,name=alpha_regret,json=alphaRegret,proto3" json:"alpha_regret,omitempty"`
	PrewardReputer   float64 `protobuf:"fixed64,15,opt,name=preward_reputer,json=prewardReputer,proto3" json:"preward_reputer,omitempty"`
	PrewardInference float64 `protobuf:"fixed64,16,opt,name=preward_inference,json=prewardInference,proto3" json:"preward_inference,omitempty"`
	PrewardForecast  float64 `protobuf:"fixed64,17,opt,name=preward_forecast,json=prewardForecast,proto3" json:"preward_forecast,omitempty"`
	FTolerance       float64 `protobuf:"fixed64,18,opt,name=f_tolerance,json=fTolerance,proto3" json:"f_tolerance,omitempty"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{1}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Topic) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Topic) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Topic) GetLossLogic() string {
	if m != nil {
		return m.LossLogic
	}
	return ""
}

func (m *Topic) GetLossMethod() string {
	if m != nil {
		return m.LossMethod
	}
	return ""
}

func (m *Topic) GetInferenceLogic() string {
	if m != nil {
		return m.InferenceLogic
	}
	return ""
}

func (m *Topic) GetInferenceMethod() string {
	if m != nil {
		return m.InferenceMethod
	}
	return ""
}

func (m *Topic) GetEpochLastEnded() int64 {
	if m != nil {
		return m.EpochLastEnded
	}
	return 0
}

func (m *Topic) GetEpochLength() int64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *Topic) GetGroundTruthLag() int64 {
	if m != nil {
		return m.GroundTruthLag
	}
	return 0
}

func (m *Topic) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Topic) GetDefaultArg() string {
	if m != nil {
		return m.DefaultArg
	}
	return ""
}

func (m *Topic) GetPnorm() uint64 {
	if m != nil {
		return m.Pnorm
	}
	return 0
}

func (m *Topic) GetAlphaRegret() float64 {
	if m != nil {
		return m.AlphaRegret
	}
	return 0
}

func (m *Topic) GetPrewardReputer() float64 {
	if m != nil {
		return m.PrewardReputer
	}
	return 0
}

func (m *Topic) GetPrewardInference() float64 {
	if m != nil {
		return m.PrewardInference
	}
	return 0
}

func (m *Topic) GetPrewardForecast() float64 {
	if m != nil {
		return m.PrewardForecast
	}
	return 0
}

func (m *Topic) GetFTolerance() float64 {
	if m != nil {
		return m.FTolerance
	}
	return 0
}

type TopicList struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *TopicList) Reset()         { *m = TopicList{} }
func (m *TopicList) String() string { return proto.CompactTextString(m) }
func (*TopicList) ProtoMessage()    {}
func (*TopicList) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{2}
}
func (m *TopicList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicList.Merge(m, src)
}
func (m *TopicList) XXX_Size() int {
	return m.Size()
}
func (m *TopicList) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicList.DiscardUnknown(m)
}

var xxx_messageInfo_TopicList proto.InternalMessageInfo

func (m *TopicList) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type WorkerAttributedValue struct {
	Worker string  `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Value  float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WorkerAttributedValue) Reset()         { *m = WorkerAttributedValue{} }
func (m *WorkerAttributedValue) String() string { return proto.CompactTextString(m) }
func (*WorkerAttributedValue) ProtoMessage()    {}
func (*WorkerAttributedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{3}
}
func (m *WorkerAttributedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerAttributedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerAttributedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerAttributedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerAttributedValue.Merge(m, src)
}
func (m *WorkerAttributedValue) XXX_Size() int {
	return m.Size()
}
func (m *WorkerAttributedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerAttributedValue.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerAttributedValue proto.InternalMessageInfo

func (m *WorkerAttributedValue) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WorkerAttributedValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type WithheldWorkerAttributedValue struct {
	Worker string  `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Value  float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WithheldWorkerAttributedValue) Reset()         { *m = WithheldWorkerAttributedValue{} }
func (m *WithheldWorkerAttributedValue) String() string { return proto.CompactTextString(m) }
func (*WithheldWorkerAttributedValue) ProtoMessage()    {}
func (*WithheldWorkerAttributedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{4}
}
func (m *WithheldWorkerAttributedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithheldWorkerAttributedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithheldWorkerAttributedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithheldWorkerAttributedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithheldWorkerAttributedValue.Merge(m, src)
}
func (m *WithheldWorkerAttributedValue) XXX_Size() int {
	return m.Size()
}
func (m *WithheldWorkerAttributedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WithheldWorkerAttributedValue.DiscardUnknown(m)
}

var xxx_messageInfo_WithheldWorkerAttributedValue proto.InternalMessageInfo

func (m *WithheldWorkerAttributedValue) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WithheldWorkerAttributedValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// These losses and inferences are calculated per reputer or by the network
// The `m`s in the comments below exist for when they're made by reputers,
// but they may be absent implying that they were made by the network
type ValueBundle struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	ExtraData []byte `protobuf:"bytes,2,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// R_im || log10 L_im || I_i
	CombinedValue float64 `protobuf:"fixed64,3,opt,name=combined_value,json=combinedValue,proto3" json:"combined_value,omitempty"`
	// R_ijm || log10 L_ijm || I_ij
	InfererValues []*WorkerAttributedValue `protobuf:"bytes,4,rep,name=inferer_values,json=infererValues,proto3" json:"inferer_values,omitempty"`
	// R_ikm || log10 L_ikm || I_ik
	ForecasterValues []*WorkerAttributedValue `protobuf:"bytes,5,rep,name=forecaster_values,json=forecasterValues,proto3" json:"forecaster_values,omitempty"`
	// R^-_im  || log10 L^-_im || I^-_i
	NaiveValue float64 `protobuf:"fixed64,6,opt,name=naive_value,json=naiveValue,proto3" json:"naive_value,omitempty"`
	// R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
	// Note: forecast-implied inferences are recomputed for each left-out inference
	OneOutInfererValues []*WithheldWorkerAttributedValue `protobuf:"bytes,7,rep,name=one_out_inferer_values,json=oneOutInfererValues,proto3" json:"one_out_inferer_values,omitempty"`
	// R^-_ilm || log10 L^-_ilm || I^-_il where l = any k
	OneOutForecasterValues []*WithheldWorkerAttributedValue `protobuf:"bytes,8,rep,name=one_out_forecaster_values,json=oneOutForecasterValues,proto3" json:"one_out_forecaster_values,omitempty"`
	// R^+_ikm || log10 L^+_ikm || I^+_ik
	// aka one_in_forecaster_values because equivalent to using only one forecast-implied inference
	OneInForecasterValues []*WorkerAttributedValue `protobuf:"bytes,9,rep,name=one_in_forecaster_values,json=oneInForecasterValues,proto3" json:"one_in_forecaster_values,omitempty"`
}

func (m *ValueBundle) Reset()         { *m = ValueBundle{} }
func (m *ValueBundle) String() string { return proto.CompactTextString(m) }
func (*ValueBundle) ProtoMessage()    {}
func (*ValueBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{5}
}
func (m *ValueBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueBundle.Merge(m, src)
}
func (m *ValueBundle) XXX_Size() int {
	return m.Size()
}
func (m *ValueBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ValueBundle proto.InternalMessageInfo

func (m *ValueBundle) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *ValueBundle) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ValueBundle) GetCombinedValue() float64 {
	if m != nil {
		return m.CombinedValue
	}
	return 0
}

func (m *ValueBundle) GetInfererValues() []*WorkerAttributedValue {
	if m != nil {
		return m.InfererValues
	}
	return nil
}

func (m *ValueBundle) GetForecasterValues() []*WorkerAttributedValue {
	if m != nil {
		return m.ForecasterValues
	}
	return nil
}

func (m *ValueBundle) GetNaiveValue() float64 {
	if m != nil {
		return m.NaiveValue
	}
	return 0
}

func (m *ValueBundle) GetOneOutInfererValues() []*WithheldWorkerAttributedValue {
	if m != nil {
		return m.OneOutInfererValues
	}
	return nil
}

func (m *ValueBundle) GetOneOutForecasterValues() []*WithheldWorkerAttributedValue {
	if m != nil {
		return m.OneOutForecasterValues
	}
	return nil
}

func (m *ValueBundle) GetOneInForecasterValues() []*WorkerAttributedValue {
	if m != nil {
		return m.OneInForecasterValues
	}
	return nil
}

// For when the bundle is computed on a per-reputer basis (ie.. if there is an index `m` in the above)
type ReputerValueBundle struct {
	Reputer     string       `protobuf:"bytes,1,opt,name=reputer,proto3" json:"reputer,omitempty"`
	ValueBundle *ValueBundle `protobuf:"bytes,2,opt,name=value_bundle,json=valueBundle,proto3" json:"value_bundle,omitempty"`
}

func (m *ReputerValueBundle) Reset()         { *m = ReputerValueBundle{} }
func (m *ReputerValueBundle) String() string { return proto.CompactTextString(m) }
func (*ReputerValueBundle) ProtoMessage()    {}
func (*ReputerValueBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{6}
}
func (m *ReputerValueBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputerValueBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputerValueBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputerValueBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputerValueBundle.Merge(m, src)
}
func (m *ReputerValueBundle) XXX_Size() int {
	return m.Size()
}
func (m *ReputerValueBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputerValueBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ReputerValueBundle proto.InternalMessageInfo

func (m *ReputerValueBundle) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *ReputerValueBundle) GetValueBundle() *ValueBundle {
	if m != nil {
		return m.ValueBundle
	}
	return nil
}

type ReputerValueBundles struct {
	ReputerValueBundles []*ReputerValueBundle `protobuf:"bytes,1,rep,name=reputer_value_bundles,json=reputerValueBundles,proto3" json:"reputer_value_bundles,omitempty"`
}

func (m *ReputerValueBundles) Reset()         { *m = ReputerValueBundles{} }
func (m *ReputerValueBundles) String() string { return proto.CompactTextString(m) }
func (*ReputerValueBundles) ProtoMessage()    {}
func (*ReputerValueBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{7}
}
func (m *ReputerValueBundles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputerValueBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputerValueBundles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputerValueBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputerValueBundles.Merge(m, src)
}
func (m *ReputerValueBundles) XXX_Size() int {
	return m.Size()
}
func (m *ReputerValueBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputerValueBundles.DiscardUnknown(m)
}

var xxx_messageInfo_ReputerValueBundles proto.InternalMessageInfo

func (m *ReputerValueBundles) GetReputerValueBundles() []*ReputerValueBundle {
	if m != nil {
		return m.ReputerValueBundles
	}
	return nil
}

type TimestampedValue struct {
	BlockHeight int64   `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Value       float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TimestampedValue) Reset()         { *m = TimestampedValue{} }
func (m *TimestampedValue) String() string { return proto.CompactTextString(m) }
func (*TimestampedValue) ProtoMessage()    {}
func (*TimestampedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{8}
}
func (m *TimestampedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampedValue.Merge(m, src)
}
func (m *TimestampedValue) XXX_Size() int {
	return m.Size()
}
func (m *TimestampedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampedValue.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampedValue proto.InternalMessageInfo

func (m *TimestampedValue) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TimestampedValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Inference struct {
	TopicId   uint64  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker    string  `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	ExtraData []byte  `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Proof     string  `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Inference) Reset()         { *m = Inference{} }
func (m *Inference) String() string { return proto.CompactTextString(m) }
func (*Inference) ProtoMessage()    {}
func (*Inference) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{9}
}
func (m *Inference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inference.Merge(m, src)
}
func (m *Inference) XXX_Size() int {
	return m.Size()
}
func (m *Inference) XXX_DiscardUnknown() {
	xxx_messageInfo_Inference.DiscardUnknown(m)
}

var xxx_messageInfo_Inference proto.InternalMessageInfo

func (m *Inference) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Inference) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *Inference) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Inference) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *Inference) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Inferences struct {
	Inferences []*Inference `protobuf:"bytes,1,rep,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *Inferences) Reset()         { *m = Inferences{} }
func (m *Inferences) String() string { return proto.CompactTextString(m) }
func (*Inferences) ProtoMessage()    {}
func (*Inferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{10}
}
func (m *Inferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inferences.Merge(m, src)
}
func (m *Inferences) XXX_Size() int {
	return m.Size()
}
func (m *Inferences) XXX_DiscardUnknown() {
	xxx_messageInfo_Inferences.DiscardUnknown(m)
}

var xxx_messageInfo_Inferences proto.InternalMessageInfo

func (m *Inferences) GetInferences() []*Inference {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type ForecastElement struct {
	Inferer   string  `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
	Value     float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	ExtraData []byte  `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Proof     string  `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *ForecastElement) Reset()         { *m = ForecastElement{} }
func (m *ForecastElement) String() string { return proto.CompactTextString(m) }
func (*ForecastElement) ProtoMessage()    {}
func (*ForecastElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{11}
}
func (m *ForecastElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecastElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForecastElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForecastElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastElement.Merge(m, src)
}
func (m *ForecastElement) XXX_Size() int {
	return m.Size()
}
func (m *ForecastElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastElement.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastElement proto.InternalMessageInfo

func (m *ForecastElement) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

func (m *ForecastElement) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ForecastElement) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ForecastElement) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Forecast struct {
	TopicId          uint64             `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster       string             `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	ForecastElements []*ForecastElement `protobuf:"bytes,3,rep,name=forecast_elements,json=forecastElements,proto3" json:"forecast_elements,omitempty"`
}

func (m *Forecast) Reset()         { *m = Forecast{} }
func (m *Forecast) String() string { return proto.CompactTextString(m) }
func (*Forecast) ProtoMessage()    {}
func (*Forecast) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{12}
}
func (m *Forecast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecast.Merge(m, src)
}
func (m *Forecast) XXX_Size() int {
	return m.Size()
}
func (m *Forecast) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecast.DiscardUnknown(m)
}

var xxx_messageInfo_Forecast proto.InternalMessageInfo

func (m *Forecast) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Forecast) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *Forecast) GetForecastElements() []*ForecastElement {
	if m != nil {
		return m.ForecastElements
	}
	return nil
}

type Forecasts struct {
	Forecasts []*Forecast `protobuf:"bytes,1,rep,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *Forecasts) Reset()         { *m = Forecasts{} }
func (m *Forecasts) String() string { return proto.CompactTextString(m) }
func (*Forecasts) ProtoMessage()    {}
func (*Forecasts) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{13}
}
func (m *Forecasts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecasts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecasts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecasts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecasts.Merge(m, src)
}
func (m *Forecasts) XXX_Size() int {
	return m.Size()
}
func (m *Forecasts) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecasts.DiscardUnknown(m)
}

var xxx_messageInfo_Forecasts proto.InternalMessageInfo

func (m *Forecasts) GetForecasts() []*Forecast {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type OffchainNode struct {
	LibP2PKey    string `protobuf:"bytes,1,opt,name=lib_p2p_key,json=libP2pKey,proto3" json:"lib_p2p_key,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multi_address,json=multiAddress,proto3" json:"multi_address,omitempty"`
	Owner        string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	NodeAddress  string `protobuf:"bytes,4,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	NodeId       string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *OffchainNode) Reset()         { *m = OffchainNode{} }
func (m *OffchainNode) String() string { return proto.CompactTextString(m) }
func (*OffchainNode) ProtoMessage()    {}
func (*OffchainNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{14}
}
func (m *OffchainNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffchainNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffchainNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffchainNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffchainNode.Merge(m, src)
}
func (m *OffchainNode) XXX_Size() int {
	return m.Size()
}
func (m *OffchainNode) XXX_DiscardUnknown() {
	xxx_messageInfo_OffchainNode.DiscardUnknown(m)
}

var xxx_messageInfo_OffchainNode proto.InternalMessageInfo

func (m *OffchainNode) GetLibP2PKey() string {
	if m != nil {
		return m.LibP2PKey
	}
	return ""
}

func (m *OffchainNode) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

func (m *OffchainNode) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OffchainNode) GetNodeAddress() string {
	if m != nil {
		return m.NodeAddress
	}
	return ""
}

func (m *OffchainNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type OffchainNodes struct {
	OffchainNode []*Inference `protobuf:"bytes,1,rep,name=offchain_node,json=offchainNode,proto3" json:"offchain_node,omitempty"`
}

func (m *OffchainNodes) Reset()         { *m = OffchainNodes{} }
func (m *OffchainNodes) String() string { return proto.CompactTextString(m) }
func (*OffchainNodes) ProtoMessage()    {}
func (*OffchainNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{15}
}
func (m *OffchainNodes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OffchainNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OffchainNodes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OffchainNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OffchainNodes.Merge(m, src)
}
func (m *OffchainNodes) XXX_Size() int {
	return m.Size()
}
func (m *OffchainNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_OffchainNodes.DiscardUnknown(m)
}

var xxx_messageInfo_OffchainNodes proto.InternalMessageInfo

func (m *OffchainNodes) GetOffchainNode() []*Inference {
	if m != nil {
		return m.OffchainNode
	}
	return nil
}

type InferenceSetForScoring struct {
	TopicId     uint64      `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64       `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Inferences  *Inferences `protobuf:"bytes,3,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *InferenceSetForScoring) Reset()         { *m = InferenceSetForScoring{} }
func (m *InferenceSetForScoring) String() string { return proto.CompactTextString(m) }
func (*InferenceSetForScoring) ProtoMessage()    {}
func (*InferenceSetForScoring) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{16}
}
func (m *InferenceSetForScoring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceSetForScoring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceSetForScoring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceSetForScoring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceSetForScoring.Merge(m, src)
}
func (m *InferenceSetForScoring) XXX_Size() int {
	return m.Size()
}
func (m *InferenceSetForScoring) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceSetForScoring.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceSetForScoring proto.InternalMessageInfo

func (m *InferenceSetForScoring) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *InferenceSetForScoring) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *InferenceSetForScoring) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type ForecastSetForScoring struct {
	TopicId     uint64     `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Forecasts   *Forecasts `protobuf:"bytes,3,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *ForecastSetForScoring) Reset()         { *m = ForecastSetForScoring{} }
func (m *ForecastSetForScoring) String() string { return proto.CompactTextString(m) }
func (*ForecastSetForScoring) ProtoMessage()    {}
func (*ForecastSetForScoring) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{17}
}
func (m *ForecastSetForScoring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecastSetForScoring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForecastSetForScoring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForecastSetForScoring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastSetForScoring.Merge(m, src)
}
func (m *ForecastSetForScoring) XXX_Size() int {
	return m.Size()
}
func (m *ForecastSetForScoring) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastSetForScoring.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastSetForScoring proto.InternalMessageInfo

func (m *ForecastSetForScoring) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *ForecastSetForScoring) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ForecastSetForScoring) GetForecasts() *Forecasts {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type StakePlacement struct {
	TopicId uint64                 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string                 `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	Amount  cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *StakePlacement) Reset()         { *m = StakePlacement{} }
func (m *StakePlacement) String() string { return proto.CompactTextString(m) }
func (*StakePlacement) ProtoMessage()    {}
func (*StakePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{18}
}
func (m *StakePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakePlacement.Merge(m, src)
}
func (m *StakePlacement) XXX_Size() int {
	return m.Size()
}
func (m *StakePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_StakePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_StakePlacement proto.InternalMessageInfo

func (m *StakePlacement) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *StakePlacement) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type StakeRemoval struct {
	BlockRemovalStarted int64             `protobuf:"varint,1,opt,name=block_removal_started,json=blockRemovalStarted,proto3" json:"block_removal_started,omitempty"`
	Placements          []*StakePlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
}

func (m *StakeRemoval) Reset()         { *m = StakeRemoval{} }
func (m *StakeRemoval) String() string { return proto.CompactTextString(m) }
func (*StakeRemoval) ProtoMessage()    {}
func (*StakeRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{19}
}
func (m *StakeRemoval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRemoval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRemoval.Merge(m, src)
}
func (m *StakeRemoval) XXX_Size() int {
	return m.Size()
}
func (m *StakeRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRemoval proto.InternalMessageInfo

func (m *StakeRemoval) GetBlockRemovalStarted() int64 {
	if m != nil {
		return m.BlockRemovalStarted
	}
	return 0
}

func (m *StakeRemoval) GetPlacements() []*StakePlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

type DelegatedStakePlacement struct {
	TopicId   uint64                 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer   string                 `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
	Delegator string                 `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Amount    cosmossdk_io_math.Uint `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
}

func (m *DelegatedStakePlacement) Reset()         { *m = DelegatedStakePlacement{} }
func (m *DelegatedStakePlacement) String() string { return proto.CompactTextString(m) }
func (*DelegatedStakePlacement) ProtoMessage()    {}
func (*DelegatedStakePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{20}
}
func (m *DelegatedStakePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedStakePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedStakePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedStakePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedStakePlacement.Merge(m, src)
}
func (m *DelegatedStakePlacement) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedStakePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedStakePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedStakePlacement proto.InternalMessageInfo

func (m *DelegatedStakePlacement) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *DelegatedStakePlacement) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *DelegatedStakePlacement) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

type DelegatedStakeRemoval struct {
	BlockRemovalStarted int64                      `protobuf:"varint,1,opt,name=block_removal_started,json=blockRemovalStarted,proto3" json:"block_removal_started,omitempty"`
	Placements          []*DelegatedStakePlacement `protobuf:"bytes,2,rep,name=placements,proto3" json:"placements,omitempty"`
}

func (m *DelegatedStakeRemoval) Reset()         { *m = DelegatedStakeRemoval{} }
func (m *DelegatedStakeRemoval) String() string { return proto.CompactTextString(m) }
func (*DelegatedStakeRemoval) ProtoMessage()    {}
func (*DelegatedStakeRemoval) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{21}
}
func (m *DelegatedStakeRemoval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedStakeRemoval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedStakeRemoval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedStakeRemoval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedStakeRemoval.Merge(m, src)
}
func (m *DelegatedStakeRemoval) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedStakeRemoval) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedStakeRemoval.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedStakeRemoval proto.InternalMessageInfo

func (m *DelegatedStakeRemoval) GetBlockRemovalStarted() int64 {
	if m != nil {
		return m.BlockRemovalStarted
	}
	return 0
}

func (m *DelegatedStakeRemoval) GetPlacements() []*DelegatedStakePlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

type Score struct {
	TopicId     uint64  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockNumber int64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address     string  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Score       float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *Score) Reset()         { *m = Score{} }
func (m *Score) String() string { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()    {}
func (*Score) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{22}
}
func (m *Score) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Score) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Score.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Score) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Score.Merge(m, src)
}
func (m *Score) XXX_Size() int {
	return m.Size()
}
func (m *Score) XXX_DiscardUnknown() {
	xxx_messageInfo_Score.DiscardUnknown(m)
}

var xxx_messageInfo_Score proto.InternalMessageInfo

func (m *Score) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Score) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Score) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Score) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Scores struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *Scores) Reset()         { *m = Scores{} }
func (m *Scores) String() string { return proto.CompactTextString(m) }
func (*Scores) ProtoMessage()    {}
func (*Scores) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{23}
}
func (m *Scores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Scores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Scores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Scores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scores.Merge(m, src)
}
func (m *Scores) XXX_Size() int {
	return m.Size()
}
func (m *Scores) XXX_DiscardUnknown() {
	xxx_messageInfo_Scores.DiscardUnknown(m)
}

var xxx_messageInfo_Scores proto.InternalMessageInfo

func (m *Scores) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type AverageWorkerReward struct {
	Count uint32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AverageWorkerReward) Reset()         { *m = AverageWorkerReward{} }
func (m *AverageWorkerReward) String() string { return proto.CompactTextString(m) }
func (*AverageWorkerReward) ProtoMessage()    {}
func (*AverageWorkerReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{24}
}
func (m *AverageWorkerReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AverageWorkerReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AverageWorkerReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AverageWorkerReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AverageWorkerReward.Merge(m, src)
}
func (m *AverageWorkerReward) XXX_Size() int {
	return m.Size()
}
func (m *AverageWorkerReward) XXX_DiscardUnknown() {
	xxx_messageInfo_AverageWorkerReward.DiscardUnknown(m)
}

var xxx_messageInfo_AverageWorkerReward proto.InternalMessageInfo

func (m *AverageWorkerReward) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AverageWorkerReward) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// / LISTENING COEFFICIENTS
type ListeningCoefficient struct {
	Coefficient float64 `protobuf:"fixed64,3,opt,name=coefficient,proto3" json:"coefficient,omitempty"`
}

func (m *ListeningCoefficient) Reset()         { *m = ListeningCoefficient{} }
func (m *ListeningCoefficient) String() string { return proto.CompactTextString(m) }
func (*ListeningCoefficient) ProtoMessage()    {}
func (*ListeningCoefficient) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{25}
}
func (m *ListeningCoefficient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListeningCoefficient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListeningCoefficient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListeningCoefficient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListeningCoefficient.Merge(m, src)
}
func (m *ListeningCoefficient) XXX_Size() int {
	return m.Size()
}
func (m *ListeningCoefficient) XXX_DiscardUnknown() {
	xxx_messageInfo_ListeningCoefficient.DiscardUnknown(m)
}

var xxx_messageInfo_ListeningCoefficient proto.InternalMessageInfo

func (m *ListeningCoefficient) GetCoefficient() float64 {
	if m != nil {
		return m.Coefficient
	}
	return 0
}

// num_inference_possible = bid_amount / max_price_per_inference,
// length of time this inference repeats for =  num_inference_possible * cadence
type InferenceRequest struct {
	Sender               string                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Nonce                uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TopicId              uint64                 `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Cadence              int64                  `protobuf:"varint,4,opt,name=cadence,proto3" json:"cadence,omitempty"`
	MaxPricePerInference cosmossdk_io_math.Uint `protobuf:"bytes,5,opt,name=max_price_per_inference,json=maxPricePerInference,proto3,customtype=cosmossdk.io/math.Uint" json:"max_price_per_inference"`
	BidAmount            cosmossdk_io_math.Uint `protobuf:"bytes,6,opt,name=bid_amount,json=bidAmount,proto3,customtype=cosmossdk.io/math.Uint" json:"bid_amount"`
	BlockLastChecked     int64                  `protobuf:"varint,7,opt,name=block_last_checked,json=blockLastChecked,proto3" json:"block_last_checked,omitempty"`
	BlockValidUntil      int64                  `protobuf:"varint,8,opt,name=block_valid_until,json=blockValidUntil,proto3" json:"block_valid_until,omitempty"`
	ExtraData            []byte                 `protobuf:"bytes,9,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *InferenceRequest) Reset()         { *m = InferenceRequest{} }
func (m *InferenceRequest) String() string { return proto.CompactTextString(m) }
func (*InferenceRequest) ProtoMessage()    {}
func (*InferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{26}
}
func (m *InferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceRequest.Merge(m, src)
}
func (m *InferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *InferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceRequest proto.InternalMessageInfo

func (m *InferenceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InferenceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *InferenceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *InferenceRequest) GetCadence() int64 {
	if m != nil {
		return m.Cadence
	}
	return 0
}

func (m *InferenceRequest) GetBlockLastChecked() int64 {
	if m != nil {
		return m.BlockLastChecked
	}
	return 0
}

func (m *InferenceRequest) GetBlockValidUntil() int64 {
	if m != nil {
		return m.BlockValidUntil
	}
	return 0
}

func (m *InferenceRequest) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

type Nonce struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}
func (*Nonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{27}
}
func (m *Nonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonce.Merge(m, src)
}
func (m *Nonce) XXX_Size() int {
	return m.Size()
}
func (m *Nonce) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonce.DiscardUnknown(m)
}

var xxx_messageInfo_Nonce proto.InternalMessageInfo

func (m *Nonce) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type Nonces struct {
	Nonces []*Nonce `protobuf:"bytes,1,rep,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *Nonces) Reset()         { *m = Nonces{} }
func (m *Nonces) String() string { return proto.CompactTextString(m) }
func (*Nonces) ProtoMessage()    {}
func (*Nonces) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{28}
}
func (m *Nonces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nonces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nonces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nonces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nonces.Merge(m, src)
}
func (m *Nonces) XXX_Size() int {
	return m.Size()
}
func (m *Nonces) XXX_DiscardUnknown() {
	xxx_messageInfo_Nonces.DiscardUnknown(m)
}

var xxx_messageInfo_Nonces proto.InternalMessageInfo

func (m *Nonces) GetNonces() []*Nonce {
	if m != nil {
		return m.Nonces
	}
	return nil
}

// stores the amount of fees collected by a topic
// in the last reward epoch
type TopicFeeRevenue struct {
	Epoch   uint64                `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Revenue cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=revenue,proto3,customtype=cosmossdk.io/math.Int" json:"revenue"`
}

func (m *TopicFeeRevenue) Reset()         { *m = TopicFeeRevenue{} }
func (m *TopicFeeRevenue) String() string { return proto.CompactTextString(m) }
func (*TopicFeeRevenue) ProtoMessage()    {}
func (*TopicFeeRevenue) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{29}
}
func (m *TopicFeeRevenue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicFeeRevenue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicFeeRevenue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicFeeRevenue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicFeeRevenue.Merge(m, src)
}
func (m *TopicFeeRevenue) XXX_Size() int {
	return m.Size()
}
func (m *TopicFeeRevenue) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicFeeRevenue.DiscardUnknown(m)
}

var xxx_messageInfo_TopicFeeRevenue proto.InternalMessageInfo

func (m *TopicFeeRevenue) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type PreviousTopicWeight struct {
	Epoch  uint64  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Weight float64 `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *PreviousTopicWeight) Reset()         { *m = PreviousTopicWeight{} }
func (m *PreviousTopicWeight) String() string { return proto.CompactTextString(m) }
func (*PreviousTopicWeight) ProtoMessage()    {}
func (*PreviousTopicWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ba9f7333c0b525, []int{30}
}
func (m *PreviousTopicWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreviousTopicWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreviousTopicWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreviousTopicWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreviousTopicWeight.Merge(m, src)
}
func (m *PreviousTopicWeight) XXX_Size() int {
	return m.Size()
}
func (m *PreviousTopicWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_PreviousTopicWeight.DiscardUnknown(m)
}

var xxx_messageInfo_PreviousTopicWeight proto.InternalMessageInfo

func (m *PreviousTopicWeight) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PreviousTopicWeight) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "emissions.v1.Params")
	proto.RegisterType((*Topic)(nil), "emissions.v1.Topic")
	proto.RegisterType((*TopicList)(nil), "emissions.v1.TopicList")
	proto.RegisterType((*WorkerAttributedValue)(nil), "emissions.v1.WorkerAttributedValue")
	proto.RegisterType((*WithheldWorkerAttributedValue)(nil), "emissions.v1.WithheldWorkerAttributedValue")
	proto.RegisterType((*ValueBundle)(nil), "emissions.v1.ValueBundle")
	proto.RegisterType((*ReputerValueBundle)(nil), "emissions.v1.ReputerValueBundle")
	proto.RegisterType((*ReputerValueBundles)(nil), "emissions.v1.ReputerValueBundles")
	proto.RegisterType((*TimestampedValue)(nil), "emissions.v1.TimestampedValue")
	proto.RegisterType((*Inference)(nil), "emissions.v1.Inference")
	proto.RegisterType((*Inferences)(nil), "emissions.v1.Inferences")
	proto.RegisterType((*ForecastElement)(nil), "emissions.v1.ForecastElement")
	proto.RegisterType((*Forecast)(nil), "emissions.v1.Forecast")
	proto.RegisterType((*Forecasts)(nil), "emissions.v1.Forecasts")
	proto.RegisterType((*OffchainNode)(nil), "emissions.v1.OffchainNode")
	proto.RegisterType((*OffchainNodes)(nil), "emissions.v1.OffchainNodes")
	proto.RegisterType((*InferenceSetForScoring)(nil), "emissions.v1.InferenceSetForScoring")
	proto.RegisterType((*ForecastSetForScoring)(nil), "emissions.v1.ForecastSetForScoring")
	proto.RegisterType((*StakePlacement)(nil), "emissions.v1.StakePlacement")
	proto.RegisterType((*StakeRemoval)(nil), "emissions.v1.StakeRemoval")
	proto.RegisterType((*DelegatedStakePlacement)(nil), "emissions.v1.DelegatedStakePlacement")
	proto.RegisterType((*DelegatedStakeRemoval)(nil), "emissions.v1.DelegatedStakeRemoval")
	proto.RegisterType((*Score)(nil), "emissions.v1.Score")
	proto.RegisterType((*Scores)(nil), "emissions.v1.Scores")
	proto.RegisterType((*AverageWorkerReward)(nil), "emissions.v1.AverageWorkerReward")
	proto.RegisterType((*ListeningCoefficient)(nil), "emissions.v1.ListeningCoefficient")
	proto.RegisterType((*InferenceRequest)(nil), "emissions.v1.InferenceRequest")
	proto.RegisterType((*Nonce)(nil), "emissions.v1.Nonce")
	proto.RegisterType((*Nonces)(nil), "emissions.v1.Nonces")
	proto.RegisterType((*TopicFeeRevenue)(nil), "emissions.v1.TopicFeeRevenue")
	proto.RegisterType((*PreviousTopicWeight)(nil), "emissions.v1.PreviousTopicWeight")
}

func init() { proto.RegisterFile("emissions/v1/types.proto", fileDescriptor_32ba9f7333c0b525) }

var fileDescriptor_32ba9f7333c0b525 = []byte{
	// 2518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4b, 0x6f, 0x1c, 0xc7,
	0xf1, 0xd7, 0x88, 0xcf, 0xad, 0xe5, 0xb3, 0xf9, 0xd0, 0x50, 0x12, 0x1f, 0xff, 0x15, 0x0c, 0xf3,
	0xef, 0x07, 0x19, 0x2b, 0x36, 0xa2, 0x04, 0x42, 0x90, 0x95, 0x44, 0x39, 0x94, 0x29, 0x9b, 0x1e,
	0x51, 0x16, 0x10, 0x04, 0xe8, 0xf4, 0xce, 0xf4, 0xee, 0x36, 0x38, 0x33, 0xbd, 0xe9, 0xee, 0x5d,
	0x2d, 0x81, 0x1c, 0x7c, 0x0e, 0x02, 0xc4, 0xc9, 0x25, 0xd7, 0x5c, 0x02, 0xe4, 0x90, 0x43, 0x0e,
	0x3e, 0xe4, 0x23, 0xf8, 0x68, 0xf8, 0x14, 0x24, 0x80, 0x11, 0xd8, 0x87, 0xe4, 0x90, 0x0f, 0x11,
	0x74, 0x75, 0xcf, 0xce, 0xee, 0x92, 0x56, 0x1c, 0x49, 0x17, 0x82, 0x55, 0x5d, 0xfd, 0xeb, 0xea,
	0x5f, 0x57, 0x55, 0x77, 0xcd, 0x42, 0xc8, 0x33, 0xa1, 0xb5, 0x90, 0xb9, 0xde, 0xef, 0xbd, 0xb5,
	0x6f, 0xce, 0x3a, 0x5c, 0xef, 0x75, 0x94, 0x34, 0x92, 0xcc, 0x0d, 0x46, 0xf6, 0x7a, 0x6f, 0x5d,
	0xdd, 0x88, 0xa5, 0xce, 0xa4, 0xa6, 0x38, 0xb6, 0xef, 0x04, 0x67, 0x78, 0x75, 0x99, 0x65, 0x22,
	0x97, 0xfb, 0xf8, 0xd7, 0xab, 0x56, 0x5b, 0xb2, 0x25, 0x9d, 0xa9, 0xfd, 0xcf, 0x69, 0x6b, 0x1f,
	0x2f, 0xc2, 0xf4, 0x31, 0x53, 0x2c, 0xd3, 0x24, 0x84, 0x99, 0x1e, 0x57, 0x16, 0x3d, 0x0c, 0x76,
	0x82, 0xdd, 0x4a, 0x54, 0x88, 0xe4, 0x15, 0x58, 0x50, 0xfc, 0x29, 0x53, 0x09, 0x8d, 0x59, 0xc2,
	0xf3, 0x98, 0x87, 0x97, 0x77, 0x82, 0xdd, 0x89, 0x68, 0xde, 0x69, 0xef, 0x3a, 0x25, 0x69, 0xc1,
	0x7a, 0x26, 0x72, 0x6a, 0x64, 0x47, 0xc4, 0xb4, 0x9b, 0x67, 0xdc, 0xd0, 0x84, 0x67, 0x2c, 0x4f,
	0xc2, 0x09, 0x8b, 0x77, 0xe7, 0xe6, 0x67, 0x5f, 0x6e, 0x5f, 0xfa, 0xdb, 0x97, 0xdb, 0xeb, 0xce,
	0x55, 0x9d, 0x9c, 0xee, 0x09, 0xb9, 0x9f, 0x31, 0xd3, 0xde, 0x7b, 0x2c, 0x72, 0xf3, 0xc5, 0xa7,
	0x6f, 0x56, 0xfd, 0x26, 0xac, 0xf8, 0xc7, 0x7f, 0xfe, 0xf9, 0xb5, 0x20, 0x5a, 0xc9, 0x44, 0x7e,
	0x62, 0x01, 0x1f, 0x5b, 0xbc, 0x7b, 0x08, 0x47, 0xf6, 0x61, 0x35, 0x63, 0x7d, 0xb7, 0x90, 0xa6,
	0x1d, 0xae, 0x68, 0x23, 0x95, 0xf1, 0x69, 0x38, 0xb9, 0x13, 0xec, 0x4e, 0x46, 0xcb, 0x19, 0xeb,
	0xe3, 0x14, 0x7d, 0xcc, 0xd5, 0x1d, 0x3b, 0x40, 0x4e, 0x21, 0xb4, 0x9e, 0x29, 0xfe, 0xf3, 0x2e,
	0xd7, 0x66, 0xd4, 0xb7, 0xa9, 0xe7, 0xf6, 0x6d, 0x2d, 0x13, 0x79, 0xe4, 0x20, 0x87, 0xbd, 0xab,
	0xc3, 0xa6, 0xf5, 0x0e, 0x4f, 0x2a, 0x6f, 0x51, 0x91, 0x37, 0xb9, 0xb2, 0xfc, 0x58, 0x47, 0x63,
	0x9e, 0x9b, 0x70, 0x7a, 0x27, 0xd8, 0x0d, 0xa2, 0xab, 0x19, 0xeb, 0x3f, 0x74, 0x36, 0x87, 0x85,
	0xc9, 0xb1, 0xb3, 0x20, 0x6d, 0x58, 0xb7, 0xbe, 0x0a, 0xc5, 0x13, 0x9a, 0x89, 0x5c, 0x64, 0xdd,
	0x8c, 0x6a, 0xc3, 0x4e, 0x79, 0x38, 0xf3, 0xdc, 0xde, 0xae, 0x16, 0x88, 0x0f, 0x1d, 0xe0, 0x23,
	0x8b, 0x47, 0xbe, 0x0f, 0x1b, 0x8a, 0x67, 0xb2, 0xc7, 0x1d, 0x3e, 0x4d, 0x78, 0xca, 0xce, 0xe8,
	0x53, 0x91, 0x27, 0xf2, 0x69, 0x38, 0x8b, 0xa7, 0xbc, 0xee, 0x0c, 0xd0, 0xfe, 0x9e, 0x1d, 0x7e,
	0x82, 0xa3, 0x64, 0x17, 0x96, 0x2c, 0xa9, 0xbc, 0x23, 0xe3, 0x36, 0x4d, 0x79, 0xde, 0x32, 0xed,
	0xb0, 0x82, 0x33, 0x16, 0x32, 0x91, 0x1f, 0x58, 0xf5, 0x11, 0x6a, 0xc9, 0x5d, 0xd8, 0xb2, 0x8c,
	0x94, 0x4c, 0x14, 0x07, 0xd1, 0x63, 0xa9, 0x48, 0x84, 0x39, 0x0b, 0x01, 0xe7, 0x5d, 0xcb, 0x58,
	0x7f, 0xc0, 0x85, 0x67, 0xf6, 0x23, 0x6f, 0x42, 0xf6, 0x60, 0xc5, 0x82, 0x14, 0x53, 0x8b, 0x48,
	0xac, 0xe2, 0x4c, 0x7b, 0xe6, 0x7e, 0x42, 0x11, 0x8d, 0xef, 0xc2, 0x8e, 0x27, 0x9c, 0xba, 0x30,
	0xd5, 0x54, 0xf1, 0x4e, 0xd7, 0x70, 0xa5, 0xe9, 0x53, 0xa9, 0x4e, 0xb9, 0xd2, 0xe1, 0x1c, 0x9e,
	0xc4, 0xa6, 0xb7, 0x8b, 0x9c, 0x59, 0xe4, 0xad, 0x9e, 0x38, 0x23, 0x72, 0x1d, 0x2a, 0xba, 0xcd,
	0x54, 0x27, 0xe7, 0x5a, 0x87, 0xf3, 0x38, 0xa3, 0x54, 0x90, 0xff, 0x83, 0xb9, 0x06, 0x37, 0x8c,
	0xf2, 0xdc, 0x28, 0xd9, 0x39, 0x0b, 0x17, 0xd0, 0xa0, 0x6a, 0x75, 0x07, 0x4e, 0x45, 0xae, 0x41,
	0x25, 0x89, 0x25, 0x6f, 0x52, 0xd6, 0xd0, 0xe1, 0x22, 0x8e, 0xcf, 0xa2, 0xa2, 0xde, 0xd0, 0xe4,
	0x06, 0xcc, 0xa7, 0x9c, 0xa9, 0xdc, 0x86, 0x8a, 0x62, 0x86, 0x87, 0x4b, 0x68, 0x30, 0x57, 0x28,
	0x23, 0x66, 0x38, 0x79, 0x1b, 0xd6, 0xed, 0xde, 0x5b, 0x8a, 0x25, 0xc2, 0x6e, 0xc8, 0xb4, 0x15,
	0xd7, 0x6d, 0x99, 0x26, 0xe1, 0x32, 0x5a, 0xdb, 0x74, 0x78, 0xd7, 0x0f, 0x9e, 0x14, 0x63, 0xe4,
	0x0d, 0x20, 0xf6, 0x80, 0xdc, 0xc1, 0x36, 0x15, 0x8b, 0x8d, 0xcd, 0x6d, 0x82, 0x33, 0xec, 0xd1,
	0xe1, 0x89, 0xde, 0xf7, 0x7a, 0xf2, 0x23, 0x17, 0xb6, 0x9e, 0x1a, 0xcc, 0x2a, 0x97, 0xc9, 0x9e,
	0xf1, 0x70, 0x05, 0xb3, 0x6b, 0x23, 0x63, 0x7d, 0xcf, 0xcc, 0x31, 0x57, 0x98, 0x67, 0x9e, 0x78,
	0x72, 0xc7, 0x1d, 0xf3, 0x80, 0xe5, 0xf3, 0x10, 0xab, 0x08, 0x71, 0x15, 0x0f, 0xcb, 0x19, 0x8d,
	0x63, 0x84, 0x30, 0xc3, 0x3b, 0x5a, 0xa4, 0x32, 0x0f, 0xd7, 0xd0, 0xd1, 0x42, 0x24, 0x37, 0x61,
	0xad, 0x33, 0x14, 0x42, 0xfa, 0x2c, 0x37, 0x6d, 0xae, 0x85, 0x0e, 0xd7, 0xd1, 0x6e, 0xa5, 0x33,
	0x88, 0x9c, 0x47, 0xc5, 0x90, 0x3d, 0x1c, 0x96, 0x76, 0xda, 0x8c, 0x2a, 0xde, 0x52, 0xdc, 0x84,
	0x57, 0xdc, 0xe1, 0xa0, 0x2e, 0x42, 0x15, 0x39, 0x80, 0x6d, 0xeb, 0x74, 0x37, 0x6f, 0x76, 0xd3,
	0xa6, 0x48, 0x53, 0x9e, 0x78, 0x0a, 0x0a, 0xa7, 0x75, 0x18, 0xa2, 0xd7, 0xd7, 0x33, 0xd6, 0x7f,
	0x5c, 0x5a, 0x39, 0x0e, 0xbc, 0xdb, 0xda, 0x46, 0xdb, 0x38, 0x8c, 0xe7, 0xa1, 0xc4, 0xd9, 0x40,
	0x9c, 0xcd, 0x51, 0x1c, 0x4f, 0xc4, 0x00, 0xe8, 0x16, 0x6c, 0xe4, 0xdd, 0xac, 0xc1, 0x15, 0x95,
	0x4d, 0x1a, 0xa7, 0xf6, 0x44, 0x35, 0x6d, 0x4a, 0x45, 0x0d, 0xeb, 0x87, 0x57, 0x11, 0x61, 0xcd,
	0x19, 0x7c, 0xd0, 0xbc, 0xeb, 0x86, 0xef, 0x4b, 0x75, 0xc2, 0xfa, 0xe4, 0x35, 0x58, 0xee, 0xd8,
	0x4a, 0xce, 0xed, 0xa2, 0xc5, 0x8c, 0x6b, 0x38, 0x63, 0x71, 0x30, 0xe0, 0x6d, 0xeb, 0xb0, 0x59,
	0x9c, 0x0c, 0xd6, 0x75, 0x17, 0x23, 0x22, 0xeb, 0x48, 0x65, 0x98, 0x4d, 0xab, 0xeb, 0xae, 0x46,
	0x19, 0x77, 0x36, 0xd6, 0x06, 0xa3, 0xe5, 0x70, 0x60, 0x41, 0x8e, 0xe0, 0xc6, 0x08, 0x44, 0x93,
	0xdb, 0xbc, 0xee, 0xf1, 0xbc, 0x3b, 0x02, 0xb4, 0x89, 0x40, 0xdb, 0x43, 0x40, 0xf7, 0x39, 0x8f,
	0x9c, 0xdd, 0x10, 0xda, 0x1b, 0x40, 0x46, 0xd0, 0xf0, 0x88, 0xc2, 0x2d, 0x17, 0xab, 0x43, 0x93,
	0xeb, 0x56, 0x4f, 0x7e, 0x19, 0xc0, 0x0d, 0xac, 0x1d, 0xcc, 0x48, 0xa5, 0x69, 0x4f, 0x53, 0x96,
	0xa6, 0x52, 0x31, 0x3a, 0x9a, 0xf1, 0xe1, 0x36, 0x56, 0xcb, 0xdb, 0xbe, 0x5a, 0x5e, 0x3b, 0x5f,
	0x2d, 0x8f, 0x78, 0x8b, 0xc5, 0x67, 0xf7, 0x78, 0xfc, 0xc5, 0xa7, 0x6f, 0x2e, 0xf9, 0x92, 0x39,
	0xd0, 0xb9, 0xba, 0xb9, 0x5d, 0x2e, 0xf4, 0x91, 0xae, 0xe3, 0x32, 0xc7, 0xc3, 0xf5, 0x82, 0xfc,
	0xd0, 0x25, 0x8e, 0x8e, 0xa5, 0xe2, 0x9a, 0x1a, 0x49, 0xbb, 0x9a, 0x23, 0xff, 0xda, 0x24, 0x34,
	0xe1, 0xbd, 0x70, 0x07, 0xcf, 0xe0, 0x4a, 0xc6, 0xfa, 0x8f, 0xd0, 0xe6, 0x44, 0x3e, 0xd6, 0xfc,
	0xbe, 0x54, 0x8f, 0x4c, 0x72, 0x8f, 0xf7, 0x6a, 0xff, 0x9e, 0x84, 0x29, 0xcc, 0x01, 0xb2, 0x00,
	0x97, 0x45, 0x82, 0x97, 0xef, 0x64, 0x74, 0x59, 0x24, 0x36, 0x19, 0x62, 0xc5, 0xed, 0xd2, 0x78,
	0xe1, 0x56, 0xa2, 0x42, 0x24, 0x57, 0x61, 0x36, 0xe3, 0x86, 0x25, 0xcc, 0x30, 0x77, 0xb9, 0x46,
	0x03, 0x99, 0x6c, 0x02, 0xa4, 0x52, 0x6b, 0x9a, 0xca, 0x96, 0x88, 0xf1, 0x4e, 0xac, 0x44, 0x15,
	0xab, 0x39, 0xb2, 0x0a, 0xb2, 0x0d, 0x55, 0x1c, 0xce, 0xb8, 0x69, 0x4b, 0x7f, 0xfd, 0x45, 0x38,
	0xe3, 0x21, 0x6a, 0xc8, 0xab, 0xb0, 0x58, 0xa6, 0x99, 0x03, 0x99, 0x46, 0xa3, 0x85, 0x81, 0xda,
	0x21, 0xfd, 0x3f, 0x2c, 0x95, 0x86, 0x1e, 0x0e, 0xef, 0xa7, 0xa8, 0x04, 0xf0, 0x98, 0xbb, 0xb0,
	0xe4, 0xef, 0x09, 0xa6, 0x0d, 0xe5, 0x79, 0xc2, 0x13, 0x7f, 0xbb, 0x2c, 0xa0, 0xfe, 0x88, 0x69,
	0x73, 0x60, 0xb5, 0x36, 0x65, 0x2f, 0xb8, 0x51, 0xaa, 0x7c, 0xe8, 0x3a, 0xd9, 0x85, 0xa5, 0x96,
	0x92, 0xdd, 0x3c, 0xa1, 0x46, 0x75, 0x8d, 0xc5, 0x6c, 0xf9, 0x0b, 0x64, 0xc1, 0xe9, 0x4f, 0xac,
	0xfa, 0x88, 0xb5, 0xc8, 0x3a, 0x4c, 0xdb, 0xea, 0xd6, 0x73, 0xd7, 0xc4, 0x6c, 0xe4, 0x25, 0xcb,
	0x41, 0xc2, 0x9b, 0xac, 0x9b, 0x1a, 0xca, 0x54, 0x0b, 0xaf, 0x81, 0x4a, 0x04, 0x5e, 0x55, 0x57,
	0x2d, 0xb2, 0x0a, 0x53, 0x9d, 0x5c, 0xaa, 0x0c, 0xeb, 0xfd, 0x64, 0xe4, 0x84, 0x73, 0xe5, 0x64,
	0xe1, 0x7c, 0x39, 0x79, 0x15, 0x16, 0x3b, 0x3e, 0x84, 0x7d, 0xfe, 0xfb, 0x8a, 0xbf, 0xe0, 0xd5,
	0x3e, 0xdf, 0xc9, 0xeb, 0xb0, 0x5c, 0x18, 0x0e, 0xc8, 0xf2, 0xb5, 0x7f, 0xc9, 0x0f, 0x0c, 0x0a,
	0x9a, 0x65, 0xba, 0x30, 0x6e, 0x4a, 0xc5, 0x63, 0xa6, 0x8d, 0xaf, 0xfc, 0xc5, 0x6a, 0xf7, 0xbd,
	0xda, 0x6e, 0xad, 0x49, 0x8d, 0x4c, 0xb9, 0xc2, 0xf4, 0x73, 0xd5, 0x1e, 0x9a, 0x27, 0x85, 0xa6,
	0x76, 0x0b, 0x2a, 0x18, 0x6d, 0x47, 0x42, 0x1b, 0xf2, 0x3a, 0x4c, 0xbb, 0x57, 0x54, 0x18, 0xec,
	0x4c, 0xec, 0x56, 0x6f, 0xae, 0xec, 0x0d, 0xbf, 0x30, 0xf7, 0x5c, 0x69, 0xf6, 0x26, 0xb5, 0xf7,
	0x60, 0xcd, 0x55, 0xbd, 0xba, 0x31, 0x4a, 0x34, 0xba, 0x86, 0x27, 0x1f, 0xb1, 0xb4, 0xcb, 0x2d,
	0xcd, 0xae, 0x66, 0xfa, 0x87, 0xa3, 0x97, 0x2c, 0x8b, 0x3d, 0x6b, 0x80, 0xd1, 0x1b, 0x44, 0x4e,
	0xf8, 0xc1, 0xe4, 0xbf, 0x7e, 0xbf, 0x1d, 0xd4, 0x1e, 0xc1, 0xe6, 0x13, 0x61, 0xda, 0x6d, 0x9e,
	0x26, 0x2f, 0x0f, 0xf4, 0xef, 0x93, 0x50, 0xc5, 0xd9, 0x77, 0xba, 0x79, 0x92, 0x72, 0xb2, 0x01,
	0xb3, 0xae, 0xaa, 0x0c, 0xd2, 0x6a, 0x06, 0xe5, 0xc3, 0xc4, 0x66, 0x09, 0xef, 0x1b, 0xc5, 0x28,
	0xe6, 0x90, 0xc5, 0x9a, 0x8b, 0x2a, 0xa8, 0xb9, 0x67, 0x93, 0xe8, 0x15, 0x58, 0x88, 0x65, 0xd6,
	0x10, 0x39, 0x4f, 0xa8, 0x5b, 0x6e, 0x02, 0x97, 0x9b, 0x2f, 0xb4, 0xce, 0xc9, 0x07, 0xe0, 0x93,
	0x42, 0x39, 0x2b, 0x1d, 0x4e, 0x22, 0x8f, 0x37, 0x46, 0x79, 0xbc, 0x70, 0x87, 0xd1, 0xbc, 0x9f,
	0x8a, 0x92, 0x26, 0xc7, 0xb0, 0x5c, 0x1c, 0x6e, 0x09, 0x37, 0xf5, 0xed, 0xe1, 0x96, 0xca, 0xd9,
	0x1e, 0x71, 0x1b, 0xaa, 0x39, 0x13, 0x3d, 0xee, 0x77, 0xe0, 0xde, 0x9d, 0x80, 0x2a, 0xe7, 0xfe,
	0xcf, 0x60, 0x5d, 0xe6, 0x9c, 0xca, 0xae, 0xa1, 0x63, 0xdb, 0x98, 0xc1, 0x75, 0x5f, 0x1f, 0x5b,
	0xf7, 0x59, 0x07, 0x16, 0xad, 0xc8, 0x9c, 0x7f, 0xd0, 0x35, 0x87, 0x23, 0x9b, 0x6a, 0xc2, 0x46,
	0xb1, 0xc2, 0xf9, 0xcd, 0xcd, 0xfe, 0xef, 0x8b, 0xac, 0xbb, 0x45, 0xee, 0x8f, 0x6f, 0xf5, 0xa7,
	0x10, 0xda, 0x75, 0x44, 0x7e, 0xc1, 0x32, 0x95, 0x6f, 0xcf, 0xe1, 0x9a, 0xcc, 0xf9, 0x61, 0x3e,
	0x8e, 0xee, 0xa3, 0x4b, 0x01, 0xf1, 0xd9, 0x3b, 0x1c, 0x63, 0x21, 0xcc, 0x14, 0x99, 0xee, 0xdb,
	0x26, 0x2f, 0x92, 0xdb, 0x30, 0x87, 0x1e, 0xd0, 0x06, 0x5a, 0x62, 0x90, 0x55, 0x6f, 0x6e, 0x8c,
	0xfa, 0x31, 0x04, 0x15, 0x55, 0x7b, 0xa5, 0xe0, 0xd7, 0x3c, 0x85, 0x95, 0xf3, 0x6b, 0x6a, 0x72,
	0x02, 0x6b, 0xc5, 0xf3, 0x62, 0x78, 0x89, 0x22, 0x8d, 0x77, 0x46, 0xd7, 0x38, 0x8f, 0x10, 0xad,
	0xa8, 0xf3, 0xa8, 0xb5, 0x0f, 0x61, 0xe9, 0x44, 0x64, 0x5c, 0x1b, 0x96, 0x75, 0x8a, 0x08, 0xb7,
	0xef, 0x5b, 0xdb, 0x43, 0xd1, 0x36, 0x17, 0xad, 0xb6, 0xc1, 0x3d, 0x4e, 0x44, 0x55, 0xd4, 0xfd,
	0x18, 0x55, 0xcf, 0xcc, 0xc8, 0x5f, 0x07, 0x50, 0x29, 0xeb, 0xd8, 0x33, 0xf2, 0xb1, 0x4c, 0xf7,
	0xcb, 0x17, 0xa7, 0xfb, 0xc4, 0x10, 0xf8, 0x58, 0xf6, 0x4e, 0x8e, 0x67, 0xaf, 0x2d, 0xdf, 0x4a,
	0xca, 0xa6, 0xbf, 0xdd, 0x9c, 0xe0, 0x3d, 0x3a, 0x00, 0x18, 0x38, 0xa4, 0xc9, 0xf7, 0x00, 0x06,
	0xe5, 0xb7, 0x60, 0xef, 0xca, 0x28, 0x7b, 0x65, 0x47, 0x32, 0x64, 0x5a, 0xfb, 0x05, 0x2c, 0x16,
	0x61, 0x72, 0x90, 0xf2, 0xcc, 0x76, 0x6d, 0x21, 0xcc, 0xf8, 0x2c, 0x2a, 0xae, 0x6b, 0x2f, 0xbe,
	0xfc, 0x4d, 0xfc, 0x2e, 0x80, 0xd9, 0x41, 0xc9, 0x7f, 0x06, 0xab, 0x5b, 0x00, 0x65, 0x3e, 0x78,
	0xaf, 0x86, 0x34, 0xe4, 0x41, 0x59, 0x73, 0x28, 0x77, 0xdb, 0xd0, 0xe1, 0x04, 0xb2, 0xb0, 0x39,
	0xca, 0xc2, 0xd8, 0x66, 0xcb, 0x6a, 0xe3, 0x15, 0x45, 0x92, 0xd4, 0xa1, 0x52, 0x98, 0x6a, 0xf2,
	0x36, 0x54, 0x0a, 0xb3, 0x82, 0xdc, 0xf5, 0x8b, 0x61, 0xa3, 0xd2, 0xb0, 0xf6, 0x87, 0x00, 0xe6,
	0x3e, 0x68, 0x36, 0xe3, 0x36, 0x13, 0xf9, 0xfb, 0x32, 0xe1, 0x64, 0x0b, 0xaa, 0xa9, 0x68, 0xd0,
	0xce, 0xcd, 0x0e, 0x3d, 0xe5, 0x67, 0x3e, 0xcd, 0x2a, 0xa9, 0x68, 0x1c, 0xdf, 0xec, 0xbc, 0xc7,
	0xcf, 0x6c, 0x0f, 0x95, 0x75, 0x53, 0x23, 0x28, 0x4b, 0x12, 0x65, 0xbb, 0x34, 0xb7, 0xd1, 0x39,
	0x54, 0xd6, 0x9d, 0xce, 0xd2, 0x29, 0x9f, 0xe6, 0x5c, 0xf9, 0xf7, 0x92, 0x13, 0x6c, 0x78, 0xe7,
	0x32, 0xe1, 0x83, 0x99, 0xee, 0xb9, 0x54, 0xb5, 0xba, 0x62, 0xe2, 0x15, 0x98, 0x41, 0x13, 0x51,
	0x3c, 0x96, 0xa6, 0xad, 0x78, 0x98, 0xd4, 0x1e, 0xc2, 0xfc, 0xb0, 0x9b, 0x9a, 0xdc, 0x86, 0x79,
	0xe9, 0x15, 0xd4, 0xda, 0xfc, 0xb7, 0x78, 0x9a, 0x93, 0x43, 0xd3, 0x6b, 0x9f, 0x04, 0xb0, 0x5e,
	0xf6, 0x30, 0xdc, 0xd6, 0x38, 0xfb, 0x5e, 0x14, 0x79, 0xeb, 0x59, 0x27, 0x3c, 0x9e, 0x9f, 0x97,
	0xcf, 0xe7, 0xe7, 0xad, 0x91, 0x18, 0x9f, 0xc0, 0x2a, 0x14, 0x7e, 0x83, 0x4f, 0x7a, 0x24, 0xc8,
	0x7f, 0x15, 0xc0, 0x5a, 0x71, 0x42, 0x2f, 0xd3, 0xa3, 0x77, 0x86, 0xe3, 0xc2, 0x39, 0x74, 0xe5,
	0xe2, 0xb8, 0xd0, 0xc3, 0x81, 0xf1, 0x9b, 0x00, 0x16, 0xb0, 0x0d, 0x39, 0x4e, 0x59, 0xec, 0x72,
	0xee, 0x19, 0x7e, 0x0c, 0x15, 0xe6, 0xcb, 0xa3, 0x85, 0xf9, 0x01, 0x4c, 0xb3, 0x4c, 0x76, 0x73,
	0xf3, 0x02, 0x1f, 0xa6, 0x3c, 0x42, 0xed, 0xe3, 0x00, 0xe6, 0xd0, 0xa7, 0x88, 0x67, 0xb2, 0xc7,
	0x52, 0xdb, 0xa7, 0xba, 0xed, 0x2b, 0xa7, 0xb0, 0xbd, 0x95, 0x32, 0x3c, 0xf1, 0x95, 0x73, 0x05,
	0x07, 0xbd, 0xf1, 0x23, 0x37, 0x44, 0x6e, 0x03, 0x74, 0x8a, 0x2d, 0xd9, 0xe8, 0xb5, 0x51, 0x73,
	0x7d, 0x94, 0x90, 0xd1, 0x7d, 0x47, 0x43, 0xf6, 0xb5, 0xbf, 0x04, 0x70, 0xe5, 0x1e, 0x4f, 0x79,
	0x8b, 0x19, 0x9e, 0xbc, 0x0c, 0x7e, 0xae, 0x43, 0x25, 0x71, 0x78, 0xb2, 0x48, 0x97, 0x52, 0x31,
	0xc4, 0xde, 0xe4, 0x0b, 0xb3, 0xf7, 0xdb, 0x00, 0xd6, 0x46, 0x5d, 0x7f, 0x11, 0x1a, 0x0f, 0x2e,
	0xa0, 0xf1, 0x95, 0x51, 0x1a, 0xbf, 0x81, 0xa7, 0x11, 0x3e, 0xbb, 0x30, 0x85, 0x8d, 0xda, 0xb7,
	0x0a, 0x72, 0xd7, 0x8b, 0x8f, 0x04, 0xf9, 0xfb, 0xa8, 0xb2, 0xfc, 0x16, 0x55, 0xc5, 0x71, 0x58,
	0x88, 0xb6, 0x14, 0x61, 0xb7, 0x88, 0x04, 0x06, 0x91, 0x13, 0x6a, 0xef, 0xc0, 0xb4, 0xeb, 0x0f,
	0xed, 0xab, 0xdc, 0x75, 0x93, 0x17, 0xbf, 0xca, 0xd1, 0x2a, 0xf2, 0x26, 0xb5, 0x3a, 0xac, 0xd4,
	0x7b, 0x5c, 0xb1, 0x16, 0x2f, 0x3e, 0x49, 0x60, 0x57, 0xba, 0x0a, 0x53, 0x31, 0x1e, 0x92, 0x75,
	0x7c, 0x3e, 0x72, 0xc2, 0xc5, 0x57, 0x75, 0xed, 0x16, 0xac, 0xda, 0x6e, 0x80, 0xe7, 0x22, 0x6f,
	0xdd, 0x95, 0xbc, 0xd9, 0x14, 0xb1, 0xb0, 0xc1, 0xb3, 0x03, 0xd5, 0xb8, 0x14, 0xfd, 0xe5, 0x35,
	0xac, 0xaa, 0xfd, 0x69, 0x02, 0x96, 0xc6, 0xbf, 0xd8, 0xd9, 0xab, 0x5c, 0xdb, 0x16, 0x6f, 0xf0,
	0x72, 0x77, 0x92, 0x5d, 0x3c, 0x97, 0xc5, 0xd7, 0xe3, 0xc9, 0xc8, 0x09, 0x23, 0x24, 0x4f, 0x9c,
	0x8b, 0xd0, 0xe2, 0x33, 0xdf, 0x24, 0xf2, 0x5b, 0x88, 0x44, 0x80, 0x6d, 0xa7, 0x69, 0x47, 0x09,
	0xf7, 0x5d, 0x75, 0xa8, 0x87, 0x7a, 0xfe, 0xef, 0xb9, 0xab, 0x19, 0xeb, 0x1f, 0x5b, 0xc4, 0x63,
	0xae, 0xca, 0x37, 0xcb, 0x87, 0x00, 0x0d, 0x91, 0x50, 0x1f, 0xf2, 0xd3, 0xcf, 0x8d, 0x5e, 0x69,
	0x88, 0xa4, 0x8e, 0x20, 0xe4, 0x0d, 0x20, 0x2e, 0x78, 0xb0, 0x1b, 0x8e, 0xdb, 0x3c, 0x3e, 0xe5,
	0xae, 0x75, 0x9e, 0x88, 0x96, 0x70, 0xc4, 0xf6, 0xc3, 0x77, 0x9d, 0x9e, 0xbc, 0x06, 0xcb, 0xce,
	0x1a, 0x3f, 0x44, 0xd0, 0x6e, 0x6e, 0x44, 0xea, 0x9b, 0xe7, 0x45, 0x1c, 0xc0, 0x4f, 0xa4, 0x8f,
	0xad, 0x7a, 0xec, 0x49, 0x51, 0x19, 0x7b, 0x52, 0xd4, 0x36, 0x61, 0xea, 0x7d, 0x24, 0x7d, 0x70,
	0x14, 0x2e, 0x9b, 0x9c, 0x60, 0x23, 0x10, 0x87, 0x31, 0x02, 0x51, 0xf5, 0x0d, 0x11, 0x88, 0x56,
	0x91, 0x37, 0xa9, 0x69, 0x58, 0xc4, 0x46, 0xb1, 0xfc, 0xb0, 0x63, 0xf1, 0xb1, 0x63, 0xf7, 0x69,
	0xe3, 0x04, 0xf2, 0xc0, 0x56, 0x1c, 0x34, 0x70, 0x15, 0xe7, 0xce, 0x77, 0x3c, 0x8f, 0x6b, 0xe7,
	0x79, 0x3c, 0x44, 0x1a, 0xc1, 0xd3, 0x78, 0x58, 0xb0, 0x58, 0x00, 0xd4, 0xee, 0xc2, 0xca, 0xb1,
	0xe2, 0x3d, 0x21, 0xbb, 0x1a, 0x17, 0x7f, 0x32, 0x78, 0x8b, 0x5e, 0xb0, 0xb0, 0x7d, 0x5c, 0x96,
	0x97, 0x51, 0x10, 0x79, 0xe9, 0x4e, 0xf4, 0xd9, 0x57, 0x5b, 0xc1, 0xe7, 0x5f, 0x6d, 0x05, 0xff,
	0xf8, 0x6a, 0x2b, 0xf8, 0xe4, 0xeb, 0xad, 0x4b, 0x9f, 0x7f, 0xbd, 0x75, 0xe9, 0xaf, 0x5f, 0x6f,
	0x5d, 0xfa, 0xc9, 0xad, 0x96, 0x30, 0xed, 0x6e, 0x63, 0x2f, 0x96, 0xd9, 0xbe, 0xfb, 0xb6, 0xf4,
	0x66, 0xce, 0x8d, 0x7d, 0x93, 0x16, 0x22, 0x5e, 0xdc, 0xfb, 0xfd, 0xfd, 0xf2, 0xc7, 0x1a, 0xfc,
	0xa5, 0xa6, 0x31, 0x8d, 0x3f, 0xac, 0x7c, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x0e,
	0xbc, 0x4c, 0xc6, 0x19, 0x00, 0x00,
}

func (this *WorkerAttributedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerAttributedValue)
	if !ok {
		that2, ok := that.(WorkerAttributedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *WithheldWorkerAttributedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithheldWorkerAttributedValue)
	if !ok {
		that2, ok := that.(WithheldWorkerAttributedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ValueBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValueBundle)
	if !ok {
		that2, ok := that.(ValueBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.CombinedValue != that1.CombinedValue {
		return false
	}
	if len(this.InfererValues) != len(that1.InfererValues) {
		return false
	}
	for i := range this.InfererValues {
		if !this.InfererValues[i].Equal(that1.InfererValues[i]) {
			return false
		}
	}
	if len(this.ForecasterValues) != len(that1.ForecasterValues) {
		return false
	}
	for i := range this.ForecasterValues {
		if !this.ForecasterValues[i].Equal(that1.ForecasterValues[i]) {
			return false
		}
	}
	if this.NaiveValue != that1.NaiveValue {
		return false
	}
	if len(this.OneOutInfererValues) != len(that1.OneOutInfererValues) {
		return false
	}
	for i := range this.OneOutInfererValues {
		if !this.OneOutInfererValues[i].Equal(that1.OneOutInfererValues[i]) {
			return false
		}
	}
	if len(this.OneOutForecasterValues) != len(that1.OneOutForecasterValues) {
		return false
	}
	for i := range this.OneOutForecasterValues {
		if !this.OneOutForecasterValues[i].Equal(that1.OneOutForecasterValues[i]) {
			return false
		}
	}
	if len(this.OneInForecasterValues) != len(that1.OneInForecasterValues) {
		return false
	}
	for i := range this.OneInForecasterValues {
		if !this.OneInForecasterValues[i].Equal(that1.OneInForecasterValues[i]) {
			return false
		}
	}
	return true
}
func (this *ReputerValueBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReputerValueBundle)
	if !ok {
		that2, ok := that.(ReputerValueBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reputer != that1.Reputer {
		return false
	}
	if !this.ValueBundle.Equal(that1.ValueBundle) {
		return false
	}
	return true
}
func (this *TimestampedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimestampedValue)
	if !ok {
		that2, ok := that.(TimestampedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Inference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Inference)
	if !ok {
		that2, ok := that.(Inference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *ForecastElement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForecastElement)
	if !ok {
		that2, ok := that.(ForecastElement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Inferer != that1.Inferer {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *Forecast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Forecast)
	if !ok {
		that2, ok := that.(Forecast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Forecaster != that1.Forecaster {
		return false
	}
	if len(this.ForecastElements) != len(that1.ForecastElements) {
		return false
	}
	for i := range this.ForecastElements {
		if !this.ForecastElements[i].Equal(that1.ForecastElements[i]) {
			return false
		}
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSamplesToScaleScores != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxSamplesToScaleScores))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	{
		size := m.ValidatorsVsAlloraPercentReward.Size()
		i -= size
		if _, err := m.ValidatorsVsAlloraPercentReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xfa
	if m.TopicRewardAlpha != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopicRewardAlpha))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf1
	}
	if m.TopicRewardFeeRevenueImportance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopicRewardFeeRevenueImportance))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe9
	}
	if m.TopicRewardStakeImportance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TopicRewardStakeImportance))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe1
	}
	if m.SybilTaxExponent != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SybilTaxExponent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.NumberExpectedInfernceSybils != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NumberExpectedInfernceSybils))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxUnfulfilledReputerRequests != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUnfulfilledReputerRequests))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.MaxUnfulfilledWorkerRequests != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUnfulfilledWorkerRequests))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.AlphaRegret != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AlphaRegret))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb9
	}
	if m.PInferenceSynthesis != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PInferenceSynthesis))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb1
	}
	if m.Epsilon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Epsilon))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa9
	}
	if m.MaxReputersPerTopicRequest != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxReputersPerTopicRequest))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.MaxWorkersPerTopicRequest != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxWorkersPerTopicRequest))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MinStakeFraction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinStakeFraction))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x91
	}
	if m.MaxGradientThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxGradientThreshold))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.LearningRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LearningRate))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.DcoefAbs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DcoefAbs))))
		i--
		dAtA[i] = 0x79
	}
	if m.BetaEntropy != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BetaEntropy))))
		i--
		dAtA[i] = 0x71
	}
	if m.Sharpness != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sharpness))))
		i--
		dAtA[i] = 0x69
	}
	if m.PercentRewardsReputersWorkers != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PercentRewardsReputersWorkers))))
		i--
		dAtA[i] = 0x61
	}
	if m.MaxRequestCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxRequestCadence))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxInferenceRequestValidity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxInferenceRequestValidity))
		i--
		dAtA[i] = 0x50
	}
	if m.MinEpochLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinEpochLength))
		i--
		dAtA[i] = 0x48
	}
	if m.RemoveStakeDelayWindow != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RemoveStakeDelayWindow))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.RequiredMinimumStake.Size()
		i -= size
		if _, err := m.RequiredMinimumStake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.MaxMissingInferencePercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxMissingInferencePercent))))
		i--
		dAtA[i] = 0x31
	}
	{
		size := m.MinRequestUnmetDemand.Size()
		i -= size
		if _, err := m.MinRequestUnmetDemand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxTopicsPerBlock != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxTopicsPerBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinTopicUnmetDemand.Size()
		i -= size
		if _, err := m.MinTopicUnmetDemand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardCadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RewardCadence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FTolerance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FTolerance))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x91
	}
	if m.PrewardForecast != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PrewardForecast))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.PrewardInference != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PrewardInference))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x81
	}
	if m.PrewardReputer != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PrewardReputer))))
		i--
		dAtA[i] = 0x79
	}
	if m.AlphaRegret != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AlphaRegret))))
		i--
		dAtA[i] = 0x71
	}
	if m.Pnorm != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Pnorm))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DefaultArg) > 0 {
		i -= len(m.DefaultArg)
		copy(dAtA[i:], m.DefaultArg)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DefaultArg)))
		i--
		dAtA[i] = 0x62
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.GroundTruthLag != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.GroundTruthLag))
		i--
		dAtA[i] = 0x50
	}
	if m.EpochLength != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x48
	}
	if m.EpochLastEnded != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EpochLastEnded))
		i--
		dAtA[i] = 0x40
	}
	if len(m.InferenceMethod) > 0 {
		i -= len(m.InferenceMethod)
		copy(dAtA[i:], m.InferenceMethod)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InferenceMethod)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InferenceLogic) > 0 {
		i -= len(m.InferenceLogic)
		copy(dAtA[i:], m.InferenceLogic)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.InferenceLogic)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LossMethod) > 0 {
		i -= len(m.LossMethod)
		copy(dAtA[i:], m.LossMethod)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LossMethod)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LossLogic) > 0 {
		i -= len(m.LossLogic)
		copy(dAtA[i:], m.LossLogic)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LossLogic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TopicList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkerAttributedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerAttributedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerAttributedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithheldWorkerAttributedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithheldWorkerAttributedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithheldWorkerAttributedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OneInForecasterValues) > 0 {
		for iNdEx := len(m.OneInForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneInForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.OneOutForecasterValues) > 0 {
		for iNdEx := len(m.OneOutForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.OneOutInfererValues) > 0 {
		for iNdEx := len(m.OneOutInfererValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutInfererValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.NaiveValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NaiveValue))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.ForecasterValues) > 0 {
		for iNdEx := len(m.ForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InfererValues) > 0 {
		for iNdEx := len(m.InfererValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CombinedValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CombinedValue))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReputerValueBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputerValueBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputerValueBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueBundle != nil {
		{
			size, err := m.ValueBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReputerValueBundles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputerValueBundles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputerValueBundles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReputerValueBundles) > 0 {
		for iNdEx := len(m.ReputerValueBundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputerValueBundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TimestampedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x22
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for iNdEx := len(m.Inferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForecastElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecastElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecastElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x22
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Forecast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForecastElements) > 0 {
		for iNdEx := len(m.ForecastElements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecastElements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Forecasts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecasts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecasts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for iNdEx := len(m.Forecasts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forecasts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OffchainNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffchainNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffchainNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MultiAddress) > 0 {
		i -= len(m.MultiAddress)
		copy(dAtA[i:], m.MultiAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MultiAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LibP2PKey) > 0 {
		i -= len(m.LibP2PKey)
		copy(dAtA[i:], m.LibP2PKey)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LibP2PKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OffchainNodes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OffchainNodes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OffchainNodes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OffchainNode) > 0 {
		for iNdEx := len(m.OffchainNode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OffchainNode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceSetForScoring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceSetForScoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceSetForScoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForecastSetForScoring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecastSetForScoring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecastSetForScoring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecasts != nil {
		{
			size, err := m.Forecasts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakeRemoval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRemoval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRemoval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Placements) > 0 {
		for iNdEx := len(m.Placements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Placements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockRemovalStarted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockRemovalStarted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatedStakePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedStakePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedStakePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatedStakeRemoval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedStakeRemoval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedStakeRemoval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Placements) > 0 {
		for iNdEx := len(m.Placements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Placements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockRemovalStarted != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockRemovalStarted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Score) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Score) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Score) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Scores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Scores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AverageWorkerReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AverageWorkerReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AverageWorkerReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListeningCoefficient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListeningCoefficient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListeningCoefficient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coefficient != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Coefficient))))
		i--
		dAtA[i] = 0x19
	}
	return len(dAtA) - i, nil
}

func (m *InferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BlockValidUntil != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockValidUntil))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockLastChecked != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockLastChecked))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.BidAmount.Size()
		i -= size
		if _, err := m.BidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaxPricePerInference.Size()
		i -= size
		if _, err := m.MaxPricePerInference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Cadence != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Cadence))
		i--
		dAtA[i] = 0x20
	}
	if m.TopicId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Nonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Nonces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nonces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nonces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for iNdEx := len(m.Nonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicFeeRevenue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicFeeRevenue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicFeeRevenue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Revenue.Size()
		i -= size
		if _, err := m.Revenue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Epoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreviousTopicWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviousTopicWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreviousTopicWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i--
		dAtA[i] = 0x11
	}
	if m.Epoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RewardCadence != 0 {
		n += 1 + sovTypes(uint64(m.RewardCadence))
	}
	l = m.MinTopicUnmetDemand.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.MaxTopicsPerBlock != 0 {
		n += 1 + sovTypes(uint64(m.MaxTopicsPerBlock))
	}
	l = m.MinRequestUnmetDemand.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.MaxMissingInferencePercent != 0 {
		n += 9
	}
	l = m.RequiredMinimumStake.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.RemoveStakeDelayWindow != 0 {
		n += 1 + sovTypes(uint64(m.RemoveStakeDelayWindow))
	}
	if m.MinEpochLength != 0 {
		n += 1 + sovTypes(uint64(m.MinEpochLength))
	}
	if m.MaxInferenceRequestValidity != 0 {
		n += 1 + sovTypes(uint64(m.MaxInferenceRequestValidity))
	}
	if m.MaxRequestCadence != 0 {
		n += 1 + sovTypes(uint64(m.MaxRequestCadence))
	}
	if m.PercentRewardsReputersWorkers != 0 {
		n += 9
	}
	if m.Sharpness != 0 {
		n += 9
	}
	if m.BetaEntropy != 0 {
		n += 9
	}
	if m.DcoefAbs != 0 {
		n += 9
	}
	if m.LearningRate != 0 {
		n += 10
	}
	if m.MaxGradientThreshold != 0 {
		n += 10
	}
	if m.MinStakeFraction != 0 {
		n += 10
	}
	if m.MaxWorkersPerTopicRequest != 0 {
		n += 2 + sovTypes(uint64(m.MaxWorkersPerTopicRequest))
	}
	if m.MaxReputersPerTopicRequest != 0 {
		n += 2 + sovTypes(uint64(m.MaxReputersPerTopicRequest))
	}
	if m.Epsilon != 0 {
		n += 10
	}
	if m.PInferenceSynthesis != 0 {
		n += 10
	}
	if m.AlphaRegret != 0 {
		n += 10
	}
	if m.MaxUnfulfilledWorkerRequests != 0 {
		n += 2 + sovTypes(uint64(m.MaxUnfulfilledWorkerRequests))
	}
	if m.MaxUnfulfilledReputerRequests != 0 {
		n += 2 + sovTypes(uint64(m.MaxUnfulfilledReputerRequests))
	}
	if m.NumberExpectedInfernceSybils != 0 {
		n += 2 + sovTypes(uint64(m.NumberExpectedInfernceSybils))
	}
	if m.SybilTaxExponent != 0 {
		n += 2 + sovTypes(uint64(m.SybilTaxExponent))
	}
	if m.TopicRewardStakeImportance != 0 {
		n += 10
	}
	if m.TopicRewardFeeRevenueImportance != 0 {
		n += 10
	}
	if m.TopicRewardAlpha != 0 {
		n += 10
	}
	l = m.ValidatorsVsAlloraPercentReward.Size()
	n += 2 + l + sovTypes(uint64(l))
	if m.MaxSamplesToScaleScores != 0 {
		n += 2 + sovTypes(uint64(m.MaxSamplesToScaleScores))
	}
	return n
}

func (m *Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LossLogic)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LossMethod)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InferenceLogic)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.InferenceMethod)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EpochLastEnded != 0 {
		n += 1 + sovTypes(uint64(m.EpochLastEnded))
	}
	if m.EpochLength != 0 {
		n += 1 + sovTypes(uint64(m.EpochLength))
	}
	if m.GroundTruthLag != 0 {
		n += 1 + sovTypes(uint64(m.GroundTruthLag))
	}
	if m.Active {
		n += 2
	}
	l = len(m.DefaultArg)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Pnorm != 0 {
		n += 1 + sovTypes(uint64(m.Pnorm))
	}
	if m.AlphaRegret != 0 {
		n += 9
	}
	if m.PrewardReputer != 0 {
		n += 9
	}
	if m.PrewardInference != 0 {
		n += 10
	}
	if m.PrewardForecast != 0 {
		n += 10
	}
	if m.FTolerance != 0 {
		n += 10
	}
	return n
}

func (m *TopicList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *WorkerAttributedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *WithheldWorkerAttributedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *ValueBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CombinedValue != 0 {
		n += 9
	}
	if len(m.InfererValues) > 0 {
		for _, e := range m.InfererValues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.ForecasterValues) > 0 {
		for _, e := range m.ForecasterValues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NaiveValue != 0 {
		n += 9
	}
	if len(m.OneOutInfererValues) > 0 {
		for _, e := range m.OneOutInfererValues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.OneOutForecasterValues) > 0 {
		for _, e := range m.OneOutForecasterValues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.OneInForecasterValues) > 0 {
		for _, e := range m.OneInForecasterValues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ReputerValueBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValueBundle != nil {
		l = m.ValueBundle.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReputerValueBundles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputerValueBundles) > 0 {
		for _, e := range m.ReputerValueBundles {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TimestampedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Inference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Inferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for _, e := range m.Inferences {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ForecastElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Forecast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.ForecastElements) > 0 {
		for _, e := range m.ForecastElements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Forecasts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for _, e := range m.Forecasts {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *OffchainNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LibP2PKey)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.MultiAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OffchainNodes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OffchainNode) > 0 {
		for _, e := range m.OffchainNode {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *InferenceSetForScoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ForecastSetForScoring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.BlockHeight))
	}
	if m.Forecasts != nil {
		l = m.Forecasts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *StakePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *StakeRemoval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockRemovalStarted != 0 {
		n += 1 + sovTypes(uint64(m.BlockRemovalStarted))
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *DelegatedStakePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *DelegatedStakeRemoval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockRemovalStarted != 0 {
		n += 1 + sovTypes(uint64(m.BlockRemovalStarted))
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Score) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.BlockNumber))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func (m *Scores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *AverageWorkerReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *ListeningCoefficient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coefficient != 0 {
		n += 9
	}
	return n
}

func (m *InferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTypes(uint64(m.Nonce))
	}
	if m.TopicId != 0 {
		n += 1 + sovTypes(uint64(m.TopicId))
	}
	if m.Cadence != 0 {
		n += 1 + sovTypes(uint64(m.Cadence))
	}
	l = m.MaxPricePerInference.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.BidAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.BlockLastChecked != 0 {
		n += 1 + sovTypes(uint64(m.BlockLastChecked))
	}
	if m.BlockValidUntil != 0 {
		n += 1 + sovTypes(uint64(m.BlockValidUntil))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Nonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTypes(uint64(m.Nonce))
	}
	return n
}

func (m *Nonces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nonces) > 0 {
		for _, e := range m.Nonces {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *TopicFeeRevenue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovTypes(uint64(m.Epoch))
	}
	l = m.Revenue.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PreviousTopicWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovTypes(uint64(m.Epoch))
	}
	if m.Weight != 0 {
		n += 9
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCadence", wireType)
			}
			m.RewardCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCadence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTopicUnmetDemand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTopicUnmetDemand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTopicsPerBlock", wireType)
			}
			m.MaxTopicsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTopicsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRequestUnmetDemand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinRequestUnmetDemand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMissingInferencePercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxMissingInferencePercent = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredMinimumStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequiredMinimumStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveStakeDelayWindow", wireType)
			}
			m.RemoveStakeDelayWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveStakeDelayWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEpochLength", wireType)
			}
			m.MinEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInferenceRequestValidity", wireType)
			}
			m.MaxInferenceRequestValidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInferenceRequestValidity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestCadence", wireType)
			}
			m.MaxRequestCadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestCadence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentRewardsReputersWorkers", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PercentRewardsReputersWorkers = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharpness", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sharpness = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaEntropy", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BetaEntropy = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcoefAbs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DcoefAbs = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LearningRate = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGradientThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxGradientThreshold = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeFraction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinStakeFraction = float64(math.Float64frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWorkersPerTopicRequest", wireType)
			}
			m.MaxWorkersPerTopicRequest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxWorkersPerTopicRequest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReputersPerTopicRequest", wireType)
			}
			m.MaxReputersPerTopicRequest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReputersPerTopicRequest |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Epsilon = float64(math.Float64frombits(v))
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PInferenceSynthesis", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PInferenceSynthesis = float64(math.Float64frombits(v))
		case 23:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaRegret", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AlphaRegret = float64(math.Float64frombits(v))
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledWorkerRequests", wireType)
			}
			m.MaxUnfulfilledWorkerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledWorkerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledReputerRequests", wireType)
			}
			m.MaxUnfulfilledReputerRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnfulfilledReputerRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberExpectedInfernceSybils", wireType)
			}
			m.NumberExpectedInfernceSybils = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberExpectedInfernceSybils |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SybilTaxExponent", wireType)
			}
			m.SybilTaxExponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SybilTaxExponent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardStakeImportance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopicRewardStakeImportance = float64(math.Float64frombits(v))
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardFeeRevenueImportance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopicRewardFeeRevenueImportance = float64(math.Float64frombits(v))
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicRewardAlpha", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TopicRewardAlpha = float64(math.Float64frombits(v))
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsVsAlloraPercentReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsVsAlloraPercentReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSamplesToScaleScores", wireType)
			}
			m.MaxSamplesToScaleScores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSamplesToScaleScores |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossLogic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LossLogic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LossMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceLogic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceLogic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferenceMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLastEnded", wireType)
			}
			m.EpochLastEnded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLastEnded |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroundTruthLag", wireType)
			}
			m.GroundTruthLag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroundTruthLag |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultArg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultArg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pnorm", wireType)
			}
			m.Pnorm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pnorm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaRegret", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AlphaRegret = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardReputer", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PrewardReputer = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardInference", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PrewardInference = float64(math.Float64frombits(v))
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrewardForecast", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PrewardForecast = float64(math.Float64frombits(v))
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FTolerance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FTolerance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerAttributedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerAttributedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerAttributedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithheldWorkerAttributedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithheldWorkerAttributedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithheldWorkerAttributedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CombinedValue = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererValues = append(m.InfererValues, &WorkerAttributedValue{})
			if err := m.InfererValues[len(m.InfererValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterValues = append(m.ForecasterValues, &WorkerAttributedValue{})
			if err := m.ForecasterValues[len(m.ForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaiveValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NaiveValue = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInfererValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInfererValues = append(m.OneOutInfererValues, &WithheldWorkerAttributedValue{})
			if err := m.OneOutInfererValues[len(m.OneOutInfererValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutForecasterValues = append(m.OneOutForecasterValues, &WithheldWorkerAttributedValue{})
			if err := m.OneOutForecasterValues[len(m.OneOutForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneInForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneInForecasterValues = append(m.OneInForecasterValues, &WorkerAttributedValue{})
			if err := m.OneInForecasterValues[len(m.OneInForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputerValueBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputerValueBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputerValueBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueBundle == nil {
				m.ValueBundle = &ValueBundle{}
			}
			if err := m.ValueBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputerValueBundles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputerValueBundles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputerValueBundles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerValueBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerValueBundles = append(m.ReputerValueBundles, &ReputerValueBundle{})
			if err := m.ReputerValueBundles[len(m.ReputerValueBundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimestampedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferences = append(m.Inferences, &Inference{})
			if err := m.Inferences[len(m.Inferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecastElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecastElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecastElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastElements = append(m.ForecastElements, &ForecastElement{})
			if err := m.ForecastElements[len(m.ForecastElements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecasts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecasts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecasts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecasts = append(m.Forecasts, &Forecast{})
			if err := m.Forecasts[len(m.Forecasts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffchainNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffchainNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffchainNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibP2PKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LibP2PKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OffchainNodes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OffchainNodes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OffchainNodes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffchainNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffchainNode = append(m.OffchainNode, &Inference{})
			if err := m.OffchainNode[len(m.OffchainNode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceSetForScoring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceSetForScoring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceSetForScoring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecastSetForScoring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecastSetForScoring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecastSetForScoring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasts == nil {
				m.Forecasts = &Forecasts{}
			}
			if err := m.Forecasts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeRemoval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRemoval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRemoval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRemovalStarted", wireType)
			}
			m.BlockRemovalStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockRemovalStarted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &StakePlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedStakePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedStakePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedStakePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedStakeRemoval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedStakeRemoval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedStakeRemoval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRemovalStarted", wireType)
			}
			m.BlockRemovalStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockRemovalStarted |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &DelegatedStakePlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Score) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Score: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Score: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Scores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AverageWorkerReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AverageWorkerReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AverageWorkerReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListeningCoefficient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListeningCoefficient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListeningCoefficient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coefficient", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Coefficient = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cadence", wireType)
			}
			m.Cadence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cadence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPricePerInference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPricePerInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockLastChecked", wireType)
			}
			m.BlockLastChecked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockLastChecked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockValidUntil", wireType)
			}
			m.BlockValidUntil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockValidUntil |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Nonces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nonces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nonces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonces = append(m.Nonces, &Nonce{})
			if err := m.Nonces[len(m.Nonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicFeeRevenue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicFeeRevenue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicFeeRevenue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Revenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviousTopicWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviousTopicWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviousTopicWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
