syntax = "proto3";
package mint.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "mint/v1beta1/types.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/allora-network/allora-chain/x/mint/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params returns the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mint/v1beta1/params";
  }
  // Inflation returns the current minting inflation value.
  rpc Inflation(QueryInflationRequest) returns (QueryInflationResponse) {
    option (google.api.http).get = "/mint/v1beta1/inflation";
  }
  // The previous block emission (NOT THE SAME AS INFLATION)
  rpc PreviousBlockEmission(QueryPreviousBlockEmissionRequest) returns (QueryPreviousBlockEmissionResponse) {
    option (google.api.http).get = "/mint/v1beta1/previous_block_emission";
  }
  // the total amount of newly minted tokens over the whole history of the chain
  rpc EcosystemTokensMinted(QueryEcosystemTokensMintedRequest) returns (QueryEcosystemTokensMintedResponse) {
    option (google.api.http).get = "/mint/v1beta1/ecosystem_tokens_minted";
  }
  // the previous reward emission per unit staked token - used for debugging
  rpc PreviousRewardEmissionPerUnitStakedToken(QueryPreviousRewardEmissionPerUnitStakedTokenRequest) returns (QueryPreviousRewardEmissionPerUnitStakedTokenResponse) {
    option (google.api.http).get = "/mint/v1beta1/previous_reward_emission_per_unit_staked_token";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryInflationRequest is the request type for the Query/Inflation RPC method.
message QueryInflationRequest {}

// QueryInflationResponse is the response type for the Query/Inflation RPC
// method.
message QueryInflationResponse {
  // inflation is the current minting inflation value.
  bytes inflation = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// query for getting the previous block emission (NOT THE SAME AS INFLATION)
message QueryPreviousBlockEmissionRequest {}

// response for getting the previous block emission (NOT THE SAME AS INFLATION)
message QueryPreviousBlockEmissionResponse {
  bytes previous_block_emission = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// query for getting the total amount of ecosystem tokens minted
// this is the total amount of new tokens ever created
message QueryEcosystemTokensMintedRequest {}

// response for getting the total amount of ecosystem tokens minted
// this is the total amount of new tokens ever created
message QueryEcosystemTokensMintedResponse {
  bytes ecosystem_tokens_minted = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// query for getting the previous reward emission per unit staked token
message QueryPreviousRewardEmissionPerUnitStakedTokenRequest {}

// response for getting the previous reward emission per unit staked token
message QueryPreviousRewardEmissionPerUnitStakedTokenResponse {
  bytes previous_reward_emission_per_unit_staked_token = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

