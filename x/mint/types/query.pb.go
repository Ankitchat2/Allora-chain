// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mint/v1beta1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryInflationRequest is the request type for the Query/Inflation RPC method.
type QueryInflationRequest struct {
}

func (m *QueryInflationRequest) Reset()         { *m = QueryInflationRequest{} }
func (m *QueryInflationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInflationRequest) ProtoMessage()    {}
func (*QueryInflationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{2}
}
func (m *QueryInflationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationRequest.Merge(m, src)
}
func (m *QueryInflationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationRequest proto.InternalMessageInfo

// QueryInflationResponse is the response type for the Query/Inflation RPC
// method.
type QueryInflationResponse struct {
	// inflation is the current minting inflation value.
	Inflation cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=inflation,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inflation"`
}

func (m *QueryInflationResponse) Reset()         { *m = QueryInflationResponse{} }
func (m *QueryInflationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInflationResponse) ProtoMessage()    {}
func (*QueryInflationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{3}
}
func (m *QueryInflationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInflationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInflationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInflationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInflationResponse.Merge(m, src)
}
func (m *QueryInflationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInflationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInflationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInflationResponse proto.InternalMessageInfo

// query for getting the previous block emission (NOT THE SAME AS INFLATION)
type QueryPreviousBlockEmissionRequest struct {
}

func (m *QueryPreviousBlockEmissionRequest) Reset()         { *m = QueryPreviousBlockEmissionRequest{} }
func (m *QueryPreviousBlockEmissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousBlockEmissionRequest) ProtoMessage()    {}
func (*QueryPreviousBlockEmissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{4}
}
func (m *QueryPreviousBlockEmissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousBlockEmissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousBlockEmissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousBlockEmissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousBlockEmissionRequest.Merge(m, src)
}
func (m *QueryPreviousBlockEmissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousBlockEmissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousBlockEmissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousBlockEmissionRequest proto.InternalMessageInfo

// response for getting the previous block emission (NOT THE SAME AS INFLATION)
type QueryPreviousBlockEmissionResponse struct {
	PreviousBlockEmission cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=previous_block_emission,json=previousBlockEmission,proto3,customtype=cosmossdk.io/math.Int" json:"previous_block_emission"`
}

func (m *QueryPreviousBlockEmissionResponse) Reset()         { *m = QueryPreviousBlockEmissionResponse{} }
func (m *QueryPreviousBlockEmissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousBlockEmissionResponse) ProtoMessage()    {}
func (*QueryPreviousBlockEmissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{5}
}
func (m *QueryPreviousBlockEmissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousBlockEmissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousBlockEmissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousBlockEmissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousBlockEmissionResponse.Merge(m, src)
}
func (m *QueryPreviousBlockEmissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousBlockEmissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousBlockEmissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousBlockEmissionResponse proto.InternalMessageInfo

// query for getting the total amount of ecosystem tokens minted
// this is the total amount of new tokens ever created
type QueryEcosystemTokensMintedRequest struct {
}

func (m *QueryEcosystemTokensMintedRequest) Reset()         { *m = QueryEcosystemTokensMintedRequest{} }
func (m *QueryEcosystemTokensMintedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEcosystemTokensMintedRequest) ProtoMessage()    {}
func (*QueryEcosystemTokensMintedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{6}
}
func (m *QueryEcosystemTokensMintedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEcosystemTokensMintedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEcosystemTokensMintedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEcosystemTokensMintedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEcosystemTokensMintedRequest.Merge(m, src)
}
func (m *QueryEcosystemTokensMintedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEcosystemTokensMintedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEcosystemTokensMintedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEcosystemTokensMintedRequest proto.InternalMessageInfo

// response for getting the total amount of ecosystem tokens minted
// this is the total amount of new tokens ever created
type QueryEcosystemTokensMintedResponse struct {
	EcosystemTokensMinted cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=ecosystem_tokens_minted,json=ecosystemTokensMinted,proto3,customtype=cosmossdk.io/math.Int" json:"ecosystem_tokens_minted"`
}

func (m *QueryEcosystemTokensMintedResponse) Reset()         { *m = QueryEcosystemTokensMintedResponse{} }
func (m *QueryEcosystemTokensMintedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEcosystemTokensMintedResponse) ProtoMessage()    {}
func (*QueryEcosystemTokensMintedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{7}
}
func (m *QueryEcosystemTokensMintedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEcosystemTokensMintedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEcosystemTokensMintedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEcosystemTokensMintedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEcosystemTokensMintedResponse.Merge(m, src)
}
func (m *QueryEcosystemTokensMintedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEcosystemTokensMintedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEcosystemTokensMintedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEcosystemTokensMintedResponse proto.InternalMessageInfo

// query for getting the previous reward emission per unit staked token
type QueryPreviousRewardEmissionPerUnitStakedTokenRequest struct {
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) Reset() {
	*m = QueryPreviousRewardEmissionPerUnitStakedTokenRequest{}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousRewardEmissionPerUnitStakedTokenRequest) ProtoMessage() {}
func (*QueryPreviousRewardEmissionPerUnitStakedTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{8}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenRequest.Merge(m, src)
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenRequest proto.InternalMessageInfo

// response for getting the previous reward emission per unit staked token
type QueryPreviousRewardEmissionPerUnitStakedTokenResponse struct {
	PreviousRewardEmissionPerUnitStakedToken cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=previous_reward_emission_per_unit_staked_token,json=previousRewardEmissionPerUnitStakedToken,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"previous_reward_emission_per_unit_staked_token"`
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) Reset() {
	*m = QueryPreviousRewardEmissionPerUnitStakedTokenResponse{}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse) ProtoMessage() {}
func (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0718dda172d2cb4, []int{9}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenResponse.Merge(m, src)
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousRewardEmissionPerUnitStakedTokenResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mint.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mint.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryInflationRequest)(nil), "mint.v1beta1.QueryInflationRequest")
	proto.RegisterType((*QueryInflationResponse)(nil), "mint.v1beta1.QueryInflationResponse")
	proto.RegisterType((*QueryPreviousBlockEmissionRequest)(nil), "mint.v1beta1.QueryPreviousBlockEmissionRequest")
	proto.RegisterType((*QueryPreviousBlockEmissionResponse)(nil), "mint.v1beta1.QueryPreviousBlockEmissionResponse")
	proto.RegisterType((*QueryEcosystemTokensMintedRequest)(nil), "mint.v1beta1.QueryEcosystemTokensMintedRequest")
	proto.RegisterType((*QueryEcosystemTokensMintedResponse)(nil), "mint.v1beta1.QueryEcosystemTokensMintedResponse")
	proto.RegisterType((*QueryPreviousRewardEmissionPerUnitStakedTokenRequest)(nil), "mint.v1beta1.QueryPreviousRewardEmissionPerUnitStakedTokenRequest")
	proto.RegisterType((*QueryPreviousRewardEmissionPerUnitStakedTokenResponse)(nil), "mint.v1beta1.QueryPreviousRewardEmissionPerUnitStakedTokenResponse")
}

func init() { proto.RegisterFile("mint/v1beta1/query.proto", fileDescriptor_b0718dda172d2cb4) }

var fileDescriptor_b0718dda172d2cb4 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x63, 0x24, 0x22, 0xf5, 0xe8, 0xc2, 0x91, 0xf4, 0x8f, 0xa9, 0xdc, 0xd6, 0x05, 0x51,
	0x21, 0xd5, 0xee, 0x1f, 0x28, 0x0b, 0x62, 0x08, 0xed, 0x50, 0x89, 0xa2, 0x52, 0xca, 0xc2, 0x62,
	0x5d, 0x9c, 0xc3, 0x39, 0x39, 0xbe, 0x73, 0x7d, 0x97, 0x96, 0xac, 0x7c, 0x00, 0x84, 0xc4, 0xc2,
	0x47, 0x80, 0x8d, 0x81, 0x2f, 0xc0, 0xd6, 0xb1, 0x2a, 0x0b, 0x62, 0xa8, 0x50, 0x8b, 0xc4, 0x67,
	0x60, 0x43, 0xb9, 0x3b, 0xa7, 0x75, 0xe3, 0x58, 0x81, 0x2e, 0x51, 0x7c, 0xef, 0x73, 0xef, 0xfb,
	0x7b, 0xee, 0xf2, 0xc4, 0x60, 0x22, 0x22, 0x54, 0xb8, 0x7b, 0x4b, 0x75, 0x2c, 0xd0, 0x92, 0xbb,
	0xdb, 0xc6, 0x49, 0xc7, 0x89, 0x13, 0x26, 0x18, 0x1c, 0xed, 0x56, 0x1c, 0x5d, 0x31, 0x2b, 0x01,
	0x0b, 0x98, 0x2c, 0xb8, 0xdd, 0x6f, 0x4a, 0x63, 0x4e, 0x05, 0x8c, 0x05, 0x2d, 0xec, 0xa2, 0x98,
	0xb8, 0x88, 0x52, 0x26, 0x90, 0x20, 0x8c, 0x72, 0x5d, 0xcd, 0xf6, 0x16, 0x9d, 0x18, 0xa7, 0x95,
	0xeb, 0x28, 0x22, 0x94, 0xb9, 0xf2, 0x53, 0x2f, 0x4d, 0xfa, 0x8c, 0x47, 0x8c, 0x7b, 0x6a, 0x86,
	0x7a, 0x50, 0x25, 0xbb, 0x02, 0xe0, 0xb3, 0x2e, 0xd8, 0x16, 0x4a, 0x50, 0xc4, 0xb7, 0xf1, 0x6e,
	0x1b, 0x73, 0x61, 0x3f, 0x05, 0x37, 0x32, 0xab, 0x3c, 0x66, 0x94, 0x63, 0xf8, 0x00, 0x94, 0x63,
	0xb9, 0x32, 0x61, 0xcc, 0x18, 0xf3, 0xd7, 0x96, 0x2b, 0xce, 0x79, 0x1f, 0x8e, 0x52, 0xd7, 0x46,
	0x0e, 0x8e, 0xa7, 0x4b, 0x1f, 0x7f, 0x7f, 0xbe, 0x6b, 0x6c, 0x6b, 0xb9, 0x3d, 0x0e, 0xaa, 0xb2,
	0xdf, 0x06, 0x7d, 0xd5, 0x92, 0x36, 0xd2, 0x41, 0x14, 0x8c, 0x5d, 0x2c, 0xe8, 0x59, 0x3b, 0x60,
	0x84, 0xa4, 0x8b, 0x72, 0xdc, 0x68, 0x6d, 0xb5, 0xdb, 0xf8, 0xc7, 0xf1, 0xf4, 0x4d, 0xe5, 0x80,
	0x37, 0x42, 0x87, 0x30, 0x37, 0x42, 0xa2, 0xe9, 0x3c, 0xc1, 0x01, 0xf2, 0x3b, 0x6b, 0xd8, 0x3f,
	0xfa, 0xb2, 0x00, 0xb4, 0xc1, 0x35, 0xec, 0x2b, 0x8a, 0xb3, 0x46, 0xf6, 0x1c, 0x98, 0x55, 0xc6,
	0x12, 0xbc, 0x47, 0x58, 0x9b, 0xd7, 0x5a, 0xcc, 0x0f, 0xd7, 0x23, 0xc2, 0xf9, 0x39, 0xa8, 0xb7,
	0x06, 0xb0, 0x8b, 0x54, 0x9a, 0xb0, 0x09, 0xc6, 0x63, 0x2d, 0xf0, 0xea, 0x5d, 0x85, 0x87, 0xb5,
	0x44, 0xf3, 0x2e, 0x6a, 0xde, 0x6a, 0x3f, 0xef, 0x06, 0x15, 0xe7, 0x48, 0x37, 0xa8, 0x50, 0xa4,
	0xd5, 0x38, 0x6f, 0x62, 0x8f, 0x7a, 0xdd, 0x67, 0xbc, 0xc3, 0x05, 0x8e, 0x76, 0x58, 0x88, 0x29,
	0xdf, 0x24, 0x54, 0xe0, 0x46, 0x1f, 0xf5, 0x00, 0xd5, 0x19, 0x35, 0x4e, 0x05, 0x9e, 0x90, 0x0a,
	0x2f, 0x92, 0x92, 0xff, 0xa7, 0xc6, 0x79, 0x13, 0xed, 0x55, 0x70, 0x2f, 0x73, 0x8a, 0xdb, 0x78,
	0x1f, 0x25, 0x8d, 0xd4, 0xd4, 0x16, 0x4e, 0x5e, 0x50, 0x22, 0x9e, 0x0b, 0x14, 0xe2, 0x86, 0xdc,
	0x97, 0x1a, 0x39, 0x32, 0xc0, 0xfd, 0x7f, 0xdc, 0xa8, 0xbd, 0x7d, 0x30, 0x80, 0xd3, 0xbb, 0x92,
	0x44, 0xee, 0xea, 0xdd, 0x89, 0x17, 0xe3, 0xc4, 0x6b, 0x53, 0x22, 0x3c, 0x2e, 0x77, 0x2a, 0xef,
	0x97, 0xfc, 0x65, 0xcd, 0xc7, 0x43, 0x22, 0x2e, 0x7f, 0x2d, 0x83, 0xab, 0xd2, 0x14, 0x0c, 0x41,
	0x59, 0x05, 0x05, 0xce, 0x64, 0xe3, 0xd3, 0x9f, 0x43, 0x73, 0xb6, 0x40, 0xa1, 0x3c, 0xdb, 0x53,
	0x6f, 0xbe, 0xfd, 0x7a, 0x7f, 0x65, 0x0c, 0x56, 0xdc, 0xcc, 0x3f, 0x82, 0x0a, 0x1e, 0xdc, 0x07,
	0x23, 0xbd, 0x68, 0xc1, 0xb9, 0x9c, 0x6e, 0x17, 0x13, 0x69, 0xde, 0x2a, 0x16, 0xe9, 0xa9, 0xd3,
	0x72, 0xea, 0x24, 0x1c, 0xcf, 0x4e, 0xed, 0x05, 0x0d, 0x7e, 0x32, 0x40, 0x35, 0x37, 0x3e, 0xd0,
	0xcd, 0xf3, 0x54, 0x10, 0x47, 0x73, 0x71, 0xf8, 0x0d, 0x9a, 0x6e, 0x41, 0xd2, 0xdd, 0x81, 0xb7,
	0x2f, 0x9c, 0x49, 0x7e, 0x5a, 0x25, 0x6b, 0x6e, 0x68, 0x72, 0x59, 0x8b, 0x42, 0x98, 0xcb, 0x5a,
	0x98, 0xc7, 0x41, 0xac, 0x03, 0x32, 0x0a, 0xff, 0x18, 0x60, 0x7e, 0xd8, 0x5c, 0xc0, 0x5a, 0xc1,
	0xc9, 0x0d, 0x99, 0x46, 0xf3, 0xf1, 0xa5, 0x7a, 0x68, 0x93, 0x6b, 0xd2, 0xe4, 0x23, 0xf8, 0x70,
	0xc0, 0x85, 0x0c, 0x95, 0xd5, 0xda, 0xe6, 0xc1, 0x89, 0x65, 0x1c, 0x9e, 0x58, 0xc6, 0xcf, 0x13,
	0xcb, 0x78, 0x77, 0x6a, 0x95, 0x0e, 0x4f, 0xad, 0xd2, 0xf7, 0x53, 0xab, 0xf4, 0x72, 0x25, 0x20,
	0xa2, 0xd9, 0xae, 0x3b, 0x3e, 0x8b, 0x5c, 0xd4, 0x6a, 0xb1, 0x04, 0x2d, 0x50, 0x2c, 0xf6, 0x59,
	0x12, 0xa6, 0x8f, 0x7e, 0x13, 0x11, 0xea, 0xbe, 0x56, 0xf3, 0xe5, 0xeb, 0xb2, 0x5e, 0x96, 0x6f,
	0xc0, 0x95, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x56, 0x1e, 0xea, 0x0c, 0xa7, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the total set of minting parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Inflation returns the current minting inflation value.
	Inflation(ctx context.Context, in *QueryInflationRequest, opts ...grpc.CallOption) (*QueryInflationResponse, error)
	// The previous block emission (NOT THE SAME AS INFLATION)
	PreviousBlockEmission(ctx context.Context, in *QueryPreviousBlockEmissionRequest, opts ...grpc.CallOption) (*QueryPreviousBlockEmissionResponse, error)
	// the total amount of newly minted tokens over the whole history of the chain
	EcosystemTokensMinted(ctx context.Context, in *QueryEcosystemTokensMintedRequest, opts ...grpc.CallOption) (*QueryEcosystemTokensMintedResponse, error)
	// the previous reward emission per unit staked token - used for debugging
	PreviousRewardEmissionPerUnitStakedToken(ctx context.Context, in *QueryPreviousRewardEmissionPerUnitStakedTokenRequest, opts ...grpc.CallOption) (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mint.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Inflation(ctx context.Context, in *QueryInflationRequest, opts ...grpc.CallOption) (*QueryInflationResponse, error) {
	out := new(QueryInflationResponse)
	err := c.cc.Invoke(ctx, "/mint.v1beta1.Query/Inflation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PreviousBlockEmission(ctx context.Context, in *QueryPreviousBlockEmissionRequest, opts ...grpc.CallOption) (*QueryPreviousBlockEmissionResponse, error) {
	out := new(QueryPreviousBlockEmissionResponse)
	err := c.cc.Invoke(ctx, "/mint.v1beta1.Query/PreviousBlockEmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EcosystemTokensMinted(ctx context.Context, in *QueryEcosystemTokensMintedRequest, opts ...grpc.CallOption) (*QueryEcosystemTokensMintedResponse, error) {
	out := new(QueryEcosystemTokensMintedResponse)
	err := c.cc.Invoke(ctx, "/mint.v1beta1.Query/EcosystemTokensMinted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PreviousRewardEmissionPerUnitStakedToken(ctx context.Context, in *QueryPreviousRewardEmissionPerUnitStakedTokenRequest, opts ...grpc.CallOption) (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse, error) {
	out := new(QueryPreviousRewardEmissionPerUnitStakedTokenResponse)
	err := c.cc.Invoke(ctx, "/mint.v1beta1.Query/PreviousRewardEmissionPerUnitStakedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the total set of minting parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Inflation returns the current minting inflation value.
	Inflation(context.Context, *QueryInflationRequest) (*QueryInflationResponse, error)
	// The previous block emission (NOT THE SAME AS INFLATION)
	PreviousBlockEmission(context.Context, *QueryPreviousBlockEmissionRequest) (*QueryPreviousBlockEmissionResponse, error)
	// the total amount of newly minted tokens over the whole history of the chain
	EcosystemTokensMinted(context.Context, *QueryEcosystemTokensMintedRequest) (*QueryEcosystemTokensMintedResponse, error)
	// the previous reward emission per unit staked token - used for debugging
	PreviousRewardEmissionPerUnitStakedToken(context.Context, *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Inflation(ctx context.Context, req *QueryInflationRequest) (*QueryInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inflation not implemented")
}
func (*UnimplementedQueryServer) PreviousBlockEmission(ctx context.Context, req *QueryPreviousBlockEmissionRequest) (*QueryPreviousBlockEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousBlockEmission not implemented")
}
func (*UnimplementedQueryServer) EcosystemTokensMinted(ctx context.Context, req *QueryEcosystemTokensMintedRequest) (*QueryEcosystemTokensMintedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EcosystemTokensMinted not implemented")
}
func (*UnimplementedQueryServer) PreviousRewardEmissionPerUnitStakedToken(ctx context.Context, req *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) (*QueryPreviousRewardEmissionPerUnitStakedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousRewardEmissionPerUnitStakedToken not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Inflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Inflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v1beta1.Query/Inflation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Inflation(ctx, req.(*QueryInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PreviousBlockEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousBlockEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PreviousBlockEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v1beta1.Query/PreviousBlockEmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PreviousBlockEmission(ctx, req.(*QueryPreviousBlockEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EcosystemTokensMinted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEcosystemTokensMintedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EcosystemTokensMinted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v1beta1.Query/EcosystemTokensMinted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EcosystemTokensMinted(ctx, req.(*QueryEcosystemTokensMintedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PreviousRewardEmissionPerUnitStakedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousRewardEmissionPerUnitStakedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PreviousRewardEmissionPerUnitStakedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mint.v1beta1.Query/PreviousRewardEmissionPerUnitStakedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PreviousRewardEmissionPerUnitStakedToken(ctx, req.(*QueryPreviousRewardEmissionPerUnitStakedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mint.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Inflation",
			Handler:    _Query_Inflation_Handler,
		},
		{
			MethodName: "PreviousBlockEmission",
			Handler:    _Query_PreviousBlockEmission_Handler,
		},
		{
			MethodName: "EcosystemTokensMinted",
			Handler:    _Query_EcosystemTokensMinted_Handler,
		},
		{
			MethodName: "PreviousRewardEmissionPerUnitStakedToken",
			Handler:    _Query_PreviousRewardEmissionPerUnitStakedToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mint/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInflationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInflationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInflationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInflationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Inflation.Size()
		i -= size
		if _, err := m.Inflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousBlockEmissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousBlockEmissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousBlockEmissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPreviousBlockEmissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousBlockEmissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousBlockEmissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PreviousBlockEmission.Size()
		i -= size
		if _, err := m.PreviousBlockEmission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEcosystemTokensMintedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEcosystemTokensMintedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEcosystemTokensMintedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEcosystemTokensMintedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEcosystemTokensMintedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEcosystemTokensMintedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EcosystemTokensMinted.Size()
		i -= size
		if _, err := m.EcosystemTokensMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PreviousRewardEmissionPerUnitStakedToken.Size()
		i -= size
		if _, err := m.PreviousRewardEmissionPerUnitStakedToken.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInflationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInflationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Inflation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPreviousBlockEmissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPreviousBlockEmissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousBlockEmission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEcosystemTokensMintedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEcosystemTokensMintedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EcosystemTokensMinted.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousRewardEmissionPerUnitStakedToken.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInflationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInflationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInflationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousBlockEmissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousBlockEmissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousBlockEmissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousBlockEmissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousBlockEmissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousBlockEmissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockEmission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousBlockEmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEcosystemTokensMintedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEcosystemTokensMintedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEcosystemTokensMintedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEcosystemTokensMintedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEcosystemTokensMintedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEcosystemTokensMintedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcosystemTokensMinted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EcosystemTokensMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousRewardEmissionPerUnitStakedTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousRewardEmissionPerUnitStakedTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousRewardEmissionPerUnitStakedTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousRewardEmissionPerUnitStakedTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousRewardEmissionPerUnitStakedTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousRewardEmissionPerUnitStakedToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousRewardEmissionPerUnitStakedToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
